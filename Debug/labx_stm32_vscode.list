
labx_stm32_vscode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc80  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002614  0800de30  0800de30  0000ee30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010444  08010444  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010444  08010444  00011444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801044c  0801044c  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801044c  0801044c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010450  08010450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010454  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121d8  2**0
                  CONTENTS
 10 .bss          00005118  200001d8  200001d8  000121d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200052f0  200052f0  000121d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d6da  00000000  00000000  00012206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d1b  00000000  00000000  0004f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002048  00000000  00000000  00055600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018c6  00000000  00000000  00057648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028dfc  00000000  00000000  00058f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027bc1  00000000  00000000  00081d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f89f8  00000000  00000000  000a98cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a22c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009d40  00000000  00000000  001a2308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001ac048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800de18 	.word	0x0800de18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800de18 	.word	0x0800de18

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <microDelay>:
#include "gpio.h"
#include "main.h"
#include "tim.h"
#include "stdio.h"

void microDelay(uint32_t time){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <microDelay+0x6c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(&htim2);
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <microDelay+0x6c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <microDelay+0x6c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim2) < time);
 8001024:	bf00      	nop
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <microDelay+0x6c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	429a      	cmp	r2, r3
 8001030:	d8f9      	bhi.n	8001026 <microDelay+0x22>
	__HAL_TIM_DISABLE(&htim2);
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <microDelay+0x6c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	f241 1311 	movw	r3, #4369	@ 0x1111
 800103c:	4013      	ands	r3, r2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <microDelay+0x5e>
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <microDelay+0x6c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	f240 4344 	movw	r3, #1092	@ 0x444
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d107      	bne.n	8001062 <microDelay+0x5e>
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <microDelay+0x6c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <microDelay+0x6c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200003c0 	.word	0x200003c0

08001074 <setPIN_Output>:
/************
use GPIO control & receive data from DHT11
DHT11 data PIN -> PF12 
************/
void setPIN_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN){
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN;
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001084:	2311      	movs	r3, #17
 8001086:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f002 fed4 	bl	8003e40 <HAL_GPIO_Init>
}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <setPIN_Input>:

void setPIN_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN;
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f002 febe 	bl	8003e40 <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <dht11RstCheck>:
/**********
DHT11 is alive?
alive -> 1
dead -> 0
**********/
uint8_t dht11RstCheck(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	uint8_t timer = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
	setPIN_Output(DHT11_GPIO_Port, DHT11_Pin);
 80010d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010da:	4828      	ldr	r0, [pc, #160]	@ (800117c <dht11RstCheck+0xb0>)
 80010dc:	f7ff ffca 	bl	8001074 <setPIN_Output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e6:	4825      	ldr	r0, [pc, #148]	@ (800117c <dht11RstCheck+0xb0>)
 80010e8:	f003 f86e 	bl	80041c8 <HAL_GPIO_WritePin>
	microDelay(20000);
 80010ec:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80010f0:	f7ff ff88 	bl	8001004 <microDelay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010fa:	4820      	ldr	r0, [pc, #128]	@ (800117c <dht11RstCheck+0xb0>)
 80010fc:	f003 f864 	bl	80041c8 <HAL_GPIO_WritePin>
	microDelay(30);
 8001100:	201e      	movs	r0, #30
 8001102:	f7ff ff7f 	bl	8001004 <microDelay>
	setPIN_Input(DHT11_GPIO_Port, DHT11_Pin);
 8001106:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800110a:	481c      	ldr	r0, [pc, #112]	@ (800117c <dht11RstCheck+0xb0>)
 800110c:	f7ff ffc8 	bl	80010a0 <setPIN_Input>
	
	while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
 8001110:	e005      	b.n	800111e <dht11RstCheck+0x52>
		timer ++;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3301      	adds	r3, #1
 8001116:	71fb      	strb	r3, [r7, #7]
		microDelay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff73 	bl	8001004 <microDelay>
	while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
 800111e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001122:	4816      	ldr	r0, [pc, #88]	@ (800117c <dht11RstCheck+0xb0>)
 8001124:	f003 f838 	bl	8004198 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f1      	beq.n	8001112 <dht11RstCheck+0x46>
	}
	if(timer > 100 || timer < 20){
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b64      	cmp	r3, #100	@ 0x64
 8001132:	d802      	bhi.n	800113a <dht11RstCheck+0x6e>
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b13      	cmp	r3, #19
 8001138:	d801      	bhi.n	800113e <dht11RstCheck+0x72>
		return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e019      	b.n	8001172 <dht11RstCheck+0xa6>
	}
	
	timer = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
 8001142:	e005      	b.n	8001150 <dht11RstCheck+0x84>
		timer ++;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	3301      	adds	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
		microDelay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff ff5a 	bl	8001004 <microDelay>
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
 8001150:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001154:	4809      	ldr	r0, [pc, #36]	@ (800117c <dht11RstCheck+0xb0>)
 8001156:	f003 f81f 	bl	8004198 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f1      	bne.n	8001144 <dht11RstCheck+0x78>
	}
	if(timer >100 || timer < 20){
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b64      	cmp	r3, #100	@ 0x64
 8001164:	d802      	bhi.n	800116c <dht11RstCheck+0xa0>
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b13      	cmp	r3, #19
 800116a:	d801      	bhi.n	8001170 <dht11RstCheck+0xa4>
		return 0;
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <dht11RstCheck+0xa6>
	}
	
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021400 	.word	0x40021400

08001180 <DHT11ReadByte>:

uint8_t DHT11ReadByte(){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint8_t byte;
	for(int i = 0; i < 8;i ++){
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	e026      	b.n	80011da <DHT11ReadByte+0x5a>
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 800118c:	bf00      	nop
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	4816      	ldr	r0, [pc, #88]	@ (80011ec <DHT11ReadByte+0x6c>)
 8001194:	f003 f800 	bl	8004198 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f7      	bne.n	800118e <DHT11ReadByte+0xe>
		while(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 800119e:	bf00      	nop
 80011a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a4:	4811      	ldr	r0, [pc, #68]	@ (80011ec <DHT11ReadByte+0x6c>)
 80011a6:	f002 fff7 	bl	8004198 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f7      	beq.n	80011a0 <DHT11ReadByte+0x20>
		
		microDelay(40);
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	f7ff ff27 	bl	8001004 <microDelay>
		byte <<= 1;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	71fb      	strb	r3, [r7, #7]
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)){
 80011bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c0:	480a      	ldr	r0, [pc, #40]	@ (80011ec <DHT11ReadByte+0x6c>)
 80011c2:	f002 ffe9 	bl	8004198 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <DHT11ReadByte+0x54>
			byte |= 0x01;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8;i ++){
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	ddd5      	ble.n	800118c <DHT11ReadByte+0xc>
		}
	}
	return byte;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021400 	.word	0x40021400

080011f0 <DHT11GetData>:

uint8_t DHT11GetData(float *Humi, float *Temp){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	@ 0x38
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	int8_t sta = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t buffer[5];
	
	if(dht11RstCheck()){
 8001200:	f7ff ff64 	bl	80010cc <dht11RstCheck>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d054      	beq.n	80012b4 <DHT11GetData+0xc4>
		for(int i = 0; i< 5 ;i++){
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800120e:	e00c      	b.n	800122a <DHT11GetData+0x3a>
			buffer[i] = DHT11ReadByte();
 8001210:	f7ff ffb6 	bl	8001180 <DHT11ReadByte>
 8001214:	4603      	mov	r3, r0
 8001216:	4619      	mov	r1, r3
 8001218:	f107 021c 	add.w	r2, r7, #28
 800121c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121e:	4413      	add	r3, r2
 8001220:	460a      	mov	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< 5 ;i++){
 8001224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001226:	3301      	adds	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800122a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800122c:	2b04      	cmp	r3, #4
 800122e:	ddef      	ble.n	8001210 <DHT11GetData+0x20>
		}
		if(buffer[0] + buffer[1] + buffer[2] + buffer[3] == buffer[4]){
 8001230:	7f3b      	ldrb	r3, [r7, #28]
 8001232:	461a      	mov	r2, r3
 8001234:	7f7b      	ldrb	r3, [r7, #29]
 8001236:	4413      	add	r3, r2
 8001238:	7fba      	ldrb	r2, [r7, #30]
 800123a:	4413      	add	r3, r2
 800123c:	7ffa      	ldrb	r2, [r7, #31]
 800123e:	4413      	add	r3, r2
 8001240:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001244:	4293      	cmp	r3, r2
 8001246:	d131      	bne.n	80012ac <DHT11GetData+0xbc>
			uint8_t humiInt = buffer[0];
 8001248:	7f3b      	ldrb	r3, [r7, #28]
 800124a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			uint8_t humiFloat = buffer[1];
 800124e:	7f7b      	ldrb	r3, [r7, #29]
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			uint8_t tempInt = buffer[2];
 8001254:	7fbb      	ldrb	r3, [r7, #30]
 8001256:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			uint8_t tempFloat = buffer[3];
 800125a:	7ffb      	ldrb	r3, [r7, #31]
 800125c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			
			char tmpHumi[8];
			char tmpTemp[8];
			snprintf(tmpHumi, 8 , "%d.%d",humiInt, humiFloat);
 8001260:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001264:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001268:	f107 0014 	add.w	r0, r7, #20
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4613      	mov	r3, r2
 8001270:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <DHT11GetData+0xe4>)
 8001272:	2108      	movs	r1, #8
 8001274:	f008 fd48 	bl	8009d08 <sniprintf>
			snprintf(tmpTemp, 8, "%d.%d", tempInt, tempFloat);
 8001278:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800127c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001280:	f107 000c 	add.w	r0, r7, #12
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <DHT11GetData+0xe4>)
 800128a:	2108      	movs	r1, #8
 800128c:	f008 fd3c 	bl	8009d08 <sniprintf>
			
			sscanf(tmpHumi, "%f", Humi);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4910      	ldr	r1, [pc, #64]	@ (80012d8 <DHT11GetData+0xe8>)
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fd89 	bl	8009db0 <siscanf>
			sscanf(tmpTemp, "%f", Temp);
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	490c      	ldr	r1, [pc, #48]	@ (80012d8 <DHT11GetData+0xe8>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 fd82 	bl	8009db0 <siscanf>
		}
		sta = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012b2:	e008      	b.n	80012c6 <DHT11GetData+0xd6>
	}
	
	else
	{
		*Humi = 99;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <DHT11GetData+0xec>)
 80012b8:	601a      	str	r2, [r3, #0]
		*Temp = 99;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <DHT11GetData+0xec>)
 80012be:	601a      	str	r2, [r3, #0]
		sta = -1;
 80012c0:	23ff      	movs	r3, #255	@ 0xff
 80012c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}
	
	return sta;
 80012c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ca:	4618      	mov	r0, r3
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800de30 	.word	0x0800de30
 80012d8:	0800de38 	.word	0x0800de38
 80012dc:	42c60000 	.word	0x42c60000

080012e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	4b3c      	ldr	r3, [pc, #240]	@ (80013ec <MX_GPIO_Init+0x10c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a3b      	ldr	r2, [pc, #236]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	4b35      	ldr	r3, [pc, #212]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a34      	ldr	r2, [pc, #208]	@ (80013ec <MX_GPIO_Init+0x10c>)
 800131c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a26      	ldr	r2, [pc, #152]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <MX_GPIO_Init+0x10c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_GPIO_Init+0x10c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <MX_GPIO_Init+0x10c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_GPIO_Init+0x10c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B14_Pin|LED_B7_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <MX_GPIO_Init+0x110>)
 80013a6:	f002 ff0f 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80013aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <MX_GPIO_Init+0x114>)
 80013c0:	f002 fd3e 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_B14_Pin|LED_B7_Pin;
 80013c4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_GPIO_Init+0x110>)
 80013de:	f002 fd2f 	bl	8003e40 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	@ 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40021400 	.word	0x40021400

080013f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_I2C1_Init+0x74>)
 80013fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001470 <MX_I2C1_Init+0x78>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_I2C1_Init+0x74>)
 8001404:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <MX_I2C1_Init+0x7c>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_I2C1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_I2C1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_I2C1_Init+0x74>)
 8001416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <MX_I2C1_Init+0x74>)
 8001436:	f002 fee1 	bl	80041fc <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 f9e8 	bl	8001814 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4809      	ldr	r0, [pc, #36]	@ (800146c <MX_I2C1_Init+0x74>)
 8001448:	f003 fb75 	bl	8004b36 <HAL_I2CEx_ConfigAnalogFilter>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001452:	f000 f9df 	bl	8001814 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001456:	2100      	movs	r1, #0
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_I2C1_Init+0x74>)
 800145a:	f003 fba8 	bl	8004bae <HAL_I2CEx_ConfigDigitalFilter>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001464:	f000 f9d6 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001f4 	.word	0x200001f4
 8001470:	40005400 	.word	0x40005400
 8001474:	00061a80 	.word	0x00061a80

08001478 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	@ (80014fc <HAL_I2C_MspInit+0x84>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12c      	bne.n	80014f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <HAL_I2C_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <HAL_I2C_MspInit+0x88>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_I2C_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80014b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014bc:	2312      	movs	r3, #18
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c8:	2304      	movs	r3, #4
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	480c      	ldr	r0, [pc, #48]	@ (8001504 <HAL_I2C_MspInit+0x8c>)
 80014d4:	f002 fcb4 	bl	8003e40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_I2C_MspInit+0x88>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <HAL_I2C_MspInit+0x88>)
 80014e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_I2C_MspInit+0x88>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40005400 	.word	0x40005400
 8001500:	40023800 	.word	0x40023800
 8001504:	40020400 	.word	0x40020400

08001508 <taskOLED>:
/**********************
receive data from queue
success -> pdPASS(1) -> update OLED
fail -> pdFAIL(0) -> taskYIELD();
**********************/
void taskOLED(void *pvParm){
 8001508:	b580      	push	{r7, lr}
 800150a:	b090      	sub	sp, #64	@ 0x40
 800150c:	af02      	add	r7, sp, #8
 800150e:	6078      	str	r0, [r7, #4]
	u8g2Init(&u8g2);
 8001510:	4835      	ldr	r0, [pc, #212]	@ (80015e8 <taskOLED+0xe0>)
 8001512:	f000 faa1 	bl	8001a58 <u8g2Init>
	u8g2_ClearBuffer(&u8g2);
 8001516:	4834      	ldr	r0, [pc, #208]	@ (80015e8 <taskOLED+0xe0>)
 8001518:	f000 fcc6 	bl	8001ea8 <u8g2_ClearBuffer>
	u8g2_ClearDisplay(&u8g2);
 800151c:	4832      	ldr	r0, [pc, #200]	@ (80015e8 <taskOLED+0xe0>)
 800151e:	f000 fd9e 	bl	800205e <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_samim_16_t_all);
 8001522:	4932      	ldr	r1, [pc, #200]	@ (80015ec <taskOLED+0xe4>)
 8001524:	4830      	ldr	r0, [pc, #192]	@ (80015e8 <taskOLED+0xe0>)
 8001526:	f001 fb6f 	bl	8002c08 <u8g2_SetFont>
	char displayTemp[20];
	char displayHumi[20];
	while(1){
		
		BaseType_t dht11Receive = xQueueReceive(queueDHT11, &dht11DATA, 0);
 800152a:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <taskOLED+0xe8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	4930      	ldr	r1, [pc, #192]	@ (80015f4 <taskOLED+0xec>)
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fb5c 	bl	8006bf0 <xQueueReceive>
 8001538:	6378      	str	r0, [r7, #52]	@ 0x34
		if(dht11Receive == pdPASS){
 800153a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800153c:	2b01      	cmp	r3, #1
 800153e:	d147      	bne.n	80015d0 <taskOLED+0xc8>
			snprintf(displayTemp, sizeof(displayTemp), "Temp: %.1f C", dht11DATA.Temp);
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <taskOLED+0xec>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f80f 	bl	8000568 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	f107 0020 	add.w	r0, r7, #32
 8001552:	e9cd 2300 	strd	r2, r3, [sp]
 8001556:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <taskOLED+0xf0>)
 8001558:	2114      	movs	r1, #20
 800155a:	f008 fbd5 	bl	8009d08 <sniprintf>
			snprintf(displayHumi, sizeof(displayHumi), "Humi: %.1f %%", dht11DATA.Humi);
 800155e:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <taskOLED+0xec>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f800 	bl	8000568 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	f107 000c 	add.w	r0, r7, #12
 8001570:	e9cd 2300 	strd	r2, r3, [sp]
 8001574:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <taskOLED+0xf4>)
 8001576:	2114      	movs	r1, #20
 8001578:	f008 fbc6 	bl	8009d08 <sniprintf>
			u8g2_ClearBuffer(&u8g2);
 800157c:	481a      	ldr	r0, [pc, #104]	@ (80015e8 <taskOLED+0xe0>)
 800157e:	f000 fc93 	bl	8001ea8 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 0, 20, displayTemp);
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	2214      	movs	r2, #20
 8001588:	2100      	movs	r1, #0
 800158a:	4817      	ldr	r0, [pc, #92]	@ (80015e8 <taskOLED+0xe0>)
 800158c:	f001 fa9a 	bl	8002ac4 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 0, 40, displayHumi);
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2228      	movs	r2, #40	@ 0x28
 8001596:	2100      	movs	r1, #0
 8001598:	4813      	ldr	r0, [pc, #76]	@ (80015e8 <taskOLED+0xe0>)
 800159a:	f001 fa93 	bl	8002ac4 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800159e:	4812      	ldr	r0, [pc, #72]	@ (80015e8 <taskOLED+0xe0>)
 80015a0:	f000 fcf5 	bl	8001f8e <u8g2_SendBuffer>
			if(dht11DATA.Humi>=60){
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <taskOLED+0xec>)
 80015a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015aa:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001600 <taskOLED+0xf8>
 80015ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	db05      	blt.n	80015c4 <taskOLED+0xbc>
				HAL_GPIO_WritePin(LED_B7_GPIO_Port, LED_B7_Pin, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2180      	movs	r1, #128	@ 0x80
 80015bc:	4811      	ldr	r0, [pc, #68]	@ (8001604 <taskOLED+0xfc>)
 80015be:	f002 fe03 	bl	80041c8 <HAL_GPIO_WritePin>
 80015c2:	e00d      	b.n	80015e0 <taskOLED+0xd8>
			}
			else{
				HAL_GPIO_WritePin(LED_B7_GPIO_Port, LED_B7_Pin, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2180      	movs	r1, #128	@ 0x80
 80015c8:	480e      	ldr	r0, [pc, #56]	@ (8001604 <taskOLED+0xfc>)
 80015ca:	f002 fdfd 	bl	80041c8 <HAL_GPIO_WritePin>
 80015ce:	e007      	b.n	80015e0 <taskOLED+0xd8>
			}
		}else{
			taskYIELD();
 80015d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <taskOLED+0x100>)
 80015d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	f3bf 8f4f 	dsb	sy
 80015dc:	f3bf 8f6f 	isb	sy
		}
		
		vTaskDelay(100);
 80015e0:	2064      	movs	r0, #100	@ 0x64
 80015e2:	f005 fefb 	bl	80073dc <vTaskDelay>
	while(1){
 80015e6:	e7a0      	b.n	800152a <taskOLED+0x22>
 80015e8:	20000254 	.word	0x20000254
 80015ec:	0800dedc 	.word	0x0800dedc
 80015f0:	20000248 	.word	0x20000248
 80015f4:	200002e8 	.word	0x200002e8
 80015f8:	0800de3c 	.word	0x0800de3c
 80015fc:	0800de4c 	.word	0x0800de4c
 8001600:	42700000 	.word	0x42700000
 8001604:	40020400 	.word	0x40020400
 8001608:	e000ed04 	.word	0xe000ed04

0800160c <taskDHT11>:
success -> 0
fail -> -1

run every 3s
***************/
void taskDHT11(void *pvParm){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	while(1){
		
		HAL_GPIO_WritePin(LED_B14_GPIO_Port, LED_B14_Pin, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800161a:	4818      	ldr	r0, [pc, #96]	@ (800167c <taskDHT11+0x70>)
 800161c:	f002 fdd4 	bl	80041c8 <HAL_GPIO_WritePin>
		if(DHT11GetData(&dht11DATA.Humi, &dht11DATA.Temp) == 0){
 8001620:	4917      	ldr	r1, [pc, #92]	@ (8001680 <taskDHT11+0x74>)
 8001622:	4818      	ldr	r0, [pc, #96]	@ (8001684 <taskDHT11+0x78>)
 8001624:	f7ff fde4 	bl	80011f0 <DHT11GetData>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11a      	bne.n	8001664 <taskDHT11+0x58>
			xQueueSend(queueDHT11, &dht11DATA, 0);
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <taskDHT11+0x7c>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	4912      	ldr	r1, [pc, #72]	@ (8001680 <taskDHT11+0x74>)
 8001638:	f005 f93a 	bl	80068b0 <xQueueGenericSend>
			printf("Temp:%.1f C\r\n", dht11DATA.Temp);
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <taskDHT11+0x74>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff91 	bl	8000568 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4810      	ldr	r0, [pc, #64]	@ (800168c <taskDHT11+0x80>)
 800164c:	f008 faec 	bl	8009c28 <iprintf>
			printf("Humi:%.1f %%\r\n", dht11DATA.Humi);
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <taskDHT11+0x74>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff87 	bl	8000568 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	480c      	ldr	r0, [pc, #48]	@ (8001690 <taskDHT11+0x84>)
 8001660:	f008 fae2 	bl	8009c28 <iprintf>
		}
		
		HAL_GPIO_WritePin(LED_B14_GPIO_Port, LED_B14_Pin, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800166a:	4804      	ldr	r0, [pc, #16]	@ (800167c <taskDHT11+0x70>)
 800166c:	f002 fdac 	bl	80041c8 <HAL_GPIO_WritePin>
		vTaskDelay(3000);
 8001670:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001674:	f005 feb2 	bl	80073dc <vTaskDelay>
		HAL_GPIO_WritePin(LED_B14_GPIO_Port, LED_B14_Pin, 1);
 8001678:	e7cc      	b.n	8001614 <taskDHT11+0x8>
 800167a:	bf00      	nop
 800167c:	40020400 	.word	0x40020400
 8001680:	200002e8 	.word	0x200002e8
 8001684:	200002ec 	.word	0x200002ec
 8001688:	20000248 	.word	0x20000248
 800168c:	0800de5c 	.word	0x0800de5c
 8001690:	0800de6c 	.word	0x0800de6c

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169a:	f002 faad 	bl	8003bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169e:	f000 f83d 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f7ff fe1d 	bl	80012e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016a6:	f000 fb93 	bl	8001dd0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80016aa:	f002 f9d3 	bl	8003a54 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80016ae:	f7ff fea3 	bl	80013f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	queueDHT11 = xQueueCreate(3, sizeof(dht11DATA));
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	2003      	movs	r0, #3
 80016b8:	f005 f89b 	bl	80067f2 <xQueueGenericCreate>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a0f      	ldr	r2, [pc, #60]	@ (80016fc <main+0x68>)
 80016c0:	6013      	str	r3, [r2, #0]
	usStackDepth -> const uint16_t  
	1word = 2bytes
	taskOLED -> 256 * 2 = 512 bytes = 0.5 kB
	taskDHT11 -> 128 * 2 = 256 bytes = 0.25 kB
	***********************/
	xTaskCreate(taskOLED, "OLED", 256, NULL, 1, &handleOLED);
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <main+0x6c>)
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	2301      	movs	r3, #1
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d0:	490c      	ldr	r1, [pc, #48]	@ (8001704 <main+0x70>)
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <main+0x74>)
 80016d4:	f005 fd3c 	bl	8007150 <xTaskCreate>
	xTaskCreate(taskDHT11, "DHT11", 128, NULL, 2, &handleDHT11);
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <main+0x78>)
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	2302      	movs	r3, #2
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	2280      	movs	r2, #128	@ 0x80
 80016e4:	490a      	ldr	r1, [pc, #40]	@ (8001710 <main+0x7c>)
 80016e6:	480b      	ldr	r0, [pc, #44]	@ (8001714 <main+0x80>)
 80016e8:	f005 fd32 	bl	8007150 <xTaskCreate>
	printf("StartScheduler \r\n");
 80016ec:	480a      	ldr	r0, [pc, #40]	@ (8001718 <main+0x84>)
 80016ee:	f008 fb03 	bl	8009cf8 <puts>
	vTaskStartScheduler();
 80016f2:	f005 fea9 	bl	8007448 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016f6:	bf00      	nop
 80016f8:	e7fd      	b.n	80016f6 <main+0x62>
 80016fa:	bf00      	nop
 80016fc:	20000248 	.word	0x20000248
 8001700:	20000250 	.word	0x20000250
 8001704:	0800de7c 	.word	0x0800de7c
 8001708:	08001509 	.word	0x08001509
 800170c:	2000024c 	.word	0x2000024c
 8001710:	0800de84 	.word	0x0800de84
 8001714:	0800160d 	.word	0x0800160d
 8001718:	0800de8c 	.word	0x0800de8c

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	@ 0x50
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2230      	movs	r2, #48	@ 0x30
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f008 fc44 	bl	8009fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <SystemClock_Config+0xcc>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	4a27      	ldr	r2, [pc, #156]	@ (80017e8 <SystemClock_Config+0xcc>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001750:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <SystemClock_Config+0xcc>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <SystemClock_Config+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a21      	ldr	r2, [pc, #132]	@ (80017ec <SystemClock_Config+0xd0>)
 8001766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <SystemClock_Config+0xd0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800177c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001786:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800178c:	2304      	movs	r3, #4
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001790:	23a8      	movs	r3, #168	@ 0xa8
 8001792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001794:	2302      	movs	r3, #2
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001798:	2307      	movs	r3, #7
 800179a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fa43 	bl	8004c2c <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017ac:	f000 f832 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b0:	230f      	movs	r3, #15
 80017b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2105      	movs	r1, #5
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fca4 	bl	800511c <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017da:	f000 f81b 	bl	8001814 <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	@ 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001802:	f002 fa1b 	bl	8003c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40010000 	.word	0x40010000

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <Error_Handler+0x8>

08001820 <u8x8_byte_hw_i2c>:
#include "oled.h"
#include "i2c.h"

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	72fb      	strb	r3, [r7, #11]
 800182e:	4613      	mov	r3, r2
 8001830:	72bb      	strb	r3, [r7, #10]
    /* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
    static uint8_t buffer[128];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg)
 8001832:	7afb      	ldrb	r3, [r7, #11]
 8001834:	3b14      	subs	r3, #20
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d84c      	bhi.n	80018d4 <u8x8_byte_hw_i2c+0xb4>
 800183a:	a201      	add	r2, pc, #4	@ (adr r2, 8001840 <u8x8_byte_hw_i2c+0x20>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001875 	.word	0x08001875
 8001844:	080018d5 	.word	0x080018d5
 8001848:	080018d5 	.word	0x080018d5
 800184c:	08001883 	.word	0x08001883
 8001850:	0800187b 	.word	0x0800187b
 8001854:	080018b3 	.word	0x080018b3
 8001858:	080018d5 	.word	0x080018d5
 800185c:	080018d5 	.word	0x080018d5
 8001860:	080018d5 	.word	0x080018d5
 8001864:	080018d5 	.word	0x080018d5
 8001868:	080018d5 	.word	0x080018d5
 800186c:	080018d5 	.word	0x080018d5
 8001870:	080018d9 	.word	0x080018d9
    {
    case U8X8_MSG_BYTE_INIT:
    {
        /* add your custom code to init i2c subsystem */
        MX_I2C1_Init(); //I2C初始化
 8001874:	f7ff fdc0 	bl	80013f8 <MX_I2C1_Init>
    }
    break;
 8001878:	e031      	b.n	80018de <u8x8_byte_hw_i2c+0xbe>

    case U8X8_MSG_BYTE_START_TRANSFER:
    {
        buf_idx = 0;
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <u8x8_byte_hw_i2c+0xc8>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8001880:	e02d      	b.n	80018de <u8x8_byte_hw_i2c+0xbe>

    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	617b      	str	r3, [r7, #20]

        while (arg_int > 0)
 8001886:	e010      	b.n	80018aa <u8x8_byte_hw_i2c+0x8a>
        {
            buffer[buf_idx++] = *data;
 8001888:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <u8x8_byte_hw_i2c+0xc8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	b2d1      	uxtb	r1, r2
 8001890:	4a15      	ldr	r2, [pc, #84]	@ (80018e8 <u8x8_byte_hw_i2c+0xc8>)
 8001892:	7011      	strb	r1, [r2, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	7819      	ldrb	r1, [r3, #0]
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <u8x8_byte_hw_i2c+0xcc>)
 800189c:	5499      	strb	r1, [r3, r2]
            data++;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
            arg_int--;
 80018a4:	7abb      	ldrb	r3, [r7, #10]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0)
 80018aa:	7abb      	ldrb	r3, [r7, #10]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1eb      	bne.n	8001888 <u8x8_byte_hw_i2c+0x68>
        }
    }
    break;
 80018b0:	e015      	b.n	80018de <u8x8_byte_hw_i2c+0xbe>

    case U8X8_MSG_BYTE_END_TRANSFER:
    {
        if (HAL_I2C_Master_Transmit(&hi2c1, (OLED_ADDRESS), buffer, buf_idx, 1000) != HAL_OK)
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <u8x8_byte_hw_i2c+0xc8>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	4613      	mov	r3, r2
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <u8x8_byte_hw_i2c+0xcc>)
 80018c2:	2178      	movs	r1, #120	@ 0x78
 80018c4:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <u8x8_byte_hw_i2c+0xd0>)
 80018c6:	f002 fddd 	bl	8004484 <HAL_I2C_Master_Transmit>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <u8x8_byte_hw_i2c+0xbc>
            return 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e005      	b.n	80018e0 <u8x8_byte_hw_i2c+0xc0>

    case U8X8_MSG_BYTE_SET_DC:
        break;

    default:
        return 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e003      	b.n	80018e0 <u8x8_byte_hw_i2c+0xc0>
        break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <u8x8_byte_hw_i2c+0xbe>
    break;
 80018dc:	bf00      	nop
    }

    return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200002f0 	.word	0x200002f0
 80018ec:	200002f4 	.word	0x200002f4
 80018f0:	200001f4 	.word	0x200001f4

080018f4 <delay_us>:

void delay_us(uint32_t time)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    uint32_t i = 8 * time;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	60fb      	str	r3, [r7, #12]
    while (i--);
 8001902:	bf00      	nop
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e5a      	subs	r2, r3, #1
 8001908:	60fa      	str	r2, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1fa      	bne.n	8001904 <delay_us+0x10>
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	72fb      	strb	r3, [r7, #11]
 800192a:	4613      	mov	r3, r2
 800192c:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	3b29      	subs	r3, #41	@ 0x29
 8001932:	2b2a      	cmp	r3, #42	@ 0x2a
 8001934:	f200 8085 	bhi.w	8001a42 <u8x8_gpio_and_delay+0x126>
 8001938:	a201      	add	r2, pc, #4	@ (adr r2, 8001940 <u8x8_gpio_and_delay+0x24>)
 800193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193e:	bf00      	nop
 8001940:	08001a09 	.word	0x08001a09
 8001944:	080019f1 	.word	0x080019f1
 8001948:	080019ed 	.word	0x080019ed
 800194c:	08001a43 	.word	0x08001a43
 8001950:	08001a13 	.word	0x08001a13
 8001954:	08001a43 	.word	0x08001a43
 8001958:	08001a43 	.word	0x08001a43
 800195c:	08001a43 	.word	0x08001a43
 8001960:	08001a43 	.word	0x08001a43
 8001964:	08001a43 	.word	0x08001a43
 8001968:	08001a43 	.word	0x08001a43
 800196c:	08001a43 	.word	0x08001a43
 8001970:	08001a43 	.word	0x08001a43
 8001974:	08001a43 	.word	0x08001a43
 8001978:	08001a43 	.word	0x08001a43
 800197c:	08001a43 	.word	0x08001a43
 8001980:	08001a43 	.word	0x08001a43
 8001984:	08001a43 	.word	0x08001a43
 8001988:	08001a43 	.word	0x08001a43
 800198c:	08001a43 	.word	0x08001a43
 8001990:	08001a43 	.word	0x08001a43
 8001994:	08001a43 	.word	0x08001a43
 8001998:	08001a43 	.word	0x08001a43
 800199c:	08001a43 	.word	0x08001a43
 80019a0:	08001a43 	.word	0x08001a43
 80019a4:	08001a43 	.word	0x08001a43
 80019a8:	08001a43 	.word	0x08001a43
 80019ac:	08001a43 	.word	0x08001a43
 80019b0:	08001a43 	.word	0x08001a43
 80019b4:	08001a43 	.word	0x08001a43
 80019b8:	08001a43 	.word	0x08001a43
 80019bc:	08001a43 	.word	0x08001a43
 80019c0:	08001a43 	.word	0x08001a43
 80019c4:	08001a43 	.word	0x08001a43
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a4d 	.word	0x08001a4d
 80019d0:	08001a4d 	.word	0x08001a4d
 80019d4:	08001a43 	.word	0x08001a43
 80019d8:	08001a43 	.word	0x08001a43
 80019dc:	08001a1b 	.word	0x08001a1b
 80019e0:	08001a25 	.word	0x08001a25
 80019e4:	08001a2f 	.word	0x08001a2f
 80019e8:	08001a39 	.word	0x08001a39
    {
    case U8X8_MSG_DELAY_100NANO: // delay arg_int * 100 nano seconds
        __NOP();
 80019ec:	bf00      	nop
        break;
 80019ee:	e02e      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
        for (uint16_t n = 0; n < 320; n++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	82fb      	strh	r3, [r7, #22]
 80019f4:	e003      	b.n	80019fe <u8x8_gpio_and_delay+0xe2>
        {
            __NOP();
 80019f6:	bf00      	nop
        for (uint16_t n = 0; n < 320; n++)
 80019f8:	8afb      	ldrh	r3, [r7, #22]
 80019fa:	3301      	adds	r3, #1
 80019fc:	82fb      	strh	r3, [r7, #22]
 80019fe:	8afb      	ldrh	r3, [r7, #22]
 8001a00:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a04:	d3f7      	bcc.n	80019f6 <u8x8_gpio_and_delay+0xda>
        }
        break;
 8001a06:	e022      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    case U8X8_MSG_DELAY_MILLI: // delay arg_int * 1 milli second
    	delay_us(1000);
 8001a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a0c:	f7ff ff72 	bl	80018f4 <delay_us>
    	//HAL_Delay(1);
        break;
 8001a10:	e01d      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    case U8X8_MSG_DELAY_I2C: // arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
        delay_us(5);
 8001a12:	2005      	movs	r0, #5
 8001a14:	f7ff ff6e 	bl	80018f4 <delay_us>
        break;                    // arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8001a18:	e019      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    case U8X8_MSG_GPIO_I2C_CLOCK: // arg_int=0: Output low at I2C clock pin
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
    case U8X8_MSG_GPIO_I2C_DATA:  // arg_int=0: Output low at I2C data pin
        break;                    // arg_int=1: Input dir with pullup high for I2C data pin
    case U8X8_MSG_GPIO_MENU_SELECT:
        u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        break;
 8001a22:	e014      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    case U8X8_MSG_GPIO_MENU_NEXT:
        u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        break;
 8001a2c:	e00f      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    case U8X8_MSG_GPIO_MENU_PREV:
        u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        break;
 8001a36:	e00a      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    case U8X8_MSG_GPIO_MENU_HOME:
        u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        break;
 8001a40:	e005      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
    default:
        u8x8_SetGPIOResult(u8x8, 1); // default return value
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        break;
 8001a4a:	e000      	b.n	8001a4e <u8x8_gpio_and_delay+0x132>
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
 8001a4c:	bf00      	nop
    }
    return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <u8g2Init>:
void u8g2Init(u8g2_t *u8g2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	// 初始化 u8g2
	u8g2_Setup_sh1106_i2c_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <u8g2Init+0x30>)
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <u8g2Init+0x34>)
 8001a64:	490a      	ldr	r1, [pc, #40]	@ (8001a90 <u8g2Init+0x38>)
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fb1e 	bl	80020a8 <u8g2_Setup_sh1106_i2c_128x64_noname_f>
	// 初始化後，會是關閉的狀態
	u8g2_InitDisplay(u8g2);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 ff53 	bl	8003918 <u8x8_InitDisplay>
	// 打開螢幕
	u8g2_SetPowerSave(u8g2, 0);
 8001a72:	2100      	movs	r1, #0
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f001 ff5e 	bl	8003936 <u8x8_SetPowerSave>
	u8g2_ClearBuffer(u8g2);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fa14 	bl	8001ea8 <u8g2_ClearBuffer>
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	0800191d 	.word	0x0800191d
 8001a8c:	08001821 	.word	0x08001821
 8001a90:	0800ff80 	.word	0x0800ff80

08001a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_MspInit+0x54>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <HAL_MspInit+0x54>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <HAL_MspInit+0x54>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_MspInit+0x54>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_MspInit+0x54>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_MspInit+0x54>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	f06f 0001 	mvn.w	r0, #1
 8001ada:	f002 f987 	bl	8003dec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	@ 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <HAL_InitTick+0xd4>)
 8001b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b04:	4a2e      	ldr	r2, [pc, #184]	@ (8001bc0 <HAL_InitTick+0xd4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_InitTick+0xd4>)
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b18:	f107 020c 	add.w	r2, r7, #12
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fd1a 	bl	800555c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b28:	f003 fd04 	bl	8005534 <HAL_RCC_GetPCLK2Freq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b34:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <HAL_InitTick+0xd8>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b42:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <HAL_InitTick+0xe0>)
 8001b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b66:	4818      	ldr	r0, [pc, #96]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b68:	f003 fd2a 	bl	80055c0 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11b      	bne.n	8001bb2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b7a:	4813      	ldr	r0, [pc, #76]	@ (8001bc8 <HAL_InitTick+0xdc>)
 8001b7c:	f003 fd70 	bl	8005660 <HAL_TIM_Base_Start_IT>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d111      	bne.n	8001bb2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b8e:	2019      	movs	r0, #25
 8001b90:	f002 f948 	bl	8003e24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	d808      	bhi.n	8001bac <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	2019      	movs	r0, #25
 8001ba0:	f002 f924 	bl	8003dec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_InitTick+0xe4>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e002      	b.n	8001bb2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3730      	adds	r7, #48	@ 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	20000374 	.word	0x20000374
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c12:	f003 fd95 	bl	8005740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000374 	.word	0x20000374

08001c20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return 1;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_kill>:

int _kill(int pid, int sig)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3a:	f008 fa0f 	bl	800a05c <__errno>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2216      	movs	r2, #22
 8001c42:	601a      	str	r2, [r3, #0]
  return -1;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_exit>:

void _exit (int status)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ffe7 	bl	8001c30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c62:	bf00      	nop
 8001c64:	e7fd      	b.n	8001c62 <_exit+0x12>

08001c66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e00a      	b.n	8001c8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c78:	f3af 8000 	nop.w
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbf0      	blt.n	8001c78 <_read+0x12>
  }

  return len;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e009      	b.n	8001cc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	60ba      	str	r2, [r7, #8]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbf1      	blt.n	8001cb2 <_write+0x12>
  }
  return len;
 8001cce:	687b      	ldr	r3, [r7, #4]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_close>:

int _close(int file)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d00:	605a      	str	r2, [r3, #4]
  return 0;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_isatty>:

int _isatty(int file)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f008 f974 	bl	800a05c <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20030000 	.word	0x20030000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	200003bc 	.word	0x200003bc
 8001da8:	200052f0 	.word	0x200052f0

08001dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <SystemInit+0x20>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <SystemInit+0x20>)
 8001db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001dee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001df6:	2253      	movs	r2, #83	@ 0x53
 8001df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001e02:	f04f 32ff 	mov.w	r2, #4294967295
 8001e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e14:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001e16:	f003 fbd3 	bl	80055c0 <HAL_TIM_Base_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e20:	f7ff fcf8 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001e32:	f003 fd75 	bl	8005920 <HAL_TIM_ConfigClockSource>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e3c:	f7ff fcea 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_TIM2_Init+0x94>)
 8001e4e:	f003 ff9d 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e58:	f7ff fcdc 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200003c0 	.word	0x200003c0

08001e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e78:	d10d      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x3c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	7c1b      	ldrb	r3, [r3, #16]
 8001eb6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f008 f86e 	bl	8009fb8 <memset>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	7c1b      	ldrb	r3, [r3, #16]
 8001efa:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f04:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	89ba      	ldrh	r2, [r7, #12]
 8001f0c:	fb12 f303 	smulbb	r3, r2, r3
 8001f10:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001f12:	89bb      	ldrh	r3, [r7, #12]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001f18:	89bb      	ldrh	r3, [r7, #12]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001f20:	7bf9      	ldrb	r1, [r7, #15]
 8001f22:	78ba      	ldrb	r2, [r7, #2]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f001 fcc2 	bl	80038b6 <u8x8_DrawTile>
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f4c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001f54:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	7c5b      	ldrb	r3, [r3, #17]
 8001f5c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001f5e:	7bba      	ldrb	r2, [r7, #14]
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ffbd 	bl	8001ee4 <u8g2_send_tile_row>
    src_row++;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	3301      	adds	r3, #1
 8001f74:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	7b7b      	ldrb	r3, [r7, #13]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d203      	bcs.n	8001f86 <u8g2_send_buffer+0x4c>
 8001f7e:	7bba      	ldrb	r2, [r7, #14]
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3eb      	bcc.n	8001f5e <u8g2_send_buffer+0x24>
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffcf 	bl	8001f3a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f001 fcdb 	bl	8003958 <u8x8_RefreshDisplay>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff5b 	bl	8001ea8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ffd8 	bl	8001faa <u8g2_SetBufferCurrTileRow>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff95 	bl	8001f3a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002016:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	4413      	add	r3, r2
 8002022:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	7c5b      	ldrb	r3, [r3, #17]
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	429a      	cmp	r2, r3
 800202e:	d304      	bcc.n	800203a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f001 fc91 	bl	8003958 <u8x8_RefreshDisplay>
    return 0;
 8002036:	2300      	movs	r3, #0
 8002038:	e00d      	b.n	8002056 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff2f 	bl	8001ea8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffab 	bl	8001faa <u8g2_SetBufferCurrTileRow>
  return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffb7 	bl	8001fda <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffc8 	bl	8002002 <u8g2_NextPage>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f9      	bne.n	800206c <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002078:	2100      	movs	r1, #0
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ff95 	bl	8001faa <u8g2_SetBufferCurrTileRow>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <u8g2_m_16_8_f>:
//  *page_cnt = 2;
//  return buf;
//  #endif
//}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2208      	movs	r2, #8
 8002094:	701a      	strb	r2, [r3, #0]
  return buf;
 8002096:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	20000408 	.word	0x20000408

080020a8 <u8g2_Setup_sh1106_i2c_128x64_noname_f>:
//  buf = u8g2_m_16_8_2(&tile_buf_height);
//  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
//}
///* sh1106 f */
void u8g2_Setup_sh1106_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0b      	ldr	r2, [pc, #44]	@ (80020ec <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x44>)
 80020be:	490c      	ldr	r1, [pc, #48]	@ (80020f0 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x48>)
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f001 fca9 	bl	8003a18 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80020c6:	f107 0313 	add.w	r3, r7, #19
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ffdc 	bl	8002088 <u8g2_m_16_8_f>
 80020d0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80020d2:	7cfa      	ldrb	r2, [r7, #19]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x4c>)
 80020da:	6979      	ldr	r1, [r7, #20]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 ffc4 	bl	800306a <u8g2_SetupBuffer>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	08003555 	.word	0x08003555
 80020f0:	080037b1 	.word	0x080037b1
 80020f4:	08002eed 	.word	0x08002eed

080020f8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	81fb      	strh	r3, [r7, #14]
    font++;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3301      	adds	r3, #1
 800213a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800213c:	89fb      	ldrh	r3, [r7, #14]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	4413      	add	r3, r2
 800214c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800214e:	89fb      	ldrh	r3, [r7, #14]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002166:	2100      	movs	r1, #0
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f7ff ffc5 	bl	80020f8 <u8g2_font_get_byte>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002176:	2101      	movs	r1, #1
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7ff ffbd 	bl	80020f8 <u8g2_font_get_byte>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002186:	2102      	movs	r1, #2
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f7ff ffb5 	bl	80020f8 <u8g2_font_get_byte>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002196:	2103      	movs	r1, #3
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f7ff ffad 	bl	80020f8 <u8g2_font_get_byte>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80021a6:	2104      	movs	r1, #4
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f7ff ffa5 	bl	80020f8 <u8g2_font_get_byte>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80021b6:	2105      	movs	r1, #5
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	f7ff ff9d 	bl	80020f8 <u8g2_font_get_byte>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80021c6:	2106      	movs	r1, #6
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f7ff ff95 	bl	80020f8 <u8g2_font_get_byte>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80021d6:	2107      	movs	r1, #7
 80021d8:	6838      	ldr	r0, [r7, #0]
 80021da:	f7ff ff8d 	bl	80020f8 <u8g2_font_get_byte>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80021e6:	2108      	movs	r1, #8
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f7ff ff85 	bl	80020f8 <u8g2_font_get_byte>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80021f6:	2109      	movs	r1, #9
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f7ff ff7d 	bl	80020f8 <u8g2_font_get_byte>
 80021fe:	4603      	mov	r3, r0
 8002200:	b25a      	sxtb	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002206:	210a      	movs	r1, #10
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f7ff ff75 	bl	80020f8 <u8g2_font_get_byte>
 800220e:	4603      	mov	r3, r0
 8002210:	b25a      	sxtb	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002216:	210b      	movs	r1, #11
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f7ff ff6d 	bl	80020f8 <u8g2_font_get_byte>
 800221e:	4603      	mov	r3, r0
 8002220:	b25a      	sxtb	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002226:	210c      	movs	r1, #12
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f7ff ff65 	bl	80020f8 <u8g2_font_get_byte>
 800222e:	4603      	mov	r3, r0
 8002230:	b25a      	sxtb	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002236:	210d      	movs	r1, #13
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f7ff ff5d 	bl	80020f8 <u8g2_font_get_byte>
 800223e:	4603      	mov	r3, r0
 8002240:	b25a      	sxtb	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002246:	210e      	movs	r1, #14
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	f7ff ff55 	bl	80020f8 <u8g2_font_get_byte>
 800224e:	4603      	mov	r3, r0
 8002250:	b25a      	sxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002256:	210f      	movs	r1, #15
 8002258:	6838      	ldr	r0, [r7, #0]
 800225a:	f7ff ff4d 	bl	80020f8 <u8g2_font_get_byte>
 800225e:	4603      	mov	r3, r0
 8002260:	b25a      	sxtb	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002266:	2110      	movs	r1, #16
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	f7ff ff45 	bl	80020f8 <u8g2_font_get_byte>
 800226e:	4603      	mov	r3, r0
 8002270:	b25a      	sxtb	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002276:	2111      	movs	r1, #17
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f7ff ff4f 	bl	800211c <u8g2_font_get_word>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002286:	2113      	movs	r1, #19
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	f7ff ff47 	bl	800211c <u8g2_font_get_word>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002296:	2115      	movs	r1, #21
 8002298:	6838      	ldr	r0, [r7, #0]
 800229a:	f7ff ff3f 	bl	800211c <u8g2_font_get_word>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	82da      	strh	r2, [r3, #22]
#endif
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7b1b      	ldrb	r3, [r3, #12]
 80022be:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	7b7b      	ldrb	r3, [r7, #13]
 80022cc:	fa42 f303 	asr.w	r3, r2, r3
 80022d0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80022d2:	7b7b      	ldrb	r3, [r7, #13]
 80022d4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80022d6:	7bba      	ldrb	r2, [r7, #14]
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	4413      	add	r3, r2
 80022dc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80022de:	7bbb      	ldrb	r3, [r7, #14]
 80022e0:	2b07      	cmp	r3, #7
 80022e2:	d91a      	bls.n	800231a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80022e4:	2308      	movs	r3, #8
 80022e6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80022e8:	7b3a      	ldrb	r2, [r7, #12]
 80022ea:	7b7b      	ldrb	r3, [r7, #13]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	7b3b      	ldrb	r3, [r7, #12]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	b25a      	sxtb	r2, r3
 800230a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230e:	4313      	orrs	r3, r2
 8002310:	b25b      	sxtb	r3, r3
 8002312:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	3b08      	subs	r3, #8
 8002318:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	b2da      	uxtb	r2, r3
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	4013      	ands	r3, r2
 800232e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7bba      	ldrb	r2, [r7, #14]
 8002334:	731a      	strb	r2, [r3, #12]
  return val;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffaa 	bl	80022ae <u8g2_font_decode_get_unsigned_bits>
 800235a:	4603      	mov	r3, r0
 800235c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	3b01      	subs	r3, #1
 8002366:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8002368:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	7bbb      	ldrb	r3, [r7, #14]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	73fb      	strb	r3, [r7, #15]
  return v;
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800238a:	b490      	push	{r4, r7}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4604      	mov	r4, r0
 8002392:	4608      	mov	r0, r1
 8002394:	4611      	mov	r1, r2
 8002396:	461a      	mov	r2, r3
 8002398:	4623      	mov	r3, r4
 800239a:	80fb      	strh	r3, [r7, #6]
 800239c:	4603      	mov	r3, r0
 800239e:	717b      	strb	r3, [r7, #5]
 80023a0:	460b      	mov	r3, r1
 80023a2:	713b      	strb	r3, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d014      	beq.n	80023d8 <u8g2_add_vector_y+0x4e>
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	dc19      	bgt.n	80023e6 <u8g2_add_vector_y+0x5c>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <u8g2_add_vector_y+0x32>
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d007      	beq.n	80023ca <u8g2_add_vector_y+0x40>
 80023ba:	e014      	b.n	80023e6 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80023bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	4413      	add	r3, r2
 80023c6:	80fb      	strh	r3, [r7, #6]
      break;
 80023c8:	e014      	b.n	80023f4 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80023ca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	4413      	add	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
      break;
 80023d6:	e00d      	b.n	80023f4 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80023d8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	88fa      	ldrh	r2, [r7, #6]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	80fb      	strh	r3, [r7, #6]
      break;
 80023e4:	e006      	b.n	80023f4 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80023e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	80fb      	strh	r3, [r7, #6]
      break;      
 80023f2:	bf00      	nop
  }
  return dy;
 80023f4:	88fb      	ldrh	r3, [r7, #6]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc90      	pop	{r4, r7}
 80023fe:	4770      	bx	lr

08002400 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002400:	b490      	push	{r4, r7}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4604      	mov	r4, r0
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4623      	mov	r3, r4
 8002410:	80fb      	strh	r3, [r7, #6]
 8002412:	4603      	mov	r3, r0
 8002414:	717b      	strb	r3, [r7, #5]
 8002416:	460b      	mov	r3, r1
 8002418:	713b      	strb	r3, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d014      	beq.n	800244e <u8g2_add_vector_x+0x4e>
 8002424:	2b02      	cmp	r3, #2
 8002426:	dc19      	bgt.n	800245c <u8g2_add_vector_x+0x5c>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <u8g2_add_vector_x+0x32>
 800242c:	2b01      	cmp	r3, #1
 800242e:	d007      	beq.n	8002440 <u8g2_add_vector_x+0x40>
 8002430:	e014      	b.n	800245c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8002432:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002436:	b29a      	uxth	r2, r3
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	4413      	add	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
      break;
 800243e:	e014      	b.n	800246a <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8002440:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002444:	b29b      	uxth	r3, r3
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	80fb      	strh	r3, [r7, #6]
      break;
 800244c:	e00d      	b.n	800246a <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800244e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002452:	b29b      	uxth	r3, r3
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	80fb      	strh	r3, [r7, #6]
      break;
 800245a:	e006      	b.n	800246a <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800245c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002460:	b29a      	uxth	r2, r3
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	4413      	add	r3, r2
 8002466:	80fb      	strh	r3, [r7, #6]
      break;      
 8002468:	bf00      	nop
  }
  return dx;
 800246a:	88fb      	ldrh	r3, [r7, #6]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bc90      	pop	{r4, r7}
 8002474:	4770      	bx	lr

08002476 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b088      	sub	sp, #32
 800247a:	af02      	add	r7, sp, #8
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
 8002482:	4613      	mov	r3, r2
 8002484:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3360      	adds	r3, #96	@ 0x60
 800248a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002496:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800249e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024a6:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	7d7b      	ldrb	r3, [r7, #21]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80024b4:	7dfa      	ldrb	r2, [r7, #23]
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d201      	bcs.n	80024c0 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	889b      	ldrh	r3, [r3, #4]
 80024c4:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	88db      	ldrh	r3, [r3, #6]
 80024ca:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80024cc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80024d0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	7c1b      	ldrb	r3, [r3, #16]
 80024d8:	89b8      	ldrh	r0, [r7, #12]
 80024da:	f7ff ff91 	bl	8002400 <u8g2_add_vector_x>
 80024de:	4603      	mov	r3, r0
 80024e0:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80024e2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80024e6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	7c1b      	ldrb	r3, [r3, #16]
 80024ee:	8978      	ldrh	r0, [r7, #10]
 80024f0:	f7ff ff4b 	bl	800238a <u8g2_add_vector_y>
 80024f4:	4603      	mov	r3, r0
 80024f6:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80024f8:	78bb      	ldrb	r3, [r7, #2]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	7b9a      	ldrb	r2, [r3, #14]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002508:	7dbb      	ldrb	r3, [r7, #22]
 800250a:	b298      	uxth	r0, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	7c1b      	ldrb	r3, [r3, #16]
 8002510:	897a      	ldrh	r2, [r7, #10]
 8002512:	89b9      	ldrh	r1, [r7, #12]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4603      	mov	r3, r0
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fbfe 	bl	8002d1a <u8g2_DrawHVLine>
 800251e:	e013      	b.n	8002548 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	7b5b      	ldrb	r3, [r3, #13]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10f      	bne.n	8002548 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	7bda      	ldrb	r2, [r3, #15]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002532:	7dbb      	ldrb	r3, [r7, #22]
 8002534:	b298      	uxth	r0, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	7c1b      	ldrb	r3, [r3, #16]
 800253a:	897a      	ldrh	r2, [r7, #10]
 800253c:	89b9      	ldrh	r1, [r7, #12]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	4603      	mov	r3, r0
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fbe9 	bl	8002d1a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002548:	7dfa      	ldrb	r2, [r7, #23]
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	429a      	cmp	r2, r3
 800254e:	d309      	bcc.n	8002564 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8002550:	7dfa      	ldrb	r2, [r7, #23]
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	757b      	strb	r3, [r7, #21]
    ly++;
 800255c:	7d3b      	ldrb	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8002562:	e79d      	b.n	80024a0 <u8g2_font_decode_len+0x2a>
      break;
 8002564:	bf00      	nop
  }
  lx += cnt;
 8002566:	7d7a      	ldrb	r2, [r7, #21]
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	4413      	add	r3, r2
 800256c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800256e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8002576:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	725a      	strb	r2, [r3, #9]
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3360      	adds	r3, #96	@ 0x60
 8002594:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80025a8:	4619      	mov	r1, r3
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7ff fe7f 	bl	80022ae <u8g2_font_decode_get_unsigned_bits>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b25a      	sxtb	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80025be:	4619      	mov	r1, r3
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff fe74 	bl	80022ae <u8g2_font_decode_get_unsigned_bits>
 80025c6:	4603      	mov	r3, r0
 80025c8:	b25a      	sxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	7b9b      	ldrb	r3, [r3, #14]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	73da      	strb	r2, [r3, #15]
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3360      	adds	r3, #96	@ 0x60
 8002602:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffbd 	bl	8002586 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8002612:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800261a:	4619      	mov	r1, r3
 800261c:	6978      	ldr	r0, [r7, #20]
 800261e:	f7ff fe91 	bl	8002344 <u8g2_font_decode_get_signed_bits>
 8002622:	4603      	mov	r3, r0
 8002624:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 800262c:	4619      	mov	r1, r3
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff fe88 	bl	8002344 <u8g2_font_decode_get_signed_bits>
 8002634:	4603      	mov	r3, r0
 8002636:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800263e:	4619      	mov	r1, r3
 8002640:	6978      	ldr	r0, [r7, #20]
 8002642:	f7ff fe7f 	bl	8002344 <u8g2_font_decode_get_signed_bits>
 8002646:	4603      	mov	r3, r0
 8002648:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f340 80d7 	ble.w	8002804 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	8898      	ldrh	r0, [r3, #4]
 800265a:	7cfa      	ldrb	r2, [r7, #19]
 800265c:	7c7b      	ldrb	r3, [r7, #17]
 800265e:	4413      	add	r3, r2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	425b      	negs	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	b25a      	sxtb	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	7c1b      	ldrb	r3, [r3, #16]
 800266c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002670:	f7ff fec6 	bl	8002400 <u8g2_add_vector_x>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	88d8      	ldrh	r0, [r3, #6]
 8002680:	7cfa      	ldrb	r2, [r7, #19]
 8002682:	7c7b      	ldrb	r3, [r7, #17]
 8002684:	4413      	add	r3, r2
 8002686:	b2db      	uxtb	r3, r3
 8002688:	425b      	negs	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	b25a      	sxtb	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	7c1b      	ldrb	r3, [r3, #16]
 8002692:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002696:	f7ff fe78 	bl	800238a <u8g2_add_vector_y>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	889b      	ldrh	r3, [r3, #4]
 80026a6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	88db      	ldrh	r3, [r3, #6]
 80026ac:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80026ae:	8bfb      	ldrh	r3, [r7, #30]
 80026b0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80026b2:	8b7b      	ldrh	r3, [r7, #26]
 80026b4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	7c1b      	ldrb	r3, [r3, #16]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d85a      	bhi.n	8002774 <u8g2_font_decode_glyph+0x180>
 80026be:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <u8g2_font_decode_glyph+0xd0>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	080026d5 	.word	0x080026d5
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	08002719 	.word	0x08002719
 80026d0:	0800274d 	.word	0x0800274d
      {
	case 0:
	    x1 += decode->glyph_width;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	8bbb      	ldrh	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80026e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	8b3b      	ldrh	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	833b      	strh	r3, [r7, #24]
	    break;
 80026ee:	e041      	b.n	8002774 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80026f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8bfa      	ldrh	r2, [r7, #30]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80026fc:	8bfb      	ldrh	r3, [r7, #30]
 80026fe:	3301      	adds	r3, #1
 8002700:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002702:	8bbb      	ldrh	r3, [r7, #28]
 8002704:	3301      	adds	r3, #1
 8002706:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800270e:	b29a      	uxth	r2, r3
 8002710:	8b3b      	ldrh	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	833b      	strh	r3, [r7, #24]
	    break;
 8002716:	e02d      	b.n	8002774 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800271e:	b29b      	uxth	r3, r3
 8002720:	8bfa      	ldrh	r2, [r7, #30]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002726:	8bfb      	ldrh	r3, [r7, #30]
 8002728:	3301      	adds	r3, #1
 800272a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800272c:	8bbb      	ldrh	r3, [r7, #28]
 800272e:	3301      	adds	r3, #1
 8002730:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8002732:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002736:	b29b      	uxth	r3, r3
 8002738:	8b7a      	ldrh	r2, [r7, #26]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800273e:	8b7b      	ldrh	r3, [r7, #26]
 8002740:	3301      	adds	r3, #1
 8002742:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002744:	8b3b      	ldrh	r3, [r7, #24]
 8002746:	3301      	adds	r3, #1
 8002748:	833b      	strh	r3, [r7, #24]
	    break;	  
 800274a:	e013      	b.n	8002774 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800274c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002750:	b29a      	uxth	r2, r3
 8002752:	8bbb      	ldrh	r3, [r7, #28]
 8002754:	4413      	add	r3, r2
 8002756:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800275e:	b29b      	uxth	r3, r3
 8002760:	8b7a      	ldrh	r2, [r7, #26]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002766:	8b7b      	ldrh	r3, [r7, #26]
 8002768:	3301      	adds	r3, #1
 800276a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800276c:	8b3b      	ldrh	r3, [r7, #24]
 800276e:	3301      	adds	r3, #1
 8002770:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002772:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002774:	8bb8      	ldrh	r0, [r7, #28]
 8002776:	8b7a      	ldrh	r2, [r7, #26]
 8002778:	8bf9      	ldrh	r1, [r7, #30]
 800277a:	8b3b      	ldrh	r3, [r7, #24]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4603      	mov	r3, r0
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fb88 	bl	8002e96 <u8g2_IsIntersection>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <u8g2_font_decode_glyph+0x19e>
	return d;
 800278c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002790:	e03a      	b.n	8002808 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2200      	movs	r2, #0
 800279c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80027a4:	4619      	mov	r1, r3
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff fd81 	bl	80022ae <u8g2_font_decode_get_unsigned_bits>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80027b6:	4619      	mov	r1, r3
 80027b8:	6978      	ldr	r0, [r7, #20]
 80027ba:	f7ff fd78 	bl	80022ae <u8g2_font_decode_get_unsigned_bits>
 80027be:	4603      	mov	r3, r0
 80027c0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fe54 	bl	8002476 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fe4e 	bl	8002476 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80027da:	2101      	movs	r1, #1
 80027dc:	6978      	ldr	r0, [r7, #20]
 80027de:	f7ff fd66 	bl	80022ae <u8g2_font_decode_get_unsigned_bits>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ec      	bne.n	80027c2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80027ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dd00      	ble.n	80027f8 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80027f6:	e7d2      	b.n	800279e <u8g2_font_decode_glyph+0x1aa>
	break;
 80027f8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	7b9a      	ldrb	r2, [r3, #14]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8002804:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3317      	adds	r3, #23
 8002826:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	2bff      	cmp	r3, #255	@ 0xff
 800282c:	d82a      	bhi.n	8002884 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	2b60      	cmp	r3, #96	@ 0x60
 8002832:	d907      	bls.n	8002844 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800283a:	461a      	mov	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	4413      	add	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e009      	b.n	8002858 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	2b40      	cmp	r3, #64	@ 0x40
 8002848:	d906      	bls.n	8002858 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8002850:	461a      	mov	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4413      	add	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04e      	beq.n	8002900 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	4293      	cmp	r3, r2
 800286c:	d102      	bne.n	8002874 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3302      	adds	r3, #2
 8002872:	e049      	b.n	8002908 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002882:	e7e9      	b.n	8002858 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800288a:	461a      	mov	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4413      	add	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002896:	2100      	movs	r1, #0
 8002898:	6938      	ldr	r0, [r7, #16]
 800289a:	f7ff fc3f 	bl	800211c <u8g2_font_get_word>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80028a8:	2102      	movs	r1, #2
 80028aa:	6938      	ldr	r0, [r7, #16]
 80028ac:	f7ff fc36 	bl	800211c <u8g2_font_get_word>
 80028b0:	4603      	mov	r3, r0
 80028b2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	3304      	adds	r3, #4
 80028b8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80028ba:	89fa      	ldrh	r2, [r7, #14]
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3e9      	bcc.n	8002896 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80028c8:	89fb      	ldrh	r3, [r7, #14]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	89fb      	ldrh	r3, [r7, #14]
 80028d8:	4313      	orrs	r3, r2
 80028da:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80028dc:	89fb      	ldrh	r3, [r7, #14]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d010      	beq.n	8002904 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80028e2:	89fa      	ldrh	r2, [r7, #14]
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d102      	bne.n	80028f0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3303      	adds	r3, #3
 80028ee:	e00b      	b.n	8002908 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3302      	adds	r3, #2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4413      	add	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80028fe:	e7e0      	b.n	80028c2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002900:	bf00      	nop
 8002902:	e000      	b.n	8002906 <u8g2_font_get_glyph_data+0xf6>
	break;
 8002904:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	4608      	mov	r0, r1
 800291a:	4611      	mov	r1, r2
 800291c:	461a      	mov	r2, r3
 800291e:	4603      	mov	r3, r0
 8002920:	817b      	strh	r3, [r7, #10]
 8002922:	460b      	mov	r3, r1
 8002924:	813b      	strh	r3, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	897a      	ldrh	r2, [r7, #10]
 8002932:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	893a      	ldrh	r2, [r7, #8]
 800293a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4619      	mov	r1, r3
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff ff64 	bl	8002810 <u8g2_font_get_glyph_data>
 8002948:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002950:	6939      	ldr	r1, [r7, #16]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff fe4e 	bl	80025f4 <u8g2_font_decode_glyph>
 8002958:	4603      	mov	r3, r0
 800295a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800295c:	8afb      	ldrh	r3, [r7, #22]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4603      	mov	r3, r0
 8002978:	817b      	strh	r3, [r7, #10]
 800297a:	460b      	mov	r3, r1
 800297c:	813b      	strh	r3, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002988:	2b03      	cmp	r3, #3
 800298a:	d833      	bhi.n	80029f4 <u8g2_DrawGlyph+0x8c>
 800298c:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <u8g2_DrawGlyph+0x2c>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029b9 	.word	0x080029b9
 800299c:	080029cd 	.word	0x080029cd
 80029a0:	080029e1 	.word	0x080029e1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	4798      	blx	r3
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	893b      	ldrh	r3, [r7, #8]
 80029b2:	4413      	add	r3, r2
 80029b4:	813b      	strh	r3, [r7, #8]
      break;
 80029b6:	e01d      	b.n	80029f4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	4798      	blx	r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	897b      	ldrh	r3, [r7, #10]
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	817b      	strh	r3, [r7, #10]
      break;
 80029ca:	e013      	b.n	80029f4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	4798      	blx	r3
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	893b      	ldrh	r3, [r7, #8]
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	813b      	strh	r3, [r7, #8]
      break;
 80029de:	e009      	b.n	80029f4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	4798      	blx	r3
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	897b      	ldrh	r3, [r7, #10]
 80029ee:	4413      	add	r3, r2
 80029f0:	817b      	strh	r3, [r7, #10]
      break;
 80029f2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	893a      	ldrh	r2, [r7, #8]
 80029f8:	8979      	ldrh	r1, [r7, #10]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff ff88 	bl	8002910 <u8g2_font_draw_glyph>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop

08002a0c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fc69 	bl	80032f6 <u8x8_utf8_init>
  sum = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	4611      	mov	r1, r2
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	4798      	blx	r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002a3a:	8abb      	ldrh	r3, [r7, #20]
 8002a3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d038      	beq.n	8002ab6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3301      	adds	r3, #1
 8002a48:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002a4a:	8abb      	ldrh	r3, [r7, #20]
 8002a4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d0e9      	beq.n	8002a28 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002a54:	8abb      	ldrh	r3, [r7, #20]
 8002a56:	893a      	ldrh	r2, [r7, #8]
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff ff84 	bl	8002968 <u8g2_DrawGlyph>
 8002a60:	4603      	mov	r3, r0
 8002a62:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d81e      	bhi.n	8002aac <u8g2_draw_string+0xa0>
 8002a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <u8g2_draw_string+0x68>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a8f 	.word	0x08002a8f
 8002a7c:	08002a99 	.word	0x08002a99
 8002a80:	08002aa3 	.word	0x08002aa3
      {
	case 0:
	  x += delta;
 8002a84:	897a      	ldrh	r2, [r7, #10]
 8002a86:	8a7b      	ldrh	r3, [r7, #18]
 8002a88:	4413      	add	r3, r2
 8002a8a:	817b      	strh	r3, [r7, #10]
	  break;
 8002a8c:	e00e      	b.n	8002aac <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002a8e:	893a      	ldrh	r2, [r7, #8]
 8002a90:	8a7b      	ldrh	r3, [r7, #18]
 8002a92:	4413      	add	r3, r2
 8002a94:	813b      	strh	r3, [r7, #8]
	  break;
 8002a96:	e009      	b.n	8002aac <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002a98:	897a      	ldrh	r2, [r7, #10]
 8002a9a:	8a7b      	ldrh	r3, [r7, #18]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	817b      	strh	r3, [r7, #10]
	  break;
 8002aa0:	e004      	b.n	8002aac <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002aa2:	893a      	ldrh	r2, [r7, #8]
 8002aa4:	8a7b      	ldrh	r3, [r7, #18]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	813b      	strh	r3, [r7, #8]
	  break;
 8002aaa:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002aac:	8afa      	ldrh	r2, [r7, #22]
 8002aae:	8a7b      	ldrh	r3, [r7, #18]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002ab4:	e7b8      	b.n	8002a28 <u8g2_draw_string+0x1c>
      break;
 8002ab6:	bf00      	nop
    }
  }
  return sum;
 8002ab8:	8afb      	ldrh	r3, [r7, #22]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop

08002ac4 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <u8g2_DrawStr+0x30>)
 8002ada:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002adc:	893a      	ldrh	r2, [r7, #8]
 8002ade:	8979      	ldrh	r1, [r7, #10]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ff92 	bl	8002a0c <u8g2_draw_string>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	08003313 	.word	0x08003313

08002af8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05d      	beq.n	8002bc4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d04d      	beq.n	8002bc6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d11c      	bne.n	8002b6e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002b40:	429a      	cmp	r2, r3
 8002b42:	da05      	bge.n	8002b50 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dd32      	ble.n	8002bc6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002b6c:	e02b      	b.n	8002bc6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002b74:	461a      	mov	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002b84:	440b      	add	r3, r1
 8002b86:	429a      	cmp	r2, r3
 8002b88:	da0d      	bge.n	8002ba6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	b25a      	sxtb	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	dd07      	ble.n	8002bc6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002bc2:	e000      	b.n	8002bc6 <u8g2_UpdateRefHeight+0xce>
    return;
 8002bc4:	bf00      	nop
  }  
}
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <u8g2_SetFontPosBaseline+0x1c>)
 8002bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	08002bd1 	.word	0x08002bd1

08002c08 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d00b      	beq.n	8002c34 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3374      	adds	r3, #116	@ 0x74
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fa97 	bl	800215c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff62 	bl	8002af8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	80fb      	strh	r3, [r7, #6]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002c58:	8afb      	ldrh	r3, [r7, #22]
 8002c5a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	8abb      	ldrh	r3, [r7, #20]
 8002c62:	4413      	add	r3, r2
 8002c64:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002c66:	8afa      	ldrh	r2, [r7, #22]
 8002c68:	8abb      	ldrh	r3, [r7, #20]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d90b      	bls.n	8002c86 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002c6e:	8afa      	ldrh	r2, [r7, #22]
 8002c70:	88bb      	ldrh	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d205      	bcs.n	8002c82 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002c76:	88bb      	ldrh	r3, [r7, #4]
 8002c78:	82bb      	strh	r3, [r7, #20]
      b--;
 8002c7a:	8abb      	ldrh	r3, [r7, #20]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	82bb      	strh	r3, [r7, #20]
 8002c80:	e001      	b.n	8002c86 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002c86:	8afa      	ldrh	r2, [r7, #22]
 8002c88:	88bb      	ldrh	r3, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d301      	bcc.n	8002c92 <u8g2_clip_intersection2+0x56>
    return 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e01c      	b.n	8002ccc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002c92:	8aba      	ldrh	r2, [r7, #20]
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d801      	bhi.n	8002c9e <u8g2_clip_intersection2+0x62>
    return 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e016      	b.n	8002ccc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002c9e:	8afa      	ldrh	r2, [r7, #22]
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d201      	bcs.n	8002caa <u8g2_clip_intersection2+0x6e>
    a = c;
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002caa:	8aba      	ldrh	r2, [r7, #20]
 8002cac:	88bb      	ldrh	r3, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d901      	bls.n	8002cb6 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002cb2:	88bb      	ldrh	r3, [r7, #4]
 8002cb4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8afa      	ldrh	r2, [r7, #22]
 8002cba:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002cbc:	8aba      	ldrh	r2, [r7, #20]
 8002cbe:	8afb      	ldrh	r3, [r7, #22]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	8aba      	ldrh	r2, [r7, #20]
 8002cc8:	801a      	strh	r2, [r3, #0]
  return 1;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	460b      	mov	r3, r1
 8002cec:	813b      	strh	r3, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf6:	893a      	ldrh	r2, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002d00:	88f8      	ldrh	r0, [r7, #6]
 8002d02:	893a      	ldrh	r2, [r7, #8]
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	47a0      	blx	r4
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}

08002d1a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d1a:	b590      	push	{r4, r7, lr}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	4608      	mov	r0, r1
 8002d24:	4611      	mov	r1, r2
 8002d26:	461a      	mov	r2, r3
 8002d28:	4603      	mov	r3, r0
 8002d2a:	817b      	strh	r3, [r7, #10]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	813b      	strh	r3, [r7, #8]
 8002d30:	4613      	mov	r3, r2
 8002d32:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d075      	beq.n	8002e2a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d072      	beq.n	8002e2a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d91a      	bls.n	8002d80 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d109      	bne.n	8002d66 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002d52:	897a      	ldrh	r2, [r7, #10]
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	817b      	strh	r3, [r7, #10]
	  x++;
 8002d5c:	897b      	ldrh	r3, [r7, #10]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	817b      	strh	r3, [r7, #10]
 8002d64:	e00c      	b.n	8002d80 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002d66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d108      	bne.n	8002d80 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002d6e:	893a      	ldrh	r2, [r7, #8]
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	813b      	strh	r3, [r7, #8]
	  y++;
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002d80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002d8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11a      	bne.n	8002dca <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002d9a:	893b      	ldrh	r3, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d83b      	bhi.n	8002e18 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d937      	bls.n	8002e1c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002db8:	1db9      	adds	r1, r7, #6
 8002dba:	f107 000a 	add.w	r0, r7, #10
 8002dbe:	f7ff ff3d 	bl	8002c3c <u8g2_clip_intersection2>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11a      	bne.n	8002dfe <u8g2_DrawHVLine+0xe4>
	  return;
 8002dc8:	e02f      	b.n	8002e2a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d824      	bhi.n	8002e20 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002ddc:	897b      	ldrh	r3, [r7, #10]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d920      	bls.n	8002e24 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002dee:	1db9      	adds	r1, r7, #6
 8002df0:	f107 0008 	add.w	r0, r7, #8
 8002df4:	f7ff ff22 	bl	8002c3c <u8g2_clip_intersection2>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d014      	beq.n	8002e28 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	689c      	ldr	r4, [r3, #8]
 8002e04:	8979      	ldrh	r1, [r7, #10]
 8002e06:	893a      	ldrh	r2, [r7, #8]
 8002e08:	88f8      	ldrh	r0, [r7, #6]
 8002e0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4603      	mov	r3, r0
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	47a0      	blx	r4
 8002e16:	e008      	b.n	8002e2a <u8g2_DrawHVLine+0x110>
	  return;
 8002e18:	bf00      	nop
 8002e1a:	e006      	b.n	8002e2a <u8g2_DrawHVLine+0x110>
	  return;
 8002e1c:	bf00      	nop
 8002e1e:	e004      	b.n	8002e2a <u8g2_DrawHVLine+0x110>
	  return;
 8002e20:	bf00      	nop
 8002e22:	e002      	b.n	8002e2a <u8g2_DrawHVLine+0x110>
	  return;
 8002e24:	bf00      	nop
 8002e26:	e000      	b.n	8002e2a <u8g2_DrawHVLine+0x110>
	  return;
 8002e28:	bf00      	nop
    }
}
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}

08002e30 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002e30:	b490      	push	{r4, r7}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4623      	mov	r3, r4
 8002e40:	80fb      	strh	r3, [r7, #6]
 8002e42:	4603      	mov	r3, r0
 8002e44:	80bb      	strh	r3, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	807b      	strh	r3, [r7, #2]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	88bb      	ldrh	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d20d      	bcs.n	8002e72 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002e56:	883a      	ldrh	r2, [r7, #0]
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d901      	bls.n	8002e62 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e014      	b.n	8002e8c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	883b      	ldrh	r3, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d901      	bls.n	8002e6e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e00c      	b.n	8002e8c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002e72:	883a      	ldrh	r2, [r7, #0]
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d907      	bls.n	8002e8a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	883b      	ldrh	r3, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d901      	bls.n	8002e86 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e002      	b.n	8002e8c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002e8a:	2300      	movs	r3, #0
    }
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc90      	pop	{r4, r7}
 8002e94:	4770      	bx	lr

08002e96 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	4608      	mov	r0, r1
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	817b      	strh	r3, [r7, #10]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	813b      	strh	r3, [r7, #8]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002ebc:	8b3b      	ldrh	r3, [r7, #24]
 8002ebe:	893a      	ldrh	r2, [r7, #8]
 8002ec0:	f7ff ffb6 	bl	8002e30 <u8g2_is_intersection_decision_tree>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <u8g2_IsIntersection+0x38>
    return 0; 
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e00a      	b.n	8002ee4 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	897a      	ldrh	r2, [r7, #10]
 8002ede:	f7ff ffa7 	bl	8002e30 <u8g2_is_intersection_decision_tree>
 8002ee2:	4603      	mov	r3, r0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	@ 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	817b      	strh	r3, [r7, #10]
 8002efe:	460b      	mov	r3, r1
 8002f00:	813b      	strh	r3, [r7, #8]
 8002f02:	4613      	mov	r3, r2
 8002f04:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002f06:	893b      	ldrh	r3, [r7, #8]
 8002f08:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002f0a:	7efb      	ldrb	r3, [r7, #27]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002f16:	7e3a      	ldrb	r2, [r7, #24]
 8002f18:	7efb      	ldrb	r3, [r7, #27]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d801      	bhi.n	8002f36 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002f32:	7e3b      	ldrb	r3, [r7, #24]
 8002f34:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002f40:	7e3b      	ldrb	r3, [r7, #24]
 8002f42:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002f44:	893b      	ldrh	r3, [r7, #8]
 8002f46:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002f48:	8afb      	ldrh	r3, [r7, #22]
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	7c1b      	ldrb	r3, [r3, #16]
 8002f56:	461a      	mov	r2, r3
 8002f58:	8afb      	ldrh	r3, [r7, #22]
 8002f5a:	fb13 f302 	smulbb	r3, r3, r2
 8002f5e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f64:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002f76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d117      	bne.n	8002fae <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	7ebb      	ldrb	r3, [r7, #26]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	7e7b      	ldrb	r3, [r7, #25]
 8002f92:	4053      	eors	r3, r2
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
	len--;
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e8      	bne.n	8002f7e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002fac:	e038      	b.n	8003020 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	7ebb      	ldrb	r3, [r7, #26]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	7e7b      	ldrb	r3, [r7, #25]
 8002fc2:	4053      	eors	r3, r2
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002fca:	7efb      	ldrb	r3, [r7, #27]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002fd0:	7efb      	ldrb	r3, [r7, #27]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	76fb      	strb	r3, [r7, #27]
      len--;
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002fde:	7efb      	ldrb	r3, [r7, #27]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d114      	bne.n	800300e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002fe8:	461a      	mov	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d801      	bhi.n	8002ffe <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003004:	2b01      	cmp	r3, #1
 8003006:	d008      	beq.n	800301a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003008:	2301      	movs	r3, #1
 800300a:	767b      	strb	r3, [r7, #25]
 800300c:	e005      	b.n	800301a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800300e:	7ebb      	ldrb	r3, [r7, #26]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003014:	7e7b      	ldrb	r3, [r7, #25]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1c6      	bne.n	8002fae <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003020:	bf00      	nop
 8003022:	3724      	adds	r7, #36	@ 0x24
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800304a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003054:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff ffa9 	bl	800302c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff fd84 	bl	8002be8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003104:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003106:	89fb      	ldrh	r3, [r7, #14]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	89fa      	ldrh	r2, [r7, #14]
 8003110:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	7c1b      	ldrb	r3, [r3, #16]
 8003116:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003118:	89fb      	ldrh	r3, [r7, #14]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	89fa      	ldrh	r2, [r7, #14]
 8003122:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800312a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800312c:	89fb      	ldrh	r3, [r7, #14]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	89fa      	ldrh	r2, [r7, #14]
 8003136:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800313e:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8003148:	4413      	add	r3, r2
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	7c52      	ldrb	r2, [r2, #17]
 800314e:	4293      	cmp	r3, r2
 8003150:	dd07      	ble.n	8003162 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	7c5b      	ldrb	r3, [r3, #17]
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8003184:	89fb      	ldrh	r3, [r7, #14]
 8003186:	4413      	add	r3, r2
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	8a9a      	ldrh	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	8ada      	ldrh	r2, [r3, #22]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4603      	mov	r3, r0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fe5e 	bl	8002e96 <u8g2_IsIntersection>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80031e8:	e03b      	b.n	8003262 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031fe:	429a      	cmp	r2, r3
 8003200:	d205      	bcs.n	800320e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800321a:	429a      	cmp	r2, r3
 800321c:	d905      	bls.n	800322a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003236:	429a      	cmp	r2, r3
 8003238:	d205      	bcs.n	8003246 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003252:	429a      	cmp	r2, r3
 8003254:	d905      	bls.n	8003262 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff3c 	bl	80030f0 <u8g2_update_dimension_common>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff7b 	bl	80031b0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af02      	add	r7, sp, #8
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	4608      	mov	r0, r1
 80032cc:	4611      	mov	r1, r2
 80032ce:	461a      	mov	r2, r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	817b      	strh	r3, [r7, #10]
 80032d4:	460b      	mov	r3, r1
 80032d6:	813b      	strh	r3, [r7, #8]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80032dc:	88f8      	ldrh	r0, [r7, #6]
 80032de:	893a      	ldrh	r2, [r7, #8]
 80032e0:	8979      	ldrh	r1, [r7, #10]
 80032e2:	7e3b      	ldrb	r3, [r7, #24]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4603      	mov	r3, r0
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff fcf5 	bl	8002cd8 <u8g2_draw_hv_line_2dir>
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <u8x8_ascii_next+0x18>
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	2b0a      	cmp	r3, #10
 8003328:	d102      	bne.n	8003330 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800332a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800332e:	e001      	b.n	8003334 <u8x8_ascii_next+0x22>
  return b;
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	b29b      	uxth	r3, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	460b      	mov	r3, r1
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691c      	ldr	r4, [r3, #16]
 8003352:	7afa      	ldrb	r2, [r7, #11]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2117      	movs	r1, #23
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	47a0      	blx	r4
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}

08003366 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003372:	1cfb      	adds	r3, r7, #3
 8003374:	461a      	mov	r2, r3
 8003376:	2101      	movs	r1, #1
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ffe1 	bl	8003340 <u8x8_byte_SendBytes>
 800337e:	4603      	mov	r3, r0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691c      	ldr	r4, [r3, #16]
 8003394:	2300      	movs	r3, #0
 8003396:	2200      	movs	r2, #0
 8003398:	2118      	movs	r1, #24
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	47a0      	blx	r4
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd90      	pop	{r4, r7, pc}

080033a8 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691c      	ldr	r4, [r3, #16]
 80033b4:	2300      	movs	r3, #0
 80033b6:	2200      	movs	r2, #0
 80033b8:	2119      	movs	r1, #25
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	47a0      	blx	r4
 80033be:	4603      	mov	r3, r0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd90      	pop	{r4, r7, pc}

080033c8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68dc      	ldr	r4, [r3, #12]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	2300      	movs	r3, #0
 80033dc:	2115      	movs	r1, #21
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	47a0      	blx	r4
 80033e2:	4603      	mov	r3, r0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68dc      	ldr	r4, [r3, #12]
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	2300      	movs	r3, #0
 8003400:	2116      	movs	r1, #22
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	47a0      	blx	r4
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bd90      	pop	{r4, r7, pc}

08003410 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	460b      	mov	r3, r1
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68dc      	ldr	r4, [r3, #12]
 8003422:	7afa      	ldrb	r2, [r7, #11]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2117      	movs	r1, #23
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	47a0      	blx	r4
 800342c:	4603      	mov	r3, r0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}

08003436 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003436:	b590      	push	{r4, r7, lr}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68dc      	ldr	r4, [r3, #12]
 8003442:	2300      	movs	r3, #0
 8003444:	2200      	movs	r2, #0
 8003446:	2118      	movs	r1, #24
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	47a0      	blx	r4
 800344c:	4603      	mov	r3, r0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bd90      	pop	{r4, r7, pc}

08003456 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003456:	b590      	push	{r4, r7, lr}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68dc      	ldr	r4, [r3, #12]
 8003462:	2300      	movs	r3, #0
 8003464:	2200      	movs	r2, #0
 8003466:	2119      	movs	r1, #25
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	47a0      	blx	r4
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}

08003476 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	73fb      	strb	r3, [r7, #15]
    data++;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003490:	d031      	beq.n	80034f6 <u8x8_cad_SendSequence+0x80>
 8003492:	2bfe      	cmp	r3, #254	@ 0xfe
 8003494:	dc3d      	bgt.n	8003512 <u8x8_cad_SendSequence+0x9c>
 8003496:	2b19      	cmp	r3, #25
 8003498:	dc3b      	bgt.n	8003512 <u8x8_cad_SendSequence+0x9c>
 800349a:	2b18      	cmp	r3, #24
 800349c:	da23      	bge.n	80034e6 <u8x8_cad_SendSequence+0x70>
 800349e:	2b16      	cmp	r3, #22
 80034a0:	dc02      	bgt.n	80034a8 <u8x8_cad_SendSequence+0x32>
 80034a2:	2b15      	cmp	r3, #21
 80034a4:	da03      	bge.n	80034ae <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80034a6:	e034      	b.n	8003512 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80034a8:	2b17      	cmp	r3, #23
 80034aa:	d00e      	beq.n	80034ca <u8x8_cad_SendSequence+0x54>
	return;
 80034ac:	e031      	b.n	8003512 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68dc      	ldr	r4, [r3, #12]
 80034b8:	7bba      	ldrb	r2, [r7, #14]
 80034ba:	7bf9      	ldrb	r1, [r7, #15]
 80034bc:	2300      	movs	r3, #0
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	47a0      	blx	r4
	  data++;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	603b      	str	r3, [r7, #0]
	  break;
 80034c8:	e022      	b.n	8003510 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80034d0:	f107 030e 	add.w	r3, r7, #14
 80034d4:	461a      	mov	r2, r3
 80034d6:	2101      	movs	r1, #1
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff99 	bl	8003410 <u8x8_cad_SendData>
	  data++;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	603b      	str	r3, [r7, #0]
	  break;
 80034e4:	e014      	b.n	8003510 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68dc      	ldr	r4, [r3, #12]
 80034ea:	7bf9      	ldrb	r1, [r7, #15]
 80034ec:	2300      	movs	r3, #0
 80034ee:	2200      	movs	r2, #0
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	47a0      	blx	r4
	  break;
 80034f4:	e00c      	b.n	8003510 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	461a      	mov	r2, r3
 8003500:	2129      	movs	r1, #41	@ 0x29
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa37 	bl	8003976 <u8x8_gpio_call>
	  data++;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	603b      	str	r3, [r7, #0]
	  break;
 800350e:	bf00      	nop
    cmd = *data;
 8003510:	e7b6      	b.n	8003480 <u8x8_cad_SendSequence+0xa>
	return;
 8003512:	bf00      	nop
    }
  }
}
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800351a:	b590      	push	{r4, r7, lr}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	460b      	mov	r3, r1
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff ff2d 	bl	8003388 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800352e:	2140      	movs	r1, #64	@ 0x40
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff ff18 	bl	8003366 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691c      	ldr	r4, [r3, #16]
 800353a:	7afa      	ldrb	r2, [r7, #11]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2117      	movs	r1, #23
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff ff2f 	bl	80033a8 <u8x8_byte_EndTransfer>
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bd90      	pop	{r4, r7, pc}
	...

08003554 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	72fb      	strb	r3, [r7, #11]
 8003562:	4613      	mov	r3, r2
 8003564:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	3b14      	subs	r3, #20
 800356a:	2b05      	cmp	r3, #5
 800356c:	d86e      	bhi.n	800364c <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	0800360b 	.word	0x0800360b
 8003578:	0800358d 	.word	0x0800358d
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035c7 	.word	0x080035c7
 8003584:	0800362f 	.word	0x0800362f
 8003588:	08003637 	.word	0x08003637
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800358c:	4b33      	ldr	r3, [pc, #204]	@ (800365c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff ff07 	bl	80033a8 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff fef4 	bl	8003388 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 80035a0:	2100      	movs	r1, #0
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff fedf 	bl	8003366 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80035a8:	7abb      	ldrb	r3, [r7, #10]
 80035aa:	4619      	mov	r1, r3
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff feda 	bl	8003366 <u8x8_byte_SendByte>
      in_transfer = 1;
 80035b2:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80035b8:	e04a      	b.n	8003650 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80035ba:	7abb      	ldrb	r3, [r7, #10]
 80035bc:	4619      	mov	r1, r3
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff fed1 	bl	8003366 <u8x8_byte_SendByte>
      break;      
 80035c4:	e044      	b.n	8003650 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80035c6:	4b25      	ldr	r3, [pc, #148]	@ (800365c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff feea 	bl	80033a8 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80035d8:	e00a      	b.n	80035f0 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	2118      	movs	r1, #24
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff ff9b 	bl	800351a <u8x8_i2c_data_transfer>
	arg_int-=24;
 80035e4:	7abb      	ldrb	r3, [r7, #10]
 80035e6:	3b18      	subs	r3, #24
 80035e8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3318      	adds	r3, #24
 80035ee:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80035f0:	7abb      	ldrb	r3, [r7, #10]
 80035f2:	2b18      	cmp	r3, #24
 80035f4:	d8f1      	bhi.n	80035da <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80035f6:	7abb      	ldrb	r3, [r7, #10]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4619      	mov	r1, r3
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff ff8c 	bl	800351a <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8003602:	4b16      	ldr	r3, [pc, #88]	@ (800365c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
      break;
 8003608:	e022      	b.n	8003650 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003610:	2bff      	cmp	r3, #255	@ 0xff
 8003612:	d103      	bne.n	800361c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2278      	movs	r2, #120	@ 0x78
 8003618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691c      	ldr	r4, [r3, #16]
 8003620:	7aba      	ldrb	r2, [r7, #10]
 8003622:	7af9      	ldrb	r1, [r7, #11]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	47a0      	blx	r4
 800362a:	4603      	mov	r3, r0
 800362c:	e011      	b.n	8003652 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800362e:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
      break;
 8003634:	e00c      	b.n	8003650 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8003636:	4b09      	ldr	r3, [pc, #36]	@ (800365c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff feb2 	bl	80033a8 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	e001      	b.n	8003650 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8003650:	2301      	movs	r3, #1
}
 8003652:	4618      	mov	r0, r3
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	20000808 	.word	0x20000808

08003660 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	72fb      	strb	r3, [r7, #11]
 800366e:	4613      	mov	r3, r2
 8003670:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8003672:	7afb      	ldrb	r3, [r7, #11]
 8003674:	3b0b      	subs	r3, #11
 8003676:	2b04      	cmp	r3, #4
 8003678:	f200 808a 	bhi.w	8003790 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800367c:	a201      	add	r2, pc, #4	@ (adr r2, 8003684 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003699 	.word	0x08003699
 8003688:	08003791 	.word	0x08003791
 800368c:	080036b3 	.word	0x080036b3
 8003690:	080036e5 	.word	0x080036e5
 8003694:	08003705 	.word	0x08003705
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003698:	7abb      	ldrb	r3, [r7, #10]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800369e:	4940      	ldr	r1, [pc, #256]	@ (80037a0 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff fee8 	bl	8003476 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80036a6:	e075      	b.n	8003794 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80036a8:	493e      	ldr	r1, [pc, #248]	@ (80037a4 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff fee3 	bl	8003476 <u8x8_cad_SendSequence>
      break;
 80036b0:	e070      	b.n	8003794 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80036b2:	7abb      	ldrb	r3, [r7, #10]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80036b8:	493b      	ldr	r1, [pc, #236]	@ (80037a8 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff fedb 	bl	8003476 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	7c9a      	ldrb	r2, [r3, #18]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80036cc:	e062      	b.n	8003794 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80036ce:	4937      	ldr	r1, [pc, #220]	@ (80037ac <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fed0 	bl	8003476 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	7cda      	ldrb	r2, [r3, #19]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 80036e2:	e057      	b.n	8003794 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fea6 	bl	8003436 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80036ea:	2181      	movs	r1, #129	@ 0x81
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff fe6b 	bl	80033c8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80036f2:	7abb      	ldrb	r3, [r7, #10]
 80036f4:	4619      	mov	r1, r3
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7ff fe78 	bl	80033ec <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff feaa 	bl	8003456 <u8x8_cad_EndTransfer>
      break;
 8003702:	e047      	b.n	8003794 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff fe96 	bl	8003436 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	795b      	ldrb	r3, [r3, #5]
 800370e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	4413      	add	r3, r2
 8003720:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8003722:	2140      	movs	r1, #64	@ 0x40
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fe4f 	bl	80033c8 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0310 	orr.w	r3, r3, #16
 8003734:	b2db      	uxtb	r3, r3
 8003736:	4619      	mov	r1, r3
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fe45 	bl	80033c8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fe4f 	bl	80033ec <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	799b      	ldrb	r3, [r3, #6]
 8003752:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff fe46 	bl	80033ec <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	791b      	ldrb	r3, [r3, #4]
 8003764:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800376c:	7dbb      	ldrb	r3, [r7, #22]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4619      	mov	r1, r3
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fe4a 	bl	8003410 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800377c:	7abb      	ldrb	r3, [r7, #10]
 800377e:	3b01      	subs	r3, #1
 8003780:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003782:	7abb      	ldrb	r3, [r7, #10]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1eb      	bne.n	8003760 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7ff fe64 	bl	8003456 <u8x8_cad_EndTransfer>
      break;
 800378e:	e001      	b.n	8003794 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	0800ffc4 	.word	0x0800ffc4
 80037a4:	0800ffcc 	.word	0x0800ffcc
 80037a8:	0800ffd4 	.word	0x0800ffd4
 80037ac:	0800ffdc 	.word	0x0800ffdc

080037b0 <u8x8_d_sh1106_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	72fb      	strb	r3, [r7, #11]
 80037be:	4613      	mov	r3, r2
 80037c0:	72bb      	strb	r3, [r7, #10]
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80037c2:	7aba      	ldrb	r2, [r7, #10]
 80037c4:	7af9      	ldrb	r1, [r7, #11]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff49 	bl	8003660 <u8x8_d_ssd1306_sh1106_generic>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <u8x8_d_sh1106_128x64_noname+0x28>
    return 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e014      	b.n	8003802 <u8x8_d_sh1106_128x64_noname+0x52>
  
  switch(msg)
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	2b09      	cmp	r3, #9
 80037dc:	d009      	beq.n	80037f2 <u8x8_d_sh1106_128x64_noname+0x42>
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d10c      	bne.n	80037fc <u8x8_d_sh1106_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f82a 	bl	800383c <u8x8_d_helper_display_init>
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80037e8:	4908      	ldr	r1, [pc, #32]	@ (800380c <u8x8_d_sh1106_128x64_noname+0x5c>)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff fe43 	bl	8003476 <u8x8_cad_SendSequence>
      break;
 80037f0:	e006      	b.n	8003800 <u8x8_d_sh1106_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
 80037f2:	4907      	ldr	r1, [pc, #28]	@ (8003810 <u8x8_d_sh1106_128x64_noname+0x60>)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f80d 	bl	8003814 <u8x8_d_helper_display_setup_memory>
      break;
 80037fa:	e001      	b.n	8003800 <u8x8_d_sh1106_128x64_noname+0x50>
    default:
      return 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <u8x8_d_sh1106_128x64_noname+0x52>
  }
  return 1;
 8003800:	2301      	movs	r3, #1
    
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	0800ff8c 	.word	0x0800ff8c
 8003810:	0800ffe4 	.word	0x0800ffe4

08003814 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	7c9a      	ldrb	r2, [r3, #18]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695c      	ldr	r4, [r3, #20]
 8003848:	2300      	movs	r3, #0
 800384a:	2200      	movs	r2, #0
 800384c:	2128      	movs	r1, #40	@ 0x28
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68dc      	ldr	r4, [r3, #12]
 8003856:	2300      	movs	r3, #0
 8003858:	2200      	movs	r2, #0
 800385a:	2114      	movs	r1, #20
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003860:	2201      	movs	r2, #1
 8003862:	214b      	movs	r1, #75	@ 0x4b
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f886 	bl	8003976 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	791b      	ldrb	r3, [r3, #4]
 8003870:	461a      	mov	r2, r3
 8003872:	2129      	movs	r1, #41	@ 0x29
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f87e 	bl	8003976 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	214b      	movs	r1, #75	@ 0x4b
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f879 	bl	8003976 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	791b      	ldrb	r3, [r3, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	2129      	movs	r1, #41	@ 0x29
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f871 	bl	8003976 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003894:	2201      	movs	r2, #1
 8003896:	214b      	movs	r1, #75	@ 0x4b
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f86c 	bl	8003976 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	795b      	ldrb	r3, [r3, #5]
 80038a4:	461a      	mov	r2, r3
 80038a6:	2129      	movs	r1, #41	@ 0x29
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f864 	bl	8003976 <u8x8_gpio_call>
}    
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}

080038b6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80038b6:	b590      	push	{r4, r7, lr}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	4608      	mov	r0, r1
 80038c0:	4611      	mov	r1, r2
 80038c2:	461a      	mov	r2, r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	70fb      	strb	r3, [r7, #3]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70bb      	strb	r3, [r7, #2]
 80038cc:	4613      	mov	r3, r2
 80038ce:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80038d4:	78bb      	ldrb	r3, [r7, #2]
 80038d6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80038d8:	787b      	ldrb	r3, [r7, #1]
 80038da:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689c      	ldr	r4, [r3, #8]
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	2201      	movs	r2, #1
 80038ea:	210f      	movs	r1, #15
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	47a0      	blx	r4
 80038f0:	4603      	mov	r3, r0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}

080038fa <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80038fa:	b590      	push	{r4, r7, lr}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689c      	ldr	r4, [r3, #8]
 8003906:	2300      	movs	r3, #0
 8003908:	2200      	movs	r2, #0
 800390a:	2109      	movs	r1, #9
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	47a0      	blx	r4
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}

08003918 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689c      	ldr	r4, [r3, #8]
 8003924:	2300      	movs	r3, #0
 8003926:	2200      	movs	r2, #0
 8003928:	210a      	movs	r1, #10
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}

08003936 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689c      	ldr	r4, [r3, #8]
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	2300      	movs	r3, #0
 800394a:	210b      	movs	r1, #11
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	47a0      	blx	r4
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689c      	ldr	r4, [r3, #8]
 8003964:	2300      	movs	r3, #0
 8003966:	2200      	movs	r2, #0
 8003968:	2110      	movs	r1, #16
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	47a0      	blx	r4
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bd90      	pop	{r4, r7, pc}

08003976 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003976:	b590      	push	{r4, r7, lr}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
 8003982:	4613      	mov	r3, r2
 8003984:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695c      	ldr	r4, [r3, #20]
 800398a:	78ba      	ldrb	r2, [r7, #2]
 800398c:	78f9      	ldrb	r1, [r7, #3]
 800398e:	2300      	movs	r3, #0
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	47a0      	blx	r4
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	72fb      	strb	r3, [r7, #11]
 80039aa:	4613      	mov	r3, r2
 80039ac:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a11      	ldr	r2, [pc, #68]	@ (8003a14 <u8x8_SetupDefaults+0x58>)
 80039ce:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a10      	ldr	r2, [pc, #64]	@ (8003a14 <u8x8_SetupDefaults+0x58>)
 80039d4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a14 <u8x8_SetupDefaults+0x58>)
 80039da:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0d      	ldr	r2, [pc, #52]	@ (8003a14 <u8x8_SetupDefaults+0x58>)
 80039e0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	22ff      	movs	r2, #255	@ 0xff
 80039fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	22ff      	movs	r2, #255	@ 0xff
 8003a04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	0800399d 	.word	0x0800399d

08003a18 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff ffc8 	bl	80039bc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff ff58 	bl	80038fa <u8x8_SetupMemory>
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a58:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a5a:	4a12      	ldr	r2, [pc, #72]	@ (8003aa4 <MX_USART3_UART_Init+0x50>)
 8003a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a66:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a7e:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a8a:	4805      	ldr	r0, [pc, #20]	@ (8003aa0 <MX_USART3_UART_Init+0x4c>)
 8003a8c:	f002 fa0e 	bl	8005eac <HAL_UART_Init>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a96:	f7fd febd 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	2000080c 	.word	0x2000080c
 8003aa4:	40004800 	.word	0x40004800

08003aa8 <HAL_UART_MspInit>:
  /* USER CODE END USART6_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	@ 0x30
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 031c 	add.w	r3, r7, #28
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a32      	ldr	r2, [pc, #200]	@ (8003b90 <HAL_UART_MspInit+0xe8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d12d      	bne.n	8003b26 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	4a30      	ldr	r2, [pc, #192]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ada:	4b2e      	ldr	r3, [pc, #184]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003af0:	f043 0308 	orr.w	r3, r3, #8
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b27      	ldr	r3, [pc, #156]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b14:	2307      	movs	r3, #7
 8003b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	481e      	ldr	r0, [pc, #120]	@ (8003b98 <HAL_UART_MspInit+0xf0>)
 8003b20:	f000 f98e 	bl	8003e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003b24:	e030      	b.n	8003b88 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b9c <HAL_UART_MspInit+0xf4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12b      	bne.n	8003b88 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	4b17      	ldr	r3, [pc, #92]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	4a16      	ldr	r2, [pc, #88]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003b3a:	f043 0320 	orr.w	r3, r3, #32
 8003b3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b40:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	4a0f      	ldr	r2, [pc, #60]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <HAL_UART_MspInit+0xec>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b68:	23c0      	movs	r3, #192	@ 0xc0
 8003b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b74:	2303      	movs	r3, #3
 8003b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b78:	2308      	movs	r3, #8
 8003b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	4619      	mov	r1, r3
 8003b82:	4807      	ldr	r0, [pc, #28]	@ (8003ba0 <HAL_UART_MspInit+0xf8>)
 8003b84:	f000 f95c 	bl	8003e40 <HAL_GPIO_Init>
}
 8003b88:	bf00      	nop
 8003b8a:	3730      	adds	r7, #48	@ 0x30
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40004800 	.word	0x40004800
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020c00 	.word	0x40020c00
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	40020800 	.word	0x40020800

08003ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ba8:	f7fe f900 	bl	8001dac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bac:	480c      	ldr	r0, [pc, #48]	@ (8003be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bae:	490d      	ldr	r1, [pc, #52]	@ (8003be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb4:	e002      	b.n	8003bbc <LoopCopyDataInit>

08003bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bba:	3304      	adds	r3, #4

08003bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc0:	d3f9      	bcc.n	8003bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc8:	e001      	b.n	8003bce <LoopFillZerobss>

08003bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bcc:	3204      	adds	r2, #4

08003bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd0:	d3fb      	bcc.n	8003bca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003bd2:	f006 fa49 	bl	800a068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd6:	f7fd fd5d 	bl	8001694 <main>
  bx  lr    
 8003bda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003bdc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003be8:	08010454 	.word	0x08010454
  ldr r2, =_sbss
 8003bec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003bf0:	200052f0 	.word	0x200052f0

08003bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf4:	e7fe      	b.n	8003bf4 <ADC_IRQHandler>
	...

08003bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0d      	ldr	r2, [pc, #52]	@ (8003c38 <HAL_Init+0x40>)
 8003c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c08:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <HAL_Init+0x40>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c38 <HAL_Init+0x40>)
 8003c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c14:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <HAL_Init+0x40>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a07      	ldr	r2, [pc, #28]	@ (8003c38 <HAL_Init+0x40>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c20:	2003      	movs	r0, #3
 8003c22:	f000 f8d8 	bl	8003dd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c26:	200f      	movs	r0, #15
 8003c28:	f7fd ff60 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c2c:	f7fd ff32 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00

08003c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c40:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_IncTick+0x20>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <HAL_IncTick+0x24>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <HAL_IncTick+0x24>)
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000008 	.word	0x20000008
 8003c60:	20000854 	.word	0x20000854

08003c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return uwTick;
 8003c68:	4b03      	ldr	r3, [pc, #12]	@ (8003c78 <HAL_GetTick+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000854 	.word	0x20000854

08003c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cae:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	60d3      	str	r3, [r2, #12]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <__NVIC_GetPriorityGrouping+0x18>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	f003 0307 	and.w	r3, r3, #7
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db0b      	blt.n	8003d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4907      	ldr	r1, [pc, #28]	@ (8003d18 <__NVIC_EnableIRQ+0x38>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2001      	movs	r0, #1
 8003d02:	fa00 f202 	lsl.w	r2, r0, r2
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000e100 	.word	0xe000e100

08003d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	6039      	str	r1, [r7, #0]
 8003d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	db0a      	blt.n	8003d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	490c      	ldr	r1, [pc, #48]	@ (8003d68 <__NVIC_SetPriority+0x4c>)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	0112      	lsls	r2, r2, #4
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	440b      	add	r3, r1
 8003d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d44:	e00a      	b.n	8003d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	4908      	ldr	r1, [pc, #32]	@ (8003d6c <__NVIC_SetPriority+0x50>)
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	3b04      	subs	r3, #4
 8003d54:	0112      	lsls	r2, r2, #4
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	440b      	add	r3, r1
 8003d5a:	761a      	strb	r2, [r3, #24]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000e100 	.word	0xe000e100
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b089      	sub	sp, #36	@ 0x24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f1c3 0307 	rsb	r3, r3, #7
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	bf28      	it	cs
 8003d8e:	2304      	movcs	r3, #4
 8003d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d902      	bls.n	8003da0 <NVIC_EncodePriority+0x30>
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3b03      	subs	r3, #3
 8003d9e:	e000      	b.n	8003da2 <NVIC_EncodePriority+0x32>
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da4:	f04f 32ff 	mov.w	r2, #4294967295
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43da      	mvns	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	401a      	ands	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	43d9      	mvns	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	4313      	orrs	r3, r2
         );
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3724      	adds	r7, #36	@ 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff4c 	bl	8003c7c <__NVIC_SetPriorityGrouping>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfe:	f7ff ff61 	bl	8003cc4 <__NVIC_GetPriorityGrouping>
 8003e02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	6978      	ldr	r0, [r7, #20]
 8003e0a:	f7ff ffb1 	bl	8003d70 <NVIC_EncodePriority>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ff80 	bl	8003d1c <__NVIC_SetPriority>
}
 8003e1c:	bf00      	nop
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff54 	bl	8003ce0 <__NVIC_EnableIRQ>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	@ 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e177      	b.n	800414c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	f040 8166 	bne.w	8004146 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d005      	beq.n	8003e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d130      	bne.n	8003ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 0201 	and.w	r2, r3, #1
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d017      	beq.n	8003f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d123      	bne.n	8003f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	08da      	lsrs	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3208      	adds	r2, #8
 8003f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	220f      	movs	r2, #15
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80c0 	beq.w	8004146 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	4b66      	ldr	r3, [pc, #408]	@ (8004164 <HAL_GPIO_Init+0x324>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	4a65      	ldr	r2, [pc, #404]	@ (8004164 <HAL_GPIO_Init+0x324>)
 8003fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fd6:	4b63      	ldr	r3, [pc, #396]	@ (8004164 <HAL_GPIO_Init+0x324>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe2:	4a61      	ldr	r2, [pc, #388]	@ (8004168 <HAL_GPIO_Init+0x328>)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	3302      	adds	r3, #2
 8003fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	220f      	movs	r2, #15
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a58      	ldr	r2, [pc, #352]	@ (800416c <HAL_GPIO_Init+0x32c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d037      	beq.n	800407e <HAL_GPIO_Init+0x23e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a57      	ldr	r2, [pc, #348]	@ (8004170 <HAL_GPIO_Init+0x330>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d031      	beq.n	800407a <HAL_GPIO_Init+0x23a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a56      	ldr	r2, [pc, #344]	@ (8004174 <HAL_GPIO_Init+0x334>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d02b      	beq.n	8004076 <HAL_GPIO_Init+0x236>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a55      	ldr	r2, [pc, #340]	@ (8004178 <HAL_GPIO_Init+0x338>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d025      	beq.n	8004072 <HAL_GPIO_Init+0x232>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a54      	ldr	r2, [pc, #336]	@ (800417c <HAL_GPIO_Init+0x33c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01f      	beq.n	800406e <HAL_GPIO_Init+0x22e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a53      	ldr	r2, [pc, #332]	@ (8004180 <HAL_GPIO_Init+0x340>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d019      	beq.n	800406a <HAL_GPIO_Init+0x22a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a52      	ldr	r2, [pc, #328]	@ (8004184 <HAL_GPIO_Init+0x344>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_GPIO_Init+0x226>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a51      	ldr	r2, [pc, #324]	@ (8004188 <HAL_GPIO_Init+0x348>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00d      	beq.n	8004062 <HAL_GPIO_Init+0x222>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a50      	ldr	r2, [pc, #320]	@ (800418c <HAL_GPIO_Init+0x34c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <HAL_GPIO_Init+0x21e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4f      	ldr	r2, [pc, #316]	@ (8004190 <HAL_GPIO_Init+0x350>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_GPIO_Init+0x21a>
 8004056:	2309      	movs	r3, #9
 8004058:	e012      	b.n	8004080 <HAL_GPIO_Init+0x240>
 800405a:	230a      	movs	r3, #10
 800405c:	e010      	b.n	8004080 <HAL_GPIO_Init+0x240>
 800405e:	2308      	movs	r3, #8
 8004060:	e00e      	b.n	8004080 <HAL_GPIO_Init+0x240>
 8004062:	2307      	movs	r3, #7
 8004064:	e00c      	b.n	8004080 <HAL_GPIO_Init+0x240>
 8004066:	2306      	movs	r3, #6
 8004068:	e00a      	b.n	8004080 <HAL_GPIO_Init+0x240>
 800406a:	2305      	movs	r3, #5
 800406c:	e008      	b.n	8004080 <HAL_GPIO_Init+0x240>
 800406e:	2304      	movs	r3, #4
 8004070:	e006      	b.n	8004080 <HAL_GPIO_Init+0x240>
 8004072:	2303      	movs	r3, #3
 8004074:	e004      	b.n	8004080 <HAL_GPIO_Init+0x240>
 8004076:	2302      	movs	r3, #2
 8004078:	e002      	b.n	8004080 <HAL_GPIO_Init+0x240>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_GPIO_Init+0x240>
 800407e:	2300      	movs	r3, #0
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	f002 0203 	and.w	r2, r2, #3
 8004086:	0092      	lsls	r2, r2, #2
 8004088:	4093      	lsls	r3, r2
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004090:	4935      	ldr	r1, [pc, #212]	@ (8004168 <HAL_GPIO_Init+0x328>)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	3302      	adds	r3, #2
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800409e:	4b3d      	ldr	r3, [pc, #244]	@ (8004194 <HAL_GPIO_Init+0x354>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040c2:	4a34      	ldr	r2, [pc, #208]	@ (8004194 <HAL_GPIO_Init+0x354>)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c8:	4b32      	ldr	r3, [pc, #200]	@ (8004194 <HAL_GPIO_Init+0x354>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040ec:	4a29      	ldr	r2, [pc, #164]	@ (8004194 <HAL_GPIO_Init+0x354>)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040f2:	4b28      	ldr	r3, [pc, #160]	@ (8004194 <HAL_GPIO_Init+0x354>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004116:	4a1f      	ldr	r2, [pc, #124]	@ (8004194 <HAL_GPIO_Init+0x354>)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800411c:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <HAL_GPIO_Init+0x354>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004140:	4a14      	ldr	r2, [pc, #80]	@ (8004194 <HAL_GPIO_Init+0x354>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b0f      	cmp	r3, #15
 8004150:	f67f ae84 	bls.w	8003e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	3724      	adds	r7, #36	@ 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40013800 	.word	0x40013800
 800416c:	40020000 	.word	0x40020000
 8004170:	40020400 	.word	0x40020400
 8004174:	40020800 	.word	0x40020800
 8004178:	40020c00 	.word	0x40020c00
 800417c:	40021000 	.word	0x40021000
 8004180:	40021400 	.word	0x40021400
 8004184:	40021800 	.word	0x40021800
 8004188:	40021c00 	.word	0x40021c00
 800418c:	40022000 	.word	0x40022000
 8004190:	40022400 	.word	0x40022400
 8004194:	40013c00 	.word	0x40013c00

08004198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e001      	b.n	80041ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
 80041d4:	4613      	mov	r3, r2
 80041d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e4:	e003      	b.n	80041ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	041a      	lsls	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	619a      	str	r2, [r3, #24]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e12b      	b.n	8004466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd f928 	bl	8001478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	@ 0x24
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800424e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800425e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004260:	f001 f954 	bl	800550c <HAL_RCC_GetPCLK1Freq>
 8004264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4a81      	ldr	r2, [pc, #516]	@ (8004470 <HAL_I2C_Init+0x274>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d807      	bhi.n	8004280 <HAL_I2C_Init+0x84>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a80      	ldr	r2, [pc, #512]	@ (8004474 <HAL_I2C_Init+0x278>)
 8004274:	4293      	cmp	r3, r2
 8004276:	bf94      	ite	ls
 8004278:	2301      	movls	r3, #1
 800427a:	2300      	movhi	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e006      	b.n	800428e <HAL_I2C_Init+0x92>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a7d      	ldr	r2, [pc, #500]	@ (8004478 <HAL_I2C_Init+0x27c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	bf94      	ite	ls
 8004288:	2301      	movls	r3, #1
 800428a:	2300      	movhi	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0e7      	b.n	8004466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a78      	ldr	r2, [pc, #480]	@ (800447c <HAL_I2C_Init+0x280>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0c9b      	lsrs	r3, r3, #18
 80042a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004470 <HAL_I2C_Init+0x274>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d802      	bhi.n	80042d0 <HAL_I2C_Init+0xd4>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3301      	adds	r3, #1
 80042ce:	e009      	b.n	80042e4 <HAL_I2C_Init+0xe8>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	4a69      	ldr	r2, [pc, #420]	@ (8004480 <HAL_I2C_Init+0x284>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	099b      	lsrs	r3, r3, #6
 80042e2:	3301      	adds	r3, #1
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	495c      	ldr	r1, [pc, #368]	@ (8004470 <HAL_I2C_Init+0x274>)
 8004300:	428b      	cmp	r3, r1
 8004302:	d819      	bhi.n	8004338 <HAL_I2C_Init+0x13c>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1e59      	subs	r1, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004318:	400b      	ands	r3, r1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_I2C_Init+0x138>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e59      	subs	r1, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fbb1 f3f3 	udiv	r3, r1, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	e051      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 8004334:	2304      	movs	r3, #4
 8004336:	e04f      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d111      	bne.n	8004364 <HAL_I2C_Init+0x168>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1e58      	subs	r0, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	440b      	add	r3, r1
 800434e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004352:	3301      	adds	r3, #1
 8004354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e012      	b.n	800438a <HAL_I2C_Init+0x18e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1e58      	subs	r0, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	0099      	lsls	r1, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	fbb0 f3f3 	udiv	r3, r0, r3
 800437a:	3301      	adds	r3, #1
 800437c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Init+0x196>
 800438e:	2301      	movs	r3, #1
 8004390:	e022      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10e      	bne.n	80043b8 <HAL_I2C_Init+0x1bc>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1e58      	subs	r0, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	440b      	add	r3, r1
 80043a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ac:	3301      	adds	r3, #1
 80043ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b6:	e00f      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	6809      	ldr	r1, [r1, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6911      	ldr	r1, [r2, #16]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68d2      	ldr	r2, [r2, #12]
 8004412:	4311      	orrs	r1, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	430b      	orrs	r3, r1
 800441a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	000186a0 	.word	0x000186a0
 8004474:	001e847f 	.word	0x001e847f
 8004478:	003d08ff 	.word	0x003d08ff
 800447c:	431bde83 	.word	0x431bde83
 8004480:	10624dd3 	.word	0x10624dd3

08004484 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	461a      	mov	r2, r3
 8004490:	460b      	mov	r3, r1
 8004492:	817b      	strh	r3, [r7, #10]
 8004494:	4613      	mov	r3, r2
 8004496:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004498:	f7ff fbe4 	bl	8003c64 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	f040 80e0 	bne.w	800466c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2319      	movs	r3, #25
 80044b2:	2201      	movs	r2, #1
 80044b4:	4970      	ldr	r1, [pc, #448]	@ (8004678 <HAL_I2C_Master_Transmit+0x1f4>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f964 	bl	8004784 <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	e0d3      	b.n	800466e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_I2C_Master_Transmit+0x50>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0cc      	b.n	800466e <HAL_I2C_Master_Transmit+0x1ea>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d007      	beq.n	80044fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004508:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2221      	movs	r2, #33	@ 0x21
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2210      	movs	r2, #16
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	893a      	ldrh	r2, [r7, #8]
 800452a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4a50      	ldr	r2, [pc, #320]	@ (800467c <HAL_I2C_Master_Transmit+0x1f8>)
 800453a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800453c:	8979      	ldrh	r1, [r7, #10]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f89c 	bl	8004680 <I2C_MasterRequestWrite>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e08d      	b.n	800466e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004568:	e066      	b.n	8004638 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	6a39      	ldr	r1, [r7, #32]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fa22 	bl	80049b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	2b04      	cmp	r3, #4
 8004580:	d107      	bne.n	8004592 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004590:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e06b      	b.n	800466e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d11b      	bne.n	800460c <HAL_I2C_Master_Transmit+0x188>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d017      	beq.n	800460c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	6a39      	ldr	r1, [r7, #32]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fa19 	bl	8004a48 <I2C_WaitOnBTFFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	2b04      	cmp	r3, #4
 8004622:	d107      	bne.n	8004634 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004632:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e01a      	b.n	800466e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d194      	bne.n	800456a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800464e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	00100002 	.word	0x00100002
 800467c:	ffff0000 	.word	0xffff0000

08004680 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	460b      	mov	r3, r1
 800468e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d006      	beq.n	80046aa <I2C_MasterRequestWrite+0x2a>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d003      	beq.n	80046aa <I2C_MasterRequestWrite+0x2a>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046a8:	d108      	bne.n	80046bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e00b      	b.n	80046d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	2b12      	cmp	r3, #18
 80046c2:	d107      	bne.n	80046d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f84f 	bl	8004784 <I2C_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fa:	d103      	bne.n	8004704 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004702:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e035      	b.n	8004774 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004710:	d108      	bne.n	8004724 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004712:	897b      	ldrh	r3, [r7, #10]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004720:	611a      	str	r2, [r3, #16]
 8004722:	e01b      	b.n	800475c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004724:	897b      	ldrh	r3, [r7, #10]
 8004726:	11db      	asrs	r3, r3, #7
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f063 030f 	orn	r3, r3, #15
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	490e      	ldr	r1, [pc, #56]	@ (800477c <I2C_MasterRequestWrite+0xfc>)
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f898 	bl	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e010      	b.n	8004774 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004752:	897b      	ldrh	r3, [r7, #10]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4907      	ldr	r1, [pc, #28]	@ (8004780 <I2C_MasterRequestWrite+0x100>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f888 	bl	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010008 	.word	0x00010008
 8004780:	00010002 	.word	0x00010002

08004784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004794:	e048      	b.n	8004828 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d044      	beq.n	8004828 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479e:	f7ff fa61 	bl	8003c64 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d302      	bcc.n	80047b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d139      	bne.n	8004828 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	0c1b      	lsrs	r3, r3, #16
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10d      	bne.n	80047da <I2C_WaitOnFlagUntilTimeout+0x56>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	43da      	mvns	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4013      	ands	r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	e00c      	b.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	43da      	mvns	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d116      	bne.n	8004828 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e023      	b.n	8004870 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d10d      	bne.n	800484e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	43da      	mvns	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	e00c      	b.n	8004868 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	43da      	mvns	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	429a      	cmp	r2, r3
 800486c:	d093      	beq.n	8004796 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004886:	e071      	b.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004896:	d123      	bne.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f043 0204 	orr.w	r2, r3, #4
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e067      	b.n	80049b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d041      	beq.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e8:	f7ff f9bc 	bl	8003c64 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d136      	bne.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10c      	bne.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	43da      	mvns	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e00b      	b.n	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	43da      	mvns	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e021      	b.n	80049b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	0c1b      	lsrs	r3, r3, #16
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d10c      	bne.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	43da      	mvns	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	e00b      	b.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	43da      	mvns	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf14      	ite	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	2300      	moveq	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f af6d 	bne.w	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c4:	e034      	b.n	8004a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f886 	bl	8004ad8 <I2C_IsAcknowledgeFailed>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e034      	b.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d028      	beq.n	8004a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7ff f941 	bl	8003c64 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11d      	bne.n	8004a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fe:	2b80      	cmp	r3, #128	@ 0x80
 8004a00:	d016      	beq.n	8004a30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e007      	b.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3a:	2b80      	cmp	r3, #128	@ 0x80
 8004a3c:	d1c3      	bne.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a54:	e034      	b.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f83e 	bl	8004ad8 <I2C_IsAcknowledgeFailed>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e034      	b.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d028      	beq.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7ff f8f9 	bl	8003c64 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11d      	bne.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d016      	beq.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e007      	b.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d1c3      	bne.n	8004a56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aee:	d11b      	bne.n	8004b28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d129      	bne.n	8004ba0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0210 	bic.w	r2, r2, #16
 8004b72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d12a      	bne.n	8004c1e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	@ 0x24
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	f023 030f 	bic.w	r3, r3, #15
 8004bee:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	89fa      	ldrh	r2, [r7, #14]
 8004c00:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e267      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d075      	beq.n	8004d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c4a:	4b88      	ldr	r3, [pc, #544]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d00c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c56:	4b85      	ldr	r3, [pc, #532]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d112      	bne.n	8004c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c62:	4b82      	ldr	r3, [pc, #520]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	4b7e      	ldr	r3, [pc, #504]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d05b      	beq.n	8004d34 <HAL_RCC_OscConfig+0x108>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d157      	bne.n	8004d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e242      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x74>
 8004c92:	4b76      	ldr	r3, [pc, #472]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a75      	ldr	r2, [pc, #468]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e01d      	b.n	8004cdc <HAL_RCC_OscConfig+0xb0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x98>
 8004caa:	4b70      	ldr	r3, [pc, #448]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6f      	ldr	r2, [pc, #444]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6c      	ldr	r2, [pc, #432]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_OscConfig+0xb0>
 8004cc4:	4b69      	ldr	r3, [pc, #420]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a68      	ldr	r2, [pc, #416]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	4b66      	ldr	r3, [pc, #408]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a65      	ldr	r2, [pc, #404]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d013      	beq.n	8004d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe ffbe 	bl	8003c64 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fe ffba 	bl	8003c64 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	@ 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e207      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0xc0>
 8004d0a:	e014      	b.n	8004d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fe ffaa 	bl	8003c64 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fe ffa6 	bl	8003c64 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	@ 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e1f3      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d26:	4b51      	ldr	r3, [pc, #324]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0xe8>
 8004d32:	e000      	b.n	8004d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d063      	beq.n	8004e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d42:	4b4a      	ldr	r3, [pc, #296]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4e:	4b47      	ldr	r3, [pc, #284]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d11c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b44      	ldr	r3, [pc, #272]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d66:	4b41      	ldr	r3, [pc, #260]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_RCC_OscConfig+0x152>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d001      	beq.n	8004d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e1c7      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4937      	ldr	r1, [pc, #220]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	e03a      	b.n	8004e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9c:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fe ff5f 	bl	8003c64 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fe ff5b 	bl	8003c64 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e1a8      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b28      	ldr	r3, [pc, #160]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4925      	ldr	r1, [pc, #148]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	e015      	b.n	8004e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dde:	4b24      	ldr	r3, [pc, #144]	@ (8004e70 <HAL_RCC_OscConfig+0x244>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fe ff3e 	bl	8003c64 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fe ff3a 	bl	8003c64 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e187      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d036      	beq.n	8004e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <HAL_RCC_OscConfig+0x248>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fe ff1e 	bl	8003c64 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fe ff1a 	bl	8003c64 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e167      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_OscConfig+0x240>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x200>
 8004e4a:	e01b      	b.n	8004e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RCC_OscConfig+0x248>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e52:	f7fe ff07 	bl	8003c64 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	e00e      	b.n	8004e78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5a:	f7fe ff03 	bl	8003c64 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d907      	bls.n	8004e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e150      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	42470000 	.word	0x42470000
 8004e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e78:	4b88      	ldr	r3, [pc, #544]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ea      	bne.n	8004e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8097 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b81      	ldr	r3, [pc, #516]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	4b7d      	ldr	r3, [pc, #500]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	4a7c      	ldr	r2, [pc, #496]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b77      	ldr	r3, [pc, #476]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d118      	bne.n	8004f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ece:	4b74      	ldr	r3, [pc, #464]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a73      	ldr	r2, [pc, #460]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fe fec3 	bl	8003c64 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fe febf 	bl	8003c64 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e10c      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80050a0 <HAL_RCC_OscConfig+0x474>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <HAL_RCC_OscConfig+0x2ea>
 8004f08:	4b64      	ldr	r3, [pc, #400]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	4a63      	ldr	r2, [pc, #396]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f14:	e01c      	b.n	8004f50 <HAL_RCC_OscConfig+0x324>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x30c>
 8004f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f22:	4a5e      	ldr	r2, [pc, #376]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0x324>
 8004f38:	4b58      	ldr	r3, [pc, #352]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3c:	4a57      	ldr	r2, [pc, #348]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f44:	4b55      	ldr	r3, [pc, #340]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f48:	4a54      	ldr	r2, [pc, #336]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fe fe84 	bl	8003c64 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fe fe80 	bl	8003c64 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0cb      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4b49      	ldr	r3, [pc, #292]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ee      	beq.n	8004f60 <HAL_RCC_OscConfig+0x334>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f84:	f7fe fe6e 	bl	8003c64 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fe fe6a 	bl	8003c64 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0b5      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ee      	bne.n	8004f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb4:	4b39      	ldr	r3, [pc, #228]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	4a38      	ldr	r2, [pc, #224]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80a1 	beq.w	800510c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fca:	4b34      	ldr	r3, [pc, #208]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d05c      	beq.n	8005090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d141      	bne.n	8005062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b31      	ldr	r3, [pc, #196]	@ (80050a4 <HAL_RCC_OscConfig+0x478>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fe fe3e 	bl	8003c64 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fe fe3a 	bl	8003c64 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e087      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b27      	ldr	r3, [pc, #156]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	3b01      	subs	r3, #1
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	491b      	ldr	r1, [pc, #108]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_RCC_OscConfig+0x478>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fe fe13 	bl	8003c64 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005042:	f7fe fe0f 	bl	8003c64 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e05c      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005054:	4b11      	ldr	r3, [pc, #68]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x416>
 8005060:	e054      	b.n	800510c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005062:	4b10      	ldr	r3, [pc, #64]	@ (80050a4 <HAL_RCC_OscConfig+0x478>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fe fdfc 	bl	8003c64 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fe fdf8 	bl	8003c64 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e045      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005082:	4b06      	ldr	r3, [pc, #24]	@ (800509c <HAL_RCC_OscConfig+0x470>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x444>
 800508e:	e03d      	b.n	800510c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e038      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
 800509c:	40023800 	.word	0x40023800
 80050a0:	40007000 	.word	0x40007000
 80050a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <HAL_RCC_OscConfig+0x4ec>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d028      	beq.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d121      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d11a      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d111      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	3b01      	subs	r3, #1
 80050f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0cc      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005130:	4b68      	ldr	r3, [pc, #416]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d90c      	bls.n	8005158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513e:	4b65      	ldr	r3, [pc, #404]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b63      	ldr	r3, [pc, #396]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0b8      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005170:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4a58      	ldr	r2, [pc, #352]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800517a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005188:	4b53      	ldr	r3, [pc, #332]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a52      	ldr	r2, [pc, #328]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b50      	ldr	r3, [pc, #320]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	494d      	ldr	r1, [pc, #308]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d044      	beq.n	800523c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	4b47      	ldr	r3, [pc, #284]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d119      	bne.n	80051fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d003      	beq.n	80051da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d107      	bne.n	80051ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051da:	4b3f      	ldr	r3, [pc, #252]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e06f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ea:	4b3b      	ldr	r3, [pc, #236]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e067      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051fa:	4b37      	ldr	r3, [pc, #220]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f023 0203 	bic.w	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4934      	ldr	r1, [pc, #208]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800520c:	f7fe fd2a 	bl	8003c64 <HAL_GetTick>
 8005210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	e00a      	b.n	800522a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005214:	f7fe fd26 	bl	8003c64 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e04f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522a:	4b2b      	ldr	r3, [pc, #172]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 020c 	and.w	r2, r3, #12
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	429a      	cmp	r2, r3
 800523a:	d1eb      	bne.n	8005214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d20c      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b22      	ldr	r3, [pc, #136]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b20      	ldr	r3, [pc, #128]	@ (80052d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e032      	b.n	80052ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005270:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4916      	ldr	r1, [pc, #88]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528e:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	490e      	ldr	r1, [pc, #56]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052a2:	f000 f821 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 80052a6:	4602      	mov	r2, r0
 80052a8:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	490a      	ldr	r1, [pc, #40]	@ (80052dc <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	5ccb      	ldrb	r3, [r1, r3]
 80052b6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ba:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052be:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fc fc12 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023c00 	.word	0x40023c00
 80052d8:	40023800 	.word	0x40023800
 80052dc:	0800dec4 	.word	0x0800dec4
 80052e0:	20000000 	.word	0x20000000
 80052e4:	20000004 	.word	0x20000004

080052e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ec:	b094      	sub	sp, #80	@ 0x50
 80052ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052f4:	2300      	movs	r3, #0
 80052f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f8:	2300      	movs	r3, #0
 80052fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005300:	4b79      	ldr	r3, [pc, #484]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b08      	cmp	r3, #8
 800530a:	d00d      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x40>
 800530c:	2b08      	cmp	r3, #8
 800530e:	f200 80e1 	bhi.w	80054d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x34>
 8005316:	2b04      	cmp	r3, #4
 8005318:	d003      	beq.n	8005322 <HAL_RCC_GetSysClockFreq+0x3a>
 800531a:	e0db      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b73      	ldr	r3, [pc, #460]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x204>)
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005320:	e0db      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005322:	4b73      	ldr	r3, [pc, #460]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005324:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005326:	e0d8      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005328:	4b6f      	ldr	r3, [pc, #444]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005330:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005332:	4b6d      	ldr	r3, [pc, #436]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d063      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533e:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	2200      	movs	r2, #0
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005348:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005350:	633b      	str	r3, [r7, #48]	@ 0x30
 8005352:	2300      	movs	r3, #0
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
 8005356:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	f04f 0000 	mov.w	r0, #0
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	0159      	lsls	r1, r3, #5
 8005368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800536c:	0150      	lsls	r0, r2, #5
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4621      	mov	r1, r4
 8005374:	1a51      	subs	r1, r2, r1
 8005376:	6139      	str	r1, [r7, #16]
 8005378:	4629      	mov	r1, r5
 800537a:	eb63 0301 	sbc.w	r3, r3, r1
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800538c:	4659      	mov	r1, fp
 800538e:	018b      	lsls	r3, r1, #6
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005396:	4651      	mov	r1, sl
 8005398:	018a      	lsls	r2, r1, #6
 800539a:	4651      	mov	r1, sl
 800539c:	ebb2 0801 	subs.w	r8, r2, r1
 80053a0:	4659      	mov	r1, fp
 80053a2:	eb63 0901 	sbc.w	r9, r3, r1
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ba:	4690      	mov	r8, r2
 80053bc:	4699      	mov	r9, r3
 80053be:	4623      	mov	r3, r4
 80053c0:	eb18 0303 	adds.w	r3, r8, r3
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	462b      	mov	r3, r5
 80053c8:	eb49 0303 	adc.w	r3, r9, r3
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053da:	4629      	mov	r1, r5
 80053dc:	024b      	lsls	r3, r1, #9
 80053de:	4621      	mov	r1, r4
 80053e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053e4:	4621      	mov	r1, r4
 80053e6:	024a      	lsls	r2, r1, #9
 80053e8:	4610      	mov	r0, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ee:	2200      	movs	r2, #0
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053f8:	f7fb fc56 	bl	8000ca8 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4613      	mov	r3, r2
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005404:	e058      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005406:	4b38      	ldr	r3, [pc, #224]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	2200      	movs	r2, #0
 800540e:	4618      	mov	r0, r3
 8005410:	4611      	mov	r1, r2
 8005412:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005416:	623b      	str	r3, [r7, #32]
 8005418:	2300      	movs	r3, #0
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
 800541c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	0159      	lsls	r1, r3, #5
 800542e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005432:	0150      	lsls	r0, r2, #5
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4641      	mov	r1, r8
 800543a:	ebb2 0a01 	subs.w	sl, r2, r1
 800543e:	4649      	mov	r1, r9
 8005440:	eb63 0b01 	sbc.w	fp, r3, r1
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005458:	ebb2 040a 	subs.w	r4, r2, sl
 800545c:	eb63 050b 	sbc.w	r5, r3, fp
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	00eb      	lsls	r3, r5, #3
 800546a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546e:	00e2      	lsls	r2, r4, #3
 8005470:	4614      	mov	r4, r2
 8005472:	461d      	mov	r5, r3
 8005474:	4643      	mov	r3, r8
 8005476:	18e3      	adds	r3, r4, r3
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	464b      	mov	r3, r9
 800547c:	eb45 0303 	adc.w	r3, r5, r3
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548e:	4629      	mov	r1, r5
 8005490:	028b      	lsls	r3, r1, #10
 8005492:	4621      	mov	r1, r4
 8005494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005498:	4621      	mov	r1, r4
 800549a:	028a      	lsls	r2, r1, #10
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a2:	2200      	movs	r2, #0
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	61fa      	str	r2, [r7, #28]
 80054a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054ac:	f7fb fbfc 	bl	8000ca8 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	3301      	adds	r3, #1
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80054c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d2:	e002      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d4:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x204>)
 80054d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3750      	adds	r7, #80	@ 0x50
 80054e0:	46bd      	mov	sp, r7
 80054e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800
 80054ec:	00f42400 	.word	0x00f42400
 80054f0:	007a1200 	.word	0x007a1200

080054f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f8:	4b03      	ldr	r3, [pc, #12]	@ (8005508 <HAL_RCC_GetHCLKFreq+0x14>)
 80054fa:	681b      	ldr	r3, [r3, #0]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000000 	.word	0x20000000

0800550c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005510:	f7ff fff0 	bl	80054f4 <HAL_RCC_GetHCLKFreq>
 8005514:	4602      	mov	r2, r0
 8005516:	4b05      	ldr	r3, [pc, #20]	@ (800552c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	0a9b      	lsrs	r3, r3, #10
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	4903      	ldr	r1, [pc, #12]	@ (8005530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005522:	5ccb      	ldrb	r3, [r1, r3]
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023800 	.word	0x40023800
 8005530:	0800ded4 	.word	0x0800ded4

08005534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005538:	f7ff ffdc 	bl	80054f4 <HAL_RCC_GetHCLKFreq>
 800553c:	4602      	mov	r2, r0
 800553e:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	0b5b      	lsrs	r3, r3, #13
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	4903      	ldr	r1, [pc, #12]	@ (8005558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800554a:	5ccb      	ldrb	r3, [r1, r3]
 800554c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40023800 	.word	0x40023800
 8005558:	0800ded4 	.word	0x0800ded4

0800555c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	220f      	movs	r2, #15
 800556a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800556c:	4b12      	ldr	r3, [pc, #72]	@ (80055b8 <HAL_RCC_GetClockConfig+0x5c>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0203 	and.w	r2, r3, #3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005578:	4b0f      	ldr	r3, [pc, #60]	@ (80055b8 <HAL_RCC_GetClockConfig+0x5c>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005590:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	08db      	lsrs	r3, r3, #3
 8005596:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800559e:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <HAL_RCC_GetClockConfig+0x60>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 020f 	and.w	r2, r3, #15
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	601a      	str	r2, [r3, #0]
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40023800 	.word	0x40023800
 80055bc:	40023c00 	.word	0x40023c00

080055c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e041      	b.n	8005656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc fc3e 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 fa7e 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d001      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e04e      	b.n	8005716 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a23      	ldr	r2, [pc, #140]	@ (8005724 <HAL_TIM_Base_Start_IT+0xc4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d022      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a2:	d01d      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005728 <HAL_TIM_Base_Start_IT+0xc8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	@ (800572c <HAL_TIM_Base_Start_IT+0xcc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <HAL_TIM_Base_Start_IT+0xd0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005734 <HAL_TIM_Base_Start_IT+0xd4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a19      	ldr	r2, [pc, #100]	@ (8005738 <HAL_TIM_Base_Start_IT+0xd8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	@ (800573c <HAL_TIM_Base_Start_IT+0xdc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d111      	bne.n	8005704 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d010      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005702:	e007      	b.n	8005714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40010400 	.word	0x40010400
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d020      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0202 	mvn.w	r2, #2
 8005774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f999 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f98b 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f99c 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d020      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0204 	mvn.w	r2, #4
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f973 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f965 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f976 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0208 	mvn.w	r2, #8
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f94d 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f93f 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f950 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0210 	mvn.w	r2, #16
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2208      	movs	r2, #8
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f927 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f919 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f92a 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00c      	beq.n	80058ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0201 	mvn.w	r2, #1
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fb ffa2 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fae4 	bl	8005e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f8fb 	bl	8005aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0220 	mvn.w	r2, #32
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fab6 	bl	8005e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIM_ConfigClockSource+0x1c>
 8005938:	2302      	movs	r3, #2
 800593a:	e0b4      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x186>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800595a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005974:	d03e      	beq.n	80059f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597a:	f200 8087 	bhi.w	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005982:	f000 8086 	beq.w	8005a92 <HAL_TIM_ConfigClockSource+0x172>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598a:	d87f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b70      	cmp	r3, #112	@ 0x70
 800598e:	d01a      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005990:	2b70      	cmp	r3, #112	@ 0x70
 8005992:	d87b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b60      	cmp	r3, #96	@ 0x60
 8005996:	d050      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x11a>
 8005998:	2b60      	cmp	r3, #96	@ 0x60
 800599a:	d877      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b50      	cmp	r3, #80	@ 0x50
 800599e:	d03c      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0xfa>
 80059a0:	2b50      	cmp	r3, #80	@ 0x50
 80059a2:	d873      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d058      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x13a>
 80059a8:	2b40      	cmp	r3, #64	@ 0x40
 80059aa:	d86f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b30      	cmp	r3, #48	@ 0x30
 80059ae:	d064      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	2b30      	cmp	r3, #48	@ 0x30
 80059b2:	d86b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d060      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d867      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05c      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d05a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	e062      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059d6:	f000 f9b9 	bl	8005d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]
      break;
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a04:	f000 f9a2 	bl	8005d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e03c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 f916 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2150      	movs	r1, #80	@ 0x50
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f96f 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e02c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 f935 	bl	8005cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2160      	movs	r1, #96	@ 0x60
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f95f 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 8005a58:	e01c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 f8f6 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2140      	movs	r1, #64	@ 0x40
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f94f 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 f946 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a46      	ldr	r2, [pc, #280]	@ (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1e:	d00f      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a43      	ldr	r2, [pc, #268]	@ (8005c30 <TIM_Base_SetConfig+0x130>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a42      	ldr	r2, [pc, #264]	@ (8005c34 <TIM_Base_SetConfig+0x134>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a41      	ldr	r2, [pc, #260]	@ (8005c38 <TIM_Base_SetConfig+0x138>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a40      	ldr	r2, [pc, #256]	@ (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d108      	bne.n	8005b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a35      	ldr	r2, [pc, #212]	@ (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b60:	d027      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a32      	ldr	r2, [pc, #200]	@ (8005c30 <TIM_Base_SetConfig+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d023      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	@ (8005c34 <TIM_Base_SetConfig+0x134>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a30      	ldr	r2, [pc, #192]	@ (8005c38 <TIM_Base_SetConfig+0x138>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2e      	ldr	r2, [pc, #184]	@ (8005c40 <TIM_Base_SetConfig+0x140>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c44 <TIM_Base_SetConfig+0x144>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <TIM_Base_SetConfig+0x148>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c4c <TIM_Base_SetConfig+0x14c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8005c50 <TIM_Base_SetConfig+0x150>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a29      	ldr	r2, [pc, #164]	@ (8005c54 <TIM_Base_SetConfig+0x154>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a10      	ldr	r2, [pc, #64]	@ (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a12      	ldr	r2, [pc, #72]	@ (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d103      	bne.n	8005c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d105      	bne.n	8005c1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f023 0201 	bic.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	611a      	str	r2, [r3, #16]
  }
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40010400 	.word	0x40010400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800
 8005c4c:	40001800 	.word	0x40001800
 8005c50:	40001c00 	.word	0x40001c00
 8005c54:	40002000 	.word	0x40002000

08005c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0201 	bic.w	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f023 030a 	bic.w	r3, r3, #10
 8005c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b087      	sub	sp, #28
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f023 0210 	bic.w	r2, r3, #16
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f043 0307 	orr.w	r3, r3, #7
 8005d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	021a      	lsls	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e05a      	b.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a21      	ldr	r2, [pc, #132]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d022      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df0:	d01d      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d018      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a18      	ldr	r2, [pc, #96]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10c      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40001800 	.word	0x40001800

08005e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e042      	b.n	8005f44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fd fde8 	bl	8003aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2224      	movs	r2, #36	@ 0x24
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f82b 	bl	8005f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695a      	ldr	r2, [r3, #20]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f50:	b0c0      	sub	sp, #256	@ 0x100
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	68d9      	ldr	r1, [r3, #12]
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	ea40 0301 	orr.w	r3, r0, r1
 8005f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fa4:	f021 010c 	bic.w	r1, r1, #12
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc6:	6999      	ldr	r1, [r3, #24]
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	ea40 0301 	orr.w	r3, r0, r1
 8005fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4b8f      	ldr	r3, [pc, #572]	@ (8006218 <UART_SetConfig+0x2cc>)
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d005      	beq.n	8005fec <UART_SetConfig+0xa0>
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800621c <UART_SetConfig+0x2d0>)
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d104      	bne.n	8005ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7ff faa2 	bl	8005534 <HAL_RCC_GetPCLK2Freq>
 8005ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ff4:	e003      	b.n	8005ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ff6:	f7ff fa89 	bl	800550c <HAL_RCC_GetPCLK1Freq>
 8005ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006008:	f040 810c 	bne.w	8006224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800600c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006016:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800601a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800601e:	4622      	mov	r2, r4
 8006020:	462b      	mov	r3, r5
 8006022:	1891      	adds	r1, r2, r2
 8006024:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006026:	415b      	adcs	r3, r3
 8006028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800602a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800602e:	4621      	mov	r1, r4
 8006030:	eb12 0801 	adds.w	r8, r2, r1
 8006034:	4629      	mov	r1, r5
 8006036:	eb43 0901 	adc.w	r9, r3, r1
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800604a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800604e:	4690      	mov	r8, r2
 8006050:	4699      	mov	r9, r3
 8006052:	4623      	mov	r3, r4
 8006054:	eb18 0303 	adds.w	r3, r8, r3
 8006058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800605c:	462b      	mov	r3, r5
 800605e:	eb49 0303 	adc.w	r3, r9, r3
 8006062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006072:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800607a:	460b      	mov	r3, r1
 800607c:	18db      	adds	r3, r3, r3
 800607e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006080:	4613      	mov	r3, r2
 8006082:	eb42 0303 	adc.w	r3, r2, r3
 8006086:	657b      	str	r3, [r7, #84]	@ 0x54
 8006088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800608c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006090:	f7fa fe0a 	bl	8000ca8 <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4b61      	ldr	r3, [pc, #388]	@ (8006220 <UART_SetConfig+0x2d4>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	011c      	lsls	r4, r3, #4
 80060a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	1891      	adds	r1, r2, r2
 80060ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060bc:	415b      	adcs	r3, r3
 80060be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060c4:	4641      	mov	r1, r8
 80060c6:	eb12 0a01 	adds.w	sl, r2, r1
 80060ca:	4649      	mov	r1, r9
 80060cc:	eb43 0b01 	adc.w	fp, r3, r1
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060e4:	4692      	mov	sl, r2
 80060e6:	469b      	mov	fp, r3
 80060e8:	4643      	mov	r3, r8
 80060ea:	eb1a 0303 	adds.w	r3, sl, r3
 80060ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060f2:	464b      	mov	r3, r9
 80060f4:	eb4b 0303 	adc.w	r3, fp, r3
 80060f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006108:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800610c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006110:	460b      	mov	r3, r1
 8006112:	18db      	adds	r3, r3, r3
 8006114:	643b      	str	r3, [r7, #64]	@ 0x40
 8006116:	4613      	mov	r3, r2
 8006118:	eb42 0303 	adc.w	r3, r2, r3
 800611c:	647b      	str	r3, [r7, #68]	@ 0x44
 800611e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006126:	f7fa fdbf 	bl	8000ca8 <__aeabi_uldivmod>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4611      	mov	r1, r2
 8006130:	4b3b      	ldr	r3, [pc, #236]	@ (8006220 <UART_SetConfig+0x2d4>)
 8006132:	fba3 2301 	umull	r2, r3, r3, r1
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2264      	movs	r2, #100	@ 0x64
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	1acb      	subs	r3, r1, r3
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006146:	4b36      	ldr	r3, [pc, #216]	@ (8006220 <UART_SetConfig+0x2d4>)
 8006148:	fba3 2302 	umull	r2, r3, r3, r2
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006154:	441c      	add	r4, r3
 8006156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615a:	2200      	movs	r2, #0
 800615c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006160:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	1891      	adds	r1, r2, r2
 800616e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006170:	415b      	adcs	r3, r3
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006178:	4641      	mov	r1, r8
 800617a:	1851      	adds	r1, r2, r1
 800617c:	6339      	str	r1, [r7, #48]	@ 0x30
 800617e:	4649      	mov	r1, r9
 8006180:	414b      	adcs	r3, r1
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006190:	4659      	mov	r1, fp
 8006192:	00cb      	lsls	r3, r1, #3
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619a:	4651      	mov	r1, sl
 800619c:	00ca      	lsls	r2, r1, #3
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	4642      	mov	r2, r8
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061ac:	464b      	mov	r3, r9
 80061ae:	460a      	mov	r2, r1
 80061b0:	eb42 0303 	adc.w	r3, r2, r3
 80061b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061cc:	460b      	mov	r3, r1
 80061ce:	18db      	adds	r3, r3, r3
 80061d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061d2:	4613      	mov	r3, r2
 80061d4:	eb42 0303 	adc.w	r3, r2, r3
 80061d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061e2:	f7fa fd61 	bl	8000ca8 <__aeabi_uldivmod>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <UART_SetConfig+0x2d4>)
 80061ec:	fba3 1302 	umull	r1, r3, r3, r2
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	2164      	movs	r1, #100	@ 0x64
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	3332      	adds	r3, #50	@ 0x32
 80061fe:	4a08      	ldr	r2, [pc, #32]	@ (8006220 <UART_SetConfig+0x2d4>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f003 0207 	and.w	r2, r3, #7
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4422      	add	r2, r4
 8006212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006214:	e106      	b.n	8006424 <UART_SetConfig+0x4d8>
 8006216:	bf00      	nop
 8006218:	40011000 	.word	0x40011000
 800621c:	40011400 	.word	0x40011400
 8006220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006228:	2200      	movs	r2, #0
 800622a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800622e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006236:	4642      	mov	r2, r8
 8006238:	464b      	mov	r3, r9
 800623a:	1891      	adds	r1, r2, r2
 800623c:	6239      	str	r1, [r7, #32]
 800623e:	415b      	adcs	r3, r3
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
 8006242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006246:	4641      	mov	r1, r8
 8006248:	1854      	adds	r4, r2, r1
 800624a:	4649      	mov	r1, r9
 800624c:	eb43 0501 	adc.w	r5, r3, r1
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	00eb      	lsls	r3, r5, #3
 800625a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800625e:	00e2      	lsls	r2, r4, #3
 8006260:	4614      	mov	r4, r2
 8006262:	461d      	mov	r5, r3
 8006264:	4643      	mov	r3, r8
 8006266:	18e3      	adds	r3, r4, r3
 8006268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800626c:	464b      	mov	r3, r9
 800626e:	eb45 0303 	adc.w	r3, r5, r3
 8006272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006282:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006292:	4629      	mov	r1, r5
 8006294:	008b      	lsls	r3, r1, #2
 8006296:	4621      	mov	r1, r4
 8006298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629c:	4621      	mov	r1, r4
 800629e:	008a      	lsls	r2, r1, #2
 80062a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062a4:	f7fa fd00 	bl	8000ca8 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4b60      	ldr	r3, [pc, #384]	@ (8006430 <UART_SetConfig+0x4e4>)
 80062ae:	fba3 2302 	umull	r2, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	011c      	lsls	r4, r3, #4
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	61b9      	str	r1, [r7, #24]
 80062d0:	415b      	adcs	r3, r3
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d8:	4641      	mov	r1, r8
 80062da:	1851      	adds	r1, r2, r1
 80062dc:	6139      	str	r1, [r7, #16]
 80062de:	4649      	mov	r1, r9
 80062e0:	414b      	adcs	r3, r1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062f0:	4659      	mov	r1, fp
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4651      	mov	r1, sl
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4651      	mov	r1, sl
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4642      	mov	r2, r8
 8006306:	189b      	adds	r3, r3, r2
 8006308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006322:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006330:	4649      	mov	r1, r9
 8006332:	008b      	lsls	r3, r1, #2
 8006334:	4641      	mov	r1, r8
 8006336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800633a:	4641      	mov	r1, r8
 800633c:	008a      	lsls	r2, r1, #2
 800633e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006342:	f7fa fcb1 	bl	8000ca8 <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4611      	mov	r1, r2
 800634c:	4b38      	ldr	r3, [pc, #224]	@ (8006430 <UART_SetConfig+0x4e4>)
 800634e:	fba3 2301 	umull	r2, r3, r3, r1
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	2264      	movs	r2, #100	@ 0x64
 8006356:	fb02 f303 	mul.w	r3, r2, r3
 800635a:	1acb      	subs	r3, r1, r3
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	3332      	adds	r3, #50	@ 0x32
 8006360:	4a33      	ldr	r2, [pc, #204]	@ (8006430 <UART_SetConfig+0x4e4>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800636c:	441c      	add	r4, r3
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006372:	2200      	movs	r2, #0
 8006374:	673b      	str	r3, [r7, #112]	@ 0x70
 8006376:	677a      	str	r2, [r7, #116]	@ 0x74
 8006378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	1891      	adds	r1, r2, r2
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	415b      	adcs	r3, r3
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800638c:	4641      	mov	r1, r8
 800638e:	1851      	adds	r1, r2, r1
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	4649      	mov	r1, r9
 8006394:	414b      	adcs	r3, r1
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063a4:	4659      	mov	r1, fp
 80063a6:	00cb      	lsls	r3, r1, #3
 80063a8:	4651      	mov	r1, sl
 80063aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ae:	4651      	mov	r1, sl
 80063b0:	00ca      	lsls	r2, r1, #3
 80063b2:	4610      	mov	r0, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	4642      	mov	r2, r8
 80063ba:	189b      	adds	r3, r3, r2
 80063bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063be:	464b      	mov	r3, r9
 80063c0:	460a      	mov	r2, r1
 80063c2:	eb42 0303 	adc.w	r3, r2, r3
 80063c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80063d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063e0:	4649      	mov	r1, r9
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	4641      	mov	r1, r8
 80063e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ea:	4641      	mov	r1, r8
 80063ec:	008a      	lsls	r2, r1, #2
 80063ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80063f2:	f7fa fc59 	bl	8000ca8 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <UART_SetConfig+0x4e4>)
 80063fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	2164      	movs	r1, #100	@ 0x64
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	3332      	adds	r3, #50	@ 0x32
 800640e:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <UART_SetConfig+0x4e4>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 020f 	and.w	r2, r3, #15
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4422      	add	r2, r4
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800642a:	46bd      	mov	sp, r7
 800642c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006430:	51eb851f 	.word	0x51eb851f

08006434 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006438:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <SysTick_Handler+0x1c>)
 800643a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800643c:	f001 fc52 	bl	8007ce4 <xTaskGetSchedulerState>
 8006440:	4603      	mov	r3, r0
 8006442:	2b01      	cmp	r3, #1
 8006444:	d001      	beq.n	800644a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006446:	f002 fa47 	bl	80088d8 <xPortSysTickHandler>
  }
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	e000e010 	.word	0xe000e010

08006454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4a07      	ldr	r2, [pc, #28]	@ (8006480 <vApplicationGetIdleTaskMemory+0x2c>)
 8006464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a06      	ldr	r2, [pc, #24]	@ (8006484 <vApplicationGetIdleTaskMemory+0x30>)
 800646a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2280      	movs	r2, #128	@ 0x80
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000858 	.word	0x20000858
 8006484:	200008b4 	.word	0x200008b4

08006488 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a07      	ldr	r2, [pc, #28]	@ (80064b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006498:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4a06      	ldr	r2, [pc, #24]	@ (80064b8 <vApplicationGetTimerTaskMemory+0x30>)
 800649e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064a6:	601a      	str	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	20000ab4 	.word	0x20000ab4
 80064b8:	20000b10 	.word	0x20000b10

080064bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f103 0208 	add.w	r2, r3, #8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295
 80064d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f103 0208 	add.w	r2, r3, #8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f103 0208 	add.w	r2, r3, #8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d103      	bne.n	800657e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	e00c      	b.n	8006598 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3308      	adds	r3, #8
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e002      	b.n	800658c <vListInsert+0x2e>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	429a      	cmp	r2, r3
 8006596:	d2f6      	bcs.n	8006586 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]
}
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6892      	ldr	r2, [r2, #8]
 80065e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6852      	ldr	r2, [r2, #4]
 80065f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d103      	bne.n	8006604 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006650:	f002 f8b2 	bl	80087b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665c:	68f9      	ldr	r1, [r7, #12]
 800665e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	3b01      	subs	r3, #1
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	441a      	add	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	22ff      	movs	r2, #255	@ 0xff
 8006694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	22ff      	movs	r2, #255	@ 0xff
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d114      	bne.n	80066d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01a      	beq.n	80066e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3310      	adds	r3, #16
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 f956 	bl	8007964 <xTaskRemoveFromEventList>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d012      	beq.n	80066e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <xQueueGenericReset+0xd0>)
 80066c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	e009      	b.n	80066e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3310      	adds	r3, #16
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fef1 	bl	80064bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3324      	adds	r3, #36	@ 0x24
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff feec 	bl	80064bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066e4:	f002 f89a 	bl	800881c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066e8:	2301      	movs	r3, #1
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	e000ed04 	.word	0xe000ed04

080066f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08e      	sub	sp, #56	@ 0x38
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10b      	bne.n	8006742 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <xQueueGenericCreateStatic+0x56>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <xQueueGenericCreateStatic+0x5a>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <xQueueGenericCreateStatic+0x5c>
 8006752:	2300      	movs	r3, #0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10b      	bne.n	8006770 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	623b      	str	r3, [r7, #32]
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <xQueueGenericCreateStatic+0x84>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <xQueueGenericCreateStatic+0x88>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <xQueueGenericCreateStatic+0x8a>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	61fb      	str	r3, [r7, #28]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800679e:	2350      	movs	r3, #80	@ 0x50
 80067a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b50      	cmp	r3, #80	@ 0x50
 80067a6:	d00b      	beq.n	80067c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	61bb      	str	r3, [r7, #24]
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	e7fd      	b.n	80067bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00d      	beq.n	80067e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 f840 	bl	8006868 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3730      	adds	r7, #48	@ 0x30
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b08a      	sub	sp, #40	@ 0x28
 80067f6:	af02      	add	r7, sp, #8
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	4613      	mov	r3, r2
 80067fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	613b      	str	r3, [r7, #16]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	3350      	adds	r3, #80	@ 0x50
 800682c:	4618      	mov	r0, r3
 800682e:	f002 f8e5 	bl	80089fc <pvPortMalloc>
 8006832:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d011      	beq.n	800685e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	3350      	adds	r3, #80	@ 0x50
 8006842:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800684c:	79fa      	ldrb	r2, [r7, #7]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f805 	bl	8006868 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800685e:	69bb      	ldr	r3, [r7, #24]
	}
 8006860:	4618      	mov	r0, r3
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e002      	b.n	800688a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006896:	2101      	movs	r1, #1
 8006898:	69b8      	ldr	r0, [r7, #24]
 800689a:	f7ff fec3 	bl	8006624 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08e      	sub	sp, #56	@ 0x38
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068be:	2300      	movs	r3, #0
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xQueueGenericSend+0x34>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <xQueueGenericSend+0x42>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <xQueueGenericSend+0x46>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericSend+0x48>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xQueueGenericSend+0x64>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d103      	bne.n	8006922 <xQueueGenericSend+0x72>
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <xQueueGenericSend+0x76>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueGenericSend+0x78>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <xQueueGenericSend+0x94>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	623b      	str	r3, [r7, #32]
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006944:	f001 f9ce 	bl	8007ce4 <xTaskGetSchedulerState>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <xQueueGenericSend+0xa4>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <xQueueGenericSend+0xa8>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <xQueueGenericSend+0xaa>
 8006958:	2300      	movs	r3, #0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <xQueueGenericSend+0xc6>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	61fb      	str	r3, [r7, #28]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006976:	f001 ff1f 	bl	80087b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006982:	429a      	cmp	r2, r3
 8006984:	d302      	bcc.n	800698c <xQueueGenericSend+0xdc>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d129      	bne.n	80069e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006992:	f000 fa0f 	bl	8006db4 <prvCopyDataToQueue>
 8006996:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	d010      	beq.n	80069c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	3324      	adds	r3, #36	@ 0x24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 ffdd 	bl	8007964 <xTaskRemoveFromEventList>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d013      	beq.n	80069d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069b0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab0 <xQueueGenericSend+0x200>)
 80069b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	e00a      	b.n	80069d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069c8:	4b39      	ldr	r3, [pc, #228]	@ (8006ab0 <xQueueGenericSend+0x200>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069d8:	f001 ff20 	bl	800881c <vPortExitCritical>
				return pdPASS;
 80069dc:	2301      	movs	r3, #1
 80069de:	e063      	b.n	8006aa8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069e6:	f001 ff19 	bl	800881c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e05c      	b.n	8006aa8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069f4:	f107 0314 	add.w	r3, r7, #20
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f817 	bl	8007a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069fe:	2301      	movs	r3, #1
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a02:	f001 ff0b 	bl	800881c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a06:	f000 fd87 	bl	8007518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a0a:	f001 fed5 	bl	80087b8 <vPortEnterCritical>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d103      	bne.n	8006a24 <xQueueGenericSend+0x174>
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a2a:	b25b      	sxtb	r3, r3
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d103      	bne.n	8006a3a <xQueueGenericSend+0x18a>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a3a:	f001 feef 	bl	800881c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a3e:	1d3a      	adds	r2, r7, #4
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 f806 	bl	8007a58 <xTaskCheckForTimeOut>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d124      	bne.n	8006a9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a54:	f000 faa6 	bl	8006fa4 <prvIsQueueFull>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	3310      	adds	r3, #16
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 ff2a 	bl	80078c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a6e:	f000 fa31 	bl	8006ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a72:	f000 fd5f 	bl	8007534 <xTaskResumeAll>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f47f af7c 	bne.w	8006976 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab0 <xQueueGenericSend+0x200>)
 8006a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	e772      	b.n	8006976 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a92:	f000 fa1f 	bl	8006ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a96:	f000 fd4d 	bl	8007534 <xTaskResumeAll>
 8006a9a:	e76c      	b.n	8006976 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a9e:	f000 fa19 	bl	8006ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aa2:	f000 fd47 	bl	8007534 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006aa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3738      	adds	r7, #56	@ 0x38
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b090      	sub	sp, #64	@ 0x40
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <xQueueGenericSendFromISR+0x3e>
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <xQueueGenericSendFromISR+0x42>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <xQueueGenericSendFromISR+0x44>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	e7fd      	b.n	8006b10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d103      	bne.n	8006b22 <xQueueGenericSendFromISR+0x6e>
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d101      	bne.n	8006b26 <xQueueGenericSendFromISR+0x72>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <xQueueGenericSendFromISR+0x74>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	623b      	str	r3, [r7, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	bf00      	nop
 8006b42:	e7fd      	b.n	8006b40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b44:	f001 ff18 	bl	8008978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b48:	f3ef 8211 	mrs	r2, BASEPRI
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	61fa      	str	r2, [r7, #28]
 8006b5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d302      	bcc.n	8006b76 <xQueueGenericSendFromISR+0xc2>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d12f      	bne.n	8006bd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b8c:	f000 f912 	bl	8006db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d112      	bne.n	8006bc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d016      	beq.n	8006bd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	3324      	adds	r3, #36	@ 0x24
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fedc 	bl	8007964 <xTaskRemoveFromEventList>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e007      	b.n	8006bd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	b25a      	sxtb	r2, r3
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006bd4:	e001      	b.n	8006bda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006be4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3740      	adds	r7, #64	@ 0x40
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08c      	sub	sp, #48	@ 0x30
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <xQueueReceive+0x32>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	623b      	str	r3, [r7, #32]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <xQueueReceive+0x40>
 8006c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <xQueueReceive+0x44>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <xQueueReceive+0x46>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <xQueueReceive+0x62>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	61fb      	str	r3, [r7, #28]
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	e7fd      	b.n	8006c4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c52:	f001 f847 	bl	8007ce4 <xTaskGetSchedulerState>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <xQueueReceive+0x72>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <xQueueReceive+0x76>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <xQueueReceive+0x78>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10b      	bne.n	8006c84 <xQueueReceive+0x94>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	61bb      	str	r3, [r7, #24]
}
 8006c7e:	bf00      	nop
 8006c80:	bf00      	nop
 8006c82:	e7fd      	b.n	8006c80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c84:	f001 fd98 	bl	80087b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01f      	beq.n	8006cd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c98:	f000 f8f6 	bl	8006e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	1e5a      	subs	r2, r3, #1
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00f      	beq.n	8006ccc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	3310      	adds	r3, #16
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fe57 	bl	8007964 <xTaskRemoveFromEventList>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cbc:	4b3c      	ldr	r3, [pc, #240]	@ (8006db0 <xQueueReceive+0x1c0>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ccc:	f001 fda6 	bl	800881c <vPortExitCritical>
				return pdPASS;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e069      	b.n	8006da8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cda:	f001 fd9f 	bl	800881c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e062      	b.n	8006da8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ce8:	f107 0310 	add.w	r3, r7, #16
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fe9d 	bl	8007a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cf6:	f001 fd91 	bl	800881c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cfa:	f000 fc0d 	bl	8007518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cfe:	f001 fd5b 	bl	80087b8 <vPortEnterCritical>
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d103      	bne.n	8006d18 <xQueueReceive+0x128>
 8006d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d103      	bne.n	8006d2e <xQueueReceive+0x13e>
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d2e:	f001 fd75 	bl	800881c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d32:	1d3a      	adds	r2, r7, #4
 8006d34:	f107 0310 	add.w	r3, r7, #16
 8006d38:	4611      	mov	r1, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fe8c 	bl	8007a58 <xTaskCheckForTimeOut>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d123      	bne.n	8006d8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d48:	f000 f916 	bl	8006f78 <prvIsQueueEmpty>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d017      	beq.n	8006d82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	3324      	adds	r3, #36	@ 0x24
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fdb0 	bl	80078c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d62:	f000 f8b7 	bl	8006ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d66:	f000 fbe5 	bl	8007534 <xTaskResumeAll>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d189      	bne.n	8006c84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d70:	4b0f      	ldr	r3, [pc, #60]	@ (8006db0 <xQueueReceive+0x1c0>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	e780      	b.n	8006c84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d84:	f000 f8a6 	bl	8006ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d88:	f000 fbd4 	bl	8007534 <xTaskResumeAll>
 8006d8c:	e77a      	b.n	8006c84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d90:	f000 f8a0 	bl	8006ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d94:	f000 fbce 	bl	8007534 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d9a:	f000 f8ed 	bl	8006f78 <prvIsQueueEmpty>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f43f af6f 	beq.w	8006c84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006da6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3730      	adds	r7, #48	@ 0x30
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	e000ed04 	.word	0xe000ed04

08006db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10d      	bne.n	8006dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d14d      	bne.n	8006e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 ff9e 	bl	8007d20 <xTaskPriorityDisinherit>
 8006de4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	e043      	b.n	8006e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d119      	bne.n	8006e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6858      	ldr	r0, [r3, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	f003 f959 	bl	800a0b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d32b      	bcc.n	8006e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	e026      	b.n	8006e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68d8      	ldr	r0, [r3, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	461a      	mov	r2, r3
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	f003 f93f 	bl	800a0b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	425b      	negs	r3, r3
 8006e42:	441a      	add	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d207      	bcs.n	8006e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	425b      	negs	r3, r3
 8006e5e:	441a      	add	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d105      	bne.n	8006e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e7e:	697b      	ldr	r3, [r7, #20]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d018      	beq.n	8006ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	441a      	add	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d303      	bcc.n	8006ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68d9      	ldr	r1, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6838      	ldr	r0, [r7, #0]
 8006ec8:	f003 f8f5 	bl	800a0b6 <memcpy>
	}
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006edc:	f001 fc6c 	bl	80087b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ee8:	e011      	b.n	8006f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d012      	beq.n	8006f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3324      	adds	r3, #36	@ 0x24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fd34 	bl	8007964 <xTaskRemoveFromEventList>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f02:	f000 fe0d 	bl	8007b20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dce9      	bgt.n	8006eea <prvUnlockQueue+0x16>
 8006f16:	e000      	b.n	8006f1a <prvUnlockQueue+0x46>
					break;
 8006f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	22ff      	movs	r2, #255	@ 0xff
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f22:	f001 fc7b 	bl	800881c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f26:	f001 fc47 	bl	80087b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f32:	e011      	b.n	8006f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d012      	beq.n	8006f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3310      	adds	r3, #16
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fd0f 	bl	8007964 <xTaskRemoveFromEventList>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f4c:	f000 fde8 	bl	8007b20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	dce9      	bgt.n	8006f34 <prvUnlockQueue+0x60>
 8006f60:	e000      	b.n	8006f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	22ff      	movs	r2, #255	@ 0xff
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f6c:	f001 fc56 	bl	800881c <vPortExitCritical>
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f80:	f001 fc1a 	bl	80087b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	e001      	b.n	8006f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f96:	f001 fc41 	bl	800881c <vPortExitCritical>

	return xReturn;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fac:	f001 fc04 	bl	80087b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d102      	bne.n	8006fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e001      	b.n	8006fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fc6:	f001 fc29 	bl	800881c <vPortExitCritical>

	return xReturn;
 8006fca:	68fb      	ldr	r3, [r7, #12]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e014      	b.n	800700e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8007024 <vQueueAddToRegistry+0x50>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ff0:	490c      	ldr	r1, [pc, #48]	@ (8007024 <vQueueAddToRegistry+0x50>)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8007024 <vQueueAddToRegistry+0x50>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007006:	e006      	b.n	8007016 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b07      	cmp	r3, #7
 8007012:	d9e7      	bls.n	8006fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000f10 	.word	0x20000f10

08007028 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007038:	f001 fbbe 	bl	80087b8 <vPortEnterCritical>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007042:	b25b      	sxtb	r3, r3
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d103      	bne.n	8007052 <vQueueWaitForMessageRestricted+0x2a>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007058:	b25b      	sxtb	r3, r3
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d103      	bne.n	8007068 <vQueueWaitForMessageRestricted+0x40>
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007068:	f001 fbd8 	bl	800881c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	3324      	adds	r3, #36	@ 0x24
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fc45 	bl	800790c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007082:	6978      	ldr	r0, [r7, #20]
 8007084:	f7ff ff26 	bl	8006ed4 <prvUnlockQueue>
	}
 8007088:	bf00      	nop
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08e      	sub	sp, #56	@ 0x38
 8007094:	af04      	add	r7, sp, #16
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800709e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	623b      	str	r3, [r7, #32]
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <xTaskCreateStatic+0x4a>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	61fb      	str	r3, [r7, #28]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070da:	235c      	movs	r3, #92	@ 0x5c
 80070dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80070e2:	d00b      	beq.n	80070fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	61bb      	str	r3, [r7, #24]
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01e      	beq.n	8007142 <xTaskCreateStatic+0xb2>
 8007104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01b      	beq.n	8007142 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	2202      	movs	r2, #2
 8007118:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800711c:	2300      	movs	r3, #0
 800711e:	9303      	str	r3, [sp, #12]
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	9302      	str	r3, [sp, #8]
 8007124:	f107 0314 	add.w	r3, r7, #20
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f850 	bl	80071da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800713a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800713c:	f000 f8de 	bl	80072fc <prvAddNewTaskToReadyList>
 8007140:	e001      	b.n	8007146 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007146:	697b      	ldr	r3, [r7, #20]
	}
 8007148:	4618      	mov	r0, r3
 800714a:	3728      	adds	r7, #40	@ 0x28
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08c      	sub	sp, #48	@ 0x30
 8007154:	af04      	add	r7, sp, #16
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007160:	88fb      	ldrh	r3, [r7, #6]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4618      	mov	r0, r3
 8007166:	f001 fc49 	bl	80089fc <pvPortMalloc>
 800716a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00e      	beq.n	8007190 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007172:	205c      	movs	r0, #92	@ 0x5c
 8007174:	f001 fc42 	bl	80089fc <pvPortMalloc>
 8007178:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	631a      	str	r2, [r3, #48]	@ 0x30
 8007186:	e005      	b.n	8007194 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007188:	6978      	ldr	r0, [r7, #20]
 800718a:	f001 fd05 	bl	8008b98 <vPortFree>
 800718e:	e001      	b.n	8007194 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d017      	beq.n	80071ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071a2:	88fa      	ldrh	r2, [r7, #6]
 80071a4:	2300      	movs	r3, #0
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	9302      	str	r3, [sp, #8]
 80071ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f80e 	bl	80071da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071be:	69f8      	ldr	r0, [r7, #28]
 80071c0:	f000 f89c 	bl	80072fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071c4:	2301      	movs	r3, #1
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	e002      	b.n	80071d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295
 80071ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071d0:	69bb      	ldr	r3, [r7, #24]
	}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b088      	sub	sp, #32
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	461a      	mov	r2, r3
 80071f2:	21a5      	movs	r1, #165	@ 0xa5
 80071f4:	f002 fee0 	bl	8009fb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007202:	3b01      	subs	r3, #1
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	617b      	str	r3, [r7, #20]
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01f      	beq.n	800727a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800723a:	2300      	movs	r3, #0
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e012      	b.n	8007266 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	7819      	ldrb	r1, [r3, #0]
 8007248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	3334      	adds	r3, #52	@ 0x34
 8007250:	460a      	mov	r2, r1
 8007252:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	4413      	add	r3, r2
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d006      	beq.n	800726e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	3301      	adds	r3, #1
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b0f      	cmp	r3, #15
 800726a:	d9e9      	bls.n	8007240 <prvInitialiseNewTask+0x66>
 800726c:	e000      	b.n	8007270 <prvInitialiseNewTask+0x96>
			{
				break;
 800726e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007278:	e003      	b.n	8007282 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	2b37      	cmp	r3, #55	@ 0x37
 8007286:	d901      	bls.n	800728c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007288:	2337      	movs	r3, #55	@ 0x37
 800728a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007290:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007296:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	2200      	movs	r2, #0
 800729c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	3304      	adds	r3, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff f92a 	bl	80064fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	3318      	adds	r3, #24
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff f925 	bl	80064fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	2200      	movs	r2, #0
 80072cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	69b8      	ldr	r0, [r7, #24]
 80072dc:	f001 f93e 	bl	800855c <pxPortInitialiseStack>
 80072e0:	4602      	mov	r2, r0
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072f2:	bf00      	nop
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007304:	f001 fa58 	bl	80087b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007308:	4b2d      	ldr	r3, [pc, #180]	@ (80073c0 <prvAddNewTaskToReadyList+0xc4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3301      	adds	r3, #1
 800730e:	4a2c      	ldr	r2, [pc, #176]	@ (80073c0 <prvAddNewTaskToReadyList+0xc4>)
 8007310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007312:	4b2c      	ldr	r3, [pc, #176]	@ (80073c4 <prvAddNewTaskToReadyList+0xc8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800731a:	4a2a      	ldr	r2, [pc, #168]	@ (80073c4 <prvAddNewTaskToReadyList+0xc8>)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007320:	4b27      	ldr	r3, [pc, #156]	@ (80073c0 <prvAddNewTaskToReadyList+0xc4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d110      	bne.n	800734a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007328:	f000 fc1e 	bl	8007b68 <prvInitialiseTaskLists>
 800732c:	e00d      	b.n	800734a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800732e:	4b26      	ldr	r3, [pc, #152]	@ (80073c8 <prvAddNewTaskToReadyList+0xcc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007336:	4b23      	ldr	r3, [pc, #140]	@ (80073c4 <prvAddNewTaskToReadyList+0xc8>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	429a      	cmp	r2, r3
 8007342:	d802      	bhi.n	800734a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007344:	4a1f      	ldr	r2, [pc, #124]	@ (80073c4 <prvAddNewTaskToReadyList+0xc8>)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800734a:	4b20      	ldr	r3, [pc, #128]	@ (80073cc <prvAddNewTaskToReadyList+0xd0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3301      	adds	r3, #1
 8007350:	4a1e      	ldr	r2, [pc, #120]	@ (80073cc <prvAddNewTaskToReadyList+0xd0>)
 8007352:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007354:	4b1d      	ldr	r3, [pc, #116]	@ (80073cc <prvAddNewTaskToReadyList+0xd0>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007360:	4b1b      	ldr	r3, [pc, #108]	@ (80073d0 <prvAddNewTaskToReadyList+0xd4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d903      	bls.n	8007370 <prvAddNewTaskToReadyList+0x74>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	4a18      	ldr	r2, [pc, #96]	@ (80073d0 <prvAddNewTaskToReadyList+0xd4>)
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4a15      	ldr	r2, [pc, #84]	@ (80073d4 <prvAddNewTaskToReadyList+0xd8>)
 800737e:	441a      	add	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3304      	adds	r3, #4
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7ff f8c5 	bl	8006516 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800738c:	f001 fa46 	bl	800881c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007390:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <prvAddNewTaskToReadyList+0xcc>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00e      	beq.n	80073b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007398:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <prvAddNewTaskToReadyList+0xc8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d207      	bcs.n	80073b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <prvAddNewTaskToReadyList+0xdc>)
 80073a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20001424 	.word	0x20001424
 80073c4:	20000f50 	.word	0x20000f50
 80073c8:	20001430 	.word	0x20001430
 80073cc:	20001440 	.word	0x20001440
 80073d0:	2000142c 	.word	0x2000142c
 80073d4:	20000f54 	.word	0x20000f54
 80073d8:	e000ed04 	.word	0xe000ed04

080073dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d018      	beq.n	8007420 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073ee:	4b14      	ldr	r3, [pc, #80]	@ (8007440 <vTaskDelay+0x64>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <vTaskDelay+0x32>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	60bb      	str	r3, [r7, #8]
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	e7fd      	b.n	800740a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800740e:	f000 f883 	bl	8007518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007412:	2100      	movs	r1, #0
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fcf3 	bl	8007e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800741a:	f000 f88b 	bl	8007534 <xTaskResumeAll>
 800741e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d107      	bne.n	8007436 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007426:	4b07      	ldr	r3, [pc, #28]	@ (8007444 <vTaskDelay+0x68>)
 8007428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	2000144c 	.word	0x2000144c
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	@ 0x28
 800744c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007456:	463a      	mov	r2, r7
 8007458:	1d39      	adds	r1, r7, #4
 800745a:	f107 0308 	add.w	r3, r7, #8
 800745e:	4618      	mov	r0, r3
 8007460:	f7fe fff8 	bl	8006454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	9202      	str	r2, [sp, #8]
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	2300      	movs	r3, #0
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	2300      	movs	r3, #0
 8007474:	460a      	mov	r2, r1
 8007476:	4922      	ldr	r1, [pc, #136]	@ (8007500 <vTaskStartScheduler+0xb8>)
 8007478:	4822      	ldr	r0, [pc, #136]	@ (8007504 <vTaskStartScheduler+0xbc>)
 800747a:	f7ff fe09 	bl	8007090 <xTaskCreateStatic>
 800747e:	4603      	mov	r3, r0
 8007480:	4a21      	ldr	r2, [pc, #132]	@ (8007508 <vTaskStartScheduler+0xc0>)
 8007482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007484:	4b20      	ldr	r3, [pc, #128]	@ (8007508 <vTaskStartScheduler+0xc0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800748c:	2301      	movs	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e001      	b.n	8007496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d102      	bne.n	80074a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800749c:	f000 fd04 	bl	8007ea8 <xTimerCreateTimerTask>
 80074a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d116      	bne.n	80074d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	613b      	str	r3, [r7, #16]
}
 80074ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074bc:	4b13      	ldr	r3, [pc, #76]	@ (800750c <vTaskStartScheduler+0xc4>)
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074c4:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <vTaskStartScheduler+0xc8>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074ca:	4b12      	ldr	r3, [pc, #72]	@ (8007514 <vTaskStartScheduler+0xcc>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074d0:	f001 f8ce 	bl	8008670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074d4:	e00f      	b.n	80074f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d10b      	bne.n	80074f6 <vTaskStartScheduler+0xae>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	60fb      	str	r3, [r7, #12]
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	e7fd      	b.n	80074f2 <vTaskStartScheduler+0xaa>
}
 80074f6:	bf00      	nop
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	0800dea0 	.word	0x0800dea0
 8007504:	08007b39 	.word	0x08007b39
 8007508:	20001448 	.word	0x20001448
 800750c:	20001444 	.word	0x20001444
 8007510:	20001430 	.word	0x20001430
 8007514:	20001428 	.word	0x20001428

08007518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800751c:	4b04      	ldr	r3, [pc, #16]	@ (8007530 <vTaskSuspendAll+0x18>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	4a03      	ldr	r2, [pc, #12]	@ (8007530 <vTaskSuspendAll+0x18>)
 8007524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007526:	bf00      	nop
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	2000144c 	.word	0x2000144c

08007534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007542:	4b42      	ldr	r3, [pc, #264]	@ (800764c <xTaskResumeAll+0x118>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <xTaskResumeAll+0x2e>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	603b      	str	r3, [r7, #0]
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	e7fd      	b.n	800755e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007562:	f001 f929 	bl	80087b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007566:	4b39      	ldr	r3, [pc, #228]	@ (800764c <xTaskResumeAll+0x118>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	4a37      	ldr	r2, [pc, #220]	@ (800764c <xTaskResumeAll+0x118>)
 800756e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007570:	4b36      	ldr	r3, [pc, #216]	@ (800764c <xTaskResumeAll+0x118>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d162      	bne.n	800763e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007578:	4b35      	ldr	r3, [pc, #212]	@ (8007650 <xTaskResumeAll+0x11c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d05e      	beq.n	800763e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007580:	e02f      	b.n	80075e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007582:	4b34      	ldr	r3, [pc, #208]	@ (8007654 <xTaskResumeAll+0x120>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3318      	adds	r3, #24
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff f81e 	bl	80065d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff f819 	bl	80065d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007658 <xTaskResumeAll+0x124>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d903      	bls.n	80075b2 <xTaskResumeAll+0x7e>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007658 <xTaskResumeAll+0x124>)
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a27      	ldr	r2, [pc, #156]	@ (800765c <xTaskResumeAll+0x128>)
 80075c0:	441a      	add	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f7fe ffa4 	bl	8006516 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d2:	4b23      	ldr	r3, [pc, #140]	@ (8007660 <xTaskResumeAll+0x12c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d302      	bcc.n	80075e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80075dc:	4b21      	ldr	r3, [pc, #132]	@ (8007664 <xTaskResumeAll+0x130>)
 80075de:	2201      	movs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007654 <xTaskResumeAll+0x120>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1cb      	bne.n	8007582 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075f0:	f000 fb58 	bl	8007ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007668 <xTaskResumeAll+0x134>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d010      	beq.n	8007622 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007600:	f000 f846 	bl	8007690 <xTaskIncrementTick>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800760a:	4b16      	ldr	r3, [pc, #88]	@ (8007664 <xTaskResumeAll+0x130>)
 800760c:	2201      	movs	r2, #1
 800760e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3b01      	subs	r3, #1
 8007614:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f1      	bne.n	8007600 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800761c:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <xTaskResumeAll+0x134>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007622:	4b10      	ldr	r3, [pc, #64]	@ (8007664 <xTaskResumeAll+0x130>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800762a:	2301      	movs	r3, #1
 800762c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800762e:	4b0f      	ldr	r3, [pc, #60]	@ (800766c <xTaskResumeAll+0x138>)
 8007630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800763e:	f001 f8ed 	bl	800881c <vPortExitCritical>

	return xAlreadyYielded;
 8007642:	68bb      	ldr	r3, [r7, #8]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	2000144c 	.word	0x2000144c
 8007650:	20001424 	.word	0x20001424
 8007654:	200013e4 	.word	0x200013e4
 8007658:	2000142c 	.word	0x2000142c
 800765c:	20000f54 	.word	0x20000f54
 8007660:	20000f50 	.word	0x20000f50
 8007664:	20001438 	.word	0x20001438
 8007668:	20001434 	.word	0x20001434
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007676:	4b05      	ldr	r3, [pc, #20]	@ (800768c <xTaskGetTickCount+0x1c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800767c:	687b      	ldr	r3, [r7, #4]
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20001428 	.word	0x20001428

08007690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800769a:	4b4f      	ldr	r3, [pc, #316]	@ (80077d8 <xTaskIncrementTick+0x148>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f040 8090 	bne.w	80077c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076a4:	4b4d      	ldr	r3, [pc, #308]	@ (80077dc <xTaskIncrementTick+0x14c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076ac:	4a4b      	ldr	r2, [pc, #300]	@ (80077dc <xTaskIncrementTick+0x14c>)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d121      	bne.n	80076fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076b8:	4b49      	ldr	r3, [pc, #292]	@ (80077e0 <xTaskIncrementTick+0x150>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <xTaskIncrementTick+0x4a>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	603b      	str	r3, [r7, #0]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xTaskIncrementTick+0x46>
 80076da:	4b41      	ldr	r3, [pc, #260]	@ (80077e0 <xTaskIncrementTick+0x150>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	4b40      	ldr	r3, [pc, #256]	@ (80077e4 <xTaskIncrementTick+0x154>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a3e      	ldr	r2, [pc, #248]	@ (80077e0 <xTaskIncrementTick+0x150>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	4a3e      	ldr	r2, [pc, #248]	@ (80077e4 <xTaskIncrementTick+0x154>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	4b3e      	ldr	r3, [pc, #248]	@ (80077e8 <xTaskIncrementTick+0x158>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a3c      	ldr	r2, [pc, #240]	@ (80077e8 <xTaskIncrementTick+0x158>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	f000 fad4 	bl	8007ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076fc:	4b3b      	ldr	r3, [pc, #236]	@ (80077ec <xTaskIncrementTick+0x15c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	429a      	cmp	r2, r3
 8007704:	d349      	bcc.n	800779a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007706:	4b36      	ldr	r3, [pc, #216]	@ (80077e0 <xTaskIncrementTick+0x150>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007710:	4b36      	ldr	r3, [pc, #216]	@ (80077ec <xTaskIncrementTick+0x15c>)
 8007712:	f04f 32ff 	mov.w	r2, #4294967295
 8007716:	601a      	str	r2, [r3, #0]
					break;
 8007718:	e03f      	b.n	800779a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771a:	4b31      	ldr	r3, [pc, #196]	@ (80077e0 <xTaskIncrementTick+0x150>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	429a      	cmp	r2, r3
 8007730:	d203      	bcs.n	800773a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007732:	4a2e      	ldr	r2, [pc, #184]	@ (80077ec <xTaskIncrementTick+0x15c>)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007738:	e02f      	b.n	800779a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	3304      	adds	r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe ff46 	bl	80065d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	3318      	adds	r3, #24
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe ff3d 	bl	80065d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775a:	4b25      	ldr	r3, [pc, #148]	@ (80077f0 <xTaskIncrementTick+0x160>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d903      	bls.n	800776a <xTaskIncrementTick+0xda>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	4a22      	ldr	r2, [pc, #136]	@ (80077f0 <xTaskIncrementTick+0x160>)
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4a1f      	ldr	r2, [pc, #124]	@ (80077f4 <xTaskIncrementTick+0x164>)
 8007778:	441a      	add	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3304      	adds	r3, #4
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f7fe fec8 	bl	8006516 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778a:	4b1b      	ldr	r3, [pc, #108]	@ (80077f8 <xTaskIncrementTick+0x168>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	429a      	cmp	r2, r3
 8007792:	d3b8      	bcc.n	8007706 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007798:	e7b5      	b.n	8007706 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800779a:	4b17      	ldr	r3, [pc, #92]	@ (80077f8 <xTaskIncrementTick+0x168>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a0:	4914      	ldr	r1, [pc, #80]	@ (80077f4 <xTaskIncrementTick+0x164>)
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d901      	bls.n	80077b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80077b2:	2301      	movs	r3, #1
 80077b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077b6:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <xTaskIncrementTick+0x16c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80077be:	2301      	movs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	e004      	b.n	80077ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007800 <xTaskIncrementTick+0x170>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007800 <xTaskIncrementTick+0x170>)
 80077cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077ce:	697b      	ldr	r3, [r7, #20]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	2000144c 	.word	0x2000144c
 80077dc:	20001428 	.word	0x20001428
 80077e0:	200013dc 	.word	0x200013dc
 80077e4:	200013e0 	.word	0x200013e0
 80077e8:	2000143c 	.word	0x2000143c
 80077ec:	20001444 	.word	0x20001444
 80077f0:	2000142c 	.word	0x2000142c
 80077f4:	20000f54 	.word	0x20000f54
 80077f8:	20000f50 	.word	0x20000f50
 80077fc:	20001438 	.word	0x20001438
 8007800:	20001434 	.word	0x20001434

08007804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800780a:	4b28      	ldr	r3, [pc, #160]	@ (80078ac <vTaskSwitchContext+0xa8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007812:	4b27      	ldr	r3, [pc, #156]	@ (80078b0 <vTaskSwitchContext+0xac>)
 8007814:	2201      	movs	r2, #1
 8007816:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007818:	e042      	b.n	80078a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800781a:	4b25      	ldr	r3, [pc, #148]	@ (80078b0 <vTaskSwitchContext+0xac>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007820:	4b24      	ldr	r3, [pc, #144]	@ (80078b4 <vTaskSwitchContext+0xb0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	e011      	b.n	800784c <vTaskSwitchContext+0x48>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10b      	bne.n	8007846 <vTaskSwitchContext+0x42>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <vTaskSwitchContext+0x3e>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b01      	subs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	491a      	ldr	r1, [pc, #104]	@ (80078b8 <vTaskSwitchContext+0xb4>)
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0e3      	beq.n	8007828 <vTaskSwitchContext+0x24>
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4a13      	ldr	r2, [pc, #76]	@ (80078b8 <vTaskSwitchContext+0xb4>)
 800786c:	4413      	add	r3, r2
 800786e:	60bb      	str	r3, [r7, #8]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	3308      	adds	r3, #8
 8007882:	429a      	cmp	r2, r3
 8007884:	d104      	bne.n	8007890 <vTaskSwitchContext+0x8c>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	605a      	str	r2, [r3, #4]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	4a09      	ldr	r2, [pc, #36]	@ (80078bc <vTaskSwitchContext+0xb8>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	4a06      	ldr	r2, [pc, #24]	@ (80078b4 <vTaskSwitchContext+0xb0>)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6013      	str	r3, [r2, #0]
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	2000144c 	.word	0x2000144c
 80078b0:	20001438 	.word	0x20001438
 80078b4:	2000142c 	.word	0x2000142c
 80078b8:	20000f54 	.word	0x20000f54
 80078bc:	20000f50 	.word	0x20000f50

080078c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10b      	bne.n	80078e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60fb      	str	r3, [r7, #12]
}
 80078e2:	bf00      	nop
 80078e4:	bf00      	nop
 80078e6:	e7fd      	b.n	80078e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078e8:	4b07      	ldr	r3, [pc, #28]	@ (8007908 <vTaskPlaceOnEventList+0x48>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3318      	adds	r3, #24
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fe fe34 	bl	800655e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078f6:	2101      	movs	r1, #1
 80078f8:	6838      	ldr	r0, [r7, #0]
 80078fa:	f000 fa81 	bl	8007e00 <prvAddCurrentTaskToDelayedList>
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000f50 	.word	0x20000f50

0800790c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	617b      	str	r3, [r7, #20]
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	e7fd      	b.n	8007932 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007936:	4b0a      	ldr	r3, [pc, #40]	@ (8007960 <vTaskPlaceOnEventListRestricted+0x54>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3318      	adds	r3, #24
 800793c:	4619      	mov	r1, r3
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7fe fde9 	bl	8006516 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	68b8      	ldr	r0, [r7, #8]
 8007954:	f000 fa54 	bl	8007e00 <prvAddCurrentTaskToDelayedList>
	}
 8007958:	bf00      	nop
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000f50 	.word	0x20000f50

08007964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10b      	bne.n	8007992 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	60fb      	str	r3, [r7, #12]
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	e7fd      	b.n	800798e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	3318      	adds	r3, #24
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fe1a 	bl	80065d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800799c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a14 <xTaskRemoveFromEventList+0xb0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d11d      	bne.n	80079e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	3304      	adds	r3, #4
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fe11 	bl	80065d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b2:	4b19      	ldr	r3, [pc, #100]	@ (8007a18 <xTaskRemoveFromEventList+0xb4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d903      	bls.n	80079c2 <xTaskRemoveFromEventList+0x5e>
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	4a16      	ldr	r2, [pc, #88]	@ (8007a18 <xTaskRemoveFromEventList+0xb4>)
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4a13      	ldr	r2, [pc, #76]	@ (8007a1c <xTaskRemoveFromEventList+0xb8>)
 80079d0:	441a      	add	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	4610      	mov	r0, r2
 80079da:	f7fe fd9c 	bl	8006516 <vListInsertEnd>
 80079de:	e005      	b.n	80079ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	3318      	adds	r3, #24
 80079e4:	4619      	mov	r1, r3
 80079e6:	480e      	ldr	r0, [pc, #56]	@ (8007a20 <xTaskRemoveFromEventList+0xbc>)
 80079e8:	f7fe fd95 	bl	8006516 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <xTaskRemoveFromEventList+0xc0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d905      	bls.n	8007a06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007a28 <xTaskRemoveFromEventList+0xc4>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	e001      	b.n	8007a0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a0a:	697b      	ldr	r3, [r7, #20]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	2000144c 	.word	0x2000144c
 8007a18:	2000142c 	.word	0x2000142c
 8007a1c:	20000f54 	.word	0x20000f54
 8007a20:	200013e4 	.word	0x200013e4
 8007a24:	20000f50 	.word	0x20000f50
 8007a28:	20001438 	.word	0x20001438

08007a2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a34:	4b06      	ldr	r3, [pc, #24]	@ (8007a50 <vTaskInternalSetTimeOutState+0x24>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a3c:	4b05      	ldr	r3, [pc, #20]	@ (8007a54 <vTaskInternalSetTimeOutState+0x28>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	605a      	str	r2, [r3, #4]
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	2000143c 	.word	0x2000143c
 8007a54:	20001428 	.word	0x20001428

08007a58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10b      	bne.n	8007a80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	613b      	str	r3, [r7, #16]
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	e7fd      	b.n	8007a7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	60fb      	str	r3, [r7, #12]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a9e:	f000 fe8b 	bl	80087b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b18 <xTaskCheckForTimeOut+0xc0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d102      	bne.n	8007ac2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007abc:	2300      	movs	r3, #0
 8007abe:	61fb      	str	r3, [r7, #28]
 8007ac0:	e023      	b.n	8007b0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b15      	ldr	r3, [pc, #84]	@ (8007b1c <xTaskCheckForTimeOut+0xc4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d007      	beq.n	8007ade <xTaskCheckForTimeOut+0x86>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d302      	bcc.n	8007ade <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	e015      	b.n	8007b0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d20b      	bcs.n	8007b00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ff99 	bl	8007a2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	e004      	b.n	8007b0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b06:	2301      	movs	r3, #1
 8007b08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b0a:	f000 fe87 	bl	800881c <vPortExitCritical>

	return xReturn;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3720      	adds	r7, #32
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20001428 	.word	0x20001428
 8007b1c:	2000143c 	.word	0x2000143c

08007b20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b24:	4b03      	ldr	r3, [pc, #12]	@ (8007b34 <vTaskMissedYield+0x14>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
}
 8007b2a:	bf00      	nop
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20001438 	.word	0x20001438

08007b38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b40:	f000 f852 	bl	8007be8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b44:	4b06      	ldr	r3, [pc, #24]	@ (8007b60 <prvIdleTask+0x28>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d9f9      	bls.n	8007b40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b4c:	4b05      	ldr	r3, [pc, #20]	@ (8007b64 <prvIdleTask+0x2c>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b5c:	e7f0      	b.n	8007b40 <prvIdleTask+0x8>
 8007b5e:	bf00      	nop
 8007b60:	20000f54 	.word	0x20000f54
 8007b64:	e000ed04 	.word	0xe000ed04

08007b68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b6e:	2300      	movs	r3, #0
 8007b70:	607b      	str	r3, [r7, #4]
 8007b72:	e00c      	b.n	8007b8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4a12      	ldr	r2, [pc, #72]	@ (8007bc8 <prvInitialiseTaskLists+0x60>)
 8007b80:	4413      	add	r3, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fc9a 	bl	80064bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	607b      	str	r3, [r7, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b37      	cmp	r3, #55	@ 0x37
 8007b92:	d9ef      	bls.n	8007b74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b94:	480d      	ldr	r0, [pc, #52]	@ (8007bcc <prvInitialiseTaskLists+0x64>)
 8007b96:	f7fe fc91 	bl	80064bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b9a:	480d      	ldr	r0, [pc, #52]	@ (8007bd0 <prvInitialiseTaskLists+0x68>)
 8007b9c:	f7fe fc8e 	bl	80064bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ba0:	480c      	ldr	r0, [pc, #48]	@ (8007bd4 <prvInitialiseTaskLists+0x6c>)
 8007ba2:	f7fe fc8b 	bl	80064bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ba6:	480c      	ldr	r0, [pc, #48]	@ (8007bd8 <prvInitialiseTaskLists+0x70>)
 8007ba8:	f7fe fc88 	bl	80064bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bac:	480b      	ldr	r0, [pc, #44]	@ (8007bdc <prvInitialiseTaskLists+0x74>)
 8007bae:	f7fe fc85 	bl	80064bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007be0 <prvInitialiseTaskLists+0x78>)
 8007bb4:	4a05      	ldr	r2, [pc, #20]	@ (8007bcc <prvInitialiseTaskLists+0x64>)
 8007bb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007be4 <prvInitialiseTaskLists+0x7c>)
 8007bba:	4a05      	ldr	r2, [pc, #20]	@ (8007bd0 <prvInitialiseTaskLists+0x68>)
 8007bbc:	601a      	str	r2, [r3, #0]
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000f54 	.word	0x20000f54
 8007bcc:	200013b4 	.word	0x200013b4
 8007bd0:	200013c8 	.word	0x200013c8
 8007bd4:	200013e4 	.word	0x200013e4
 8007bd8:	200013f8 	.word	0x200013f8
 8007bdc:	20001410 	.word	0x20001410
 8007be0:	200013dc 	.word	0x200013dc
 8007be4:	200013e0 	.word	0x200013e0

08007be8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bee:	e019      	b.n	8007c24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bf0:	f000 fde2 	bl	80087b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf4:	4b10      	ldr	r3, [pc, #64]	@ (8007c38 <prvCheckTasksWaitingTermination+0x50>)
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fce5 	bl	80065d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c06:	4b0d      	ldr	r3, [pc, #52]	@ (8007c3c <prvCheckTasksWaitingTermination+0x54>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c3c <prvCheckTasksWaitingTermination+0x54>)
 8007c0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c10:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <prvCheckTasksWaitingTermination+0x58>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	4a0a      	ldr	r2, [pc, #40]	@ (8007c40 <prvCheckTasksWaitingTermination+0x58>)
 8007c18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c1a:	f000 fdff 	bl	800881c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f810 	bl	8007c44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c24:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <prvCheckTasksWaitingTermination+0x58>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e1      	bne.n	8007bf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	200013f8 	.word	0x200013f8
 8007c3c:	20001424 	.word	0x20001424
 8007c40:	2000140c 	.word	0x2000140c

08007c44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d108      	bne.n	8007c68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 ff9c 	bl	8008b98 <vPortFree>
				vPortFree( pxTCB );
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 ff99 	bl	8008b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c66:	e019      	b.n	8007c9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d103      	bne.n	8007c7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 ff90 	bl	8008b98 <vPortFree>
	}
 8007c78:	e010      	b.n	8007c9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d00b      	beq.n	8007c9c <prvDeleteTCB+0x58>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	60fb      	str	r3, [r7, #12]
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <prvDeleteTCB+0x54>
	}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007caa:	4b0c      	ldr	r3, [pc, #48]	@ (8007cdc <prvResetNextTaskUnblockTime+0x38>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8007cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cbc:	e008      	b.n	8007cd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cbe:	4b07      	ldr	r3, [pc, #28]	@ (8007cdc <prvResetNextTaskUnblockTime+0x38>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4a04      	ldr	r2, [pc, #16]	@ (8007ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8007cce:	6013      	str	r3, [r2, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	200013dc 	.word	0x200013dc
 8007ce0:	20001444 	.word	0x20001444

08007ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cea:	4b0b      	ldr	r3, [pc, #44]	@ (8007d18 <xTaskGetSchedulerState+0x34>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	e008      	b.n	8007d0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cf8:	4b08      	ldr	r3, [pc, #32]	@ (8007d1c <xTaskGetSchedulerState+0x38>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d00:	2302      	movs	r3, #2
 8007d02:	607b      	str	r3, [r7, #4]
 8007d04:	e001      	b.n	8007d0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d06:	2300      	movs	r3, #0
 8007d08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d0a:	687b      	ldr	r3, [r7, #4]
	}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	20001430 	.word	0x20001430
 8007d1c:	2000144c 	.word	0x2000144c

08007d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d058      	beq.n	8007de8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d36:	4b2f      	ldr	r3, [pc, #188]	@ (8007df4 <xTaskPriorityDisinherit+0xd4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d00b      	beq.n	8007d58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	60fb      	str	r3, [r7, #12]
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	e7fd      	b.n	8007d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10b      	bne.n	8007d78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60bb      	str	r3, [r7, #8]
}
 8007d72:	bf00      	nop
 8007d74:	bf00      	nop
 8007d76:	e7fd      	b.n	8007d74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d7c:	1e5a      	subs	r2, r3, #1
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d02c      	beq.n	8007de8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d128      	bne.n	8007de8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fc18 	bl	80065d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db8:	4b0f      	ldr	r3, [pc, #60]	@ (8007df8 <xTaskPriorityDisinherit+0xd8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d903      	bls.n	8007dc8 <xTaskPriorityDisinherit+0xa8>
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8007df8 <xTaskPriorityDisinherit+0xd8>)
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4a09      	ldr	r2, [pc, #36]	@ (8007dfc <xTaskPriorityDisinherit+0xdc>)
 8007dd6:	441a      	add	r2, r3
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fe fb99 	bl	8006516 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007de4:	2301      	movs	r3, #1
 8007de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007de8:	697b      	ldr	r3, [r7, #20]
	}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000f50 	.word	0x20000f50
 8007df8:	2000142c 	.word	0x2000142c
 8007dfc:	20000f54 	.word	0x20000f54

08007e00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e0a:	4b21      	ldr	r3, [pc, #132]	@ (8007e90 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e10:	4b20      	ldr	r3, [pc, #128]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3304      	adds	r3, #4
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe fbda 	bl	80065d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e22:	d10a      	bne.n	8007e3a <prvAddCurrentTaskToDelayedList+0x3a>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	4819      	ldr	r0, [pc, #100]	@ (8007e98 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e34:	f7fe fb6f 	bl	8006516 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e38:	e026      	b.n	8007e88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4413      	add	r3, r2
 8007e40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e42:	4b14      	ldr	r3, [pc, #80]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d209      	bcs.n	8007e66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e52:	4b12      	ldr	r3, [pc, #72]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4b0f      	ldr	r3, [pc, #60]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe fb7d 	bl	800655e <vListInsert>
}
 8007e64:	e010      	b.n	8007e88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e66:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7fe fb73 	bl	800655e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d202      	bcs.n	8007e88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e82:	4a08      	ldr	r2, [pc, #32]	@ (8007ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6013      	str	r3, [r2, #0]
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20001428 	.word	0x20001428
 8007e94:	20000f50 	.word	0x20000f50
 8007e98:	20001410 	.word	0x20001410
 8007e9c:	200013e0 	.word	0x200013e0
 8007ea0:	200013dc 	.word	0x200013dc
 8007ea4:	20001444 	.word	0x20001444

08007ea8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	@ 0x28
 8007eac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007eb2:	f000 fb13 	bl	80084dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f2c <xTimerCreateTimerTask+0x84>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d021      	beq.n	8007f02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ec6:	1d3a      	adds	r2, r7, #4
 8007ec8:	f107 0108 	add.w	r1, r7, #8
 8007ecc:	f107 030c 	add.w	r3, r7, #12
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fad9 	bl	8006488 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	9202      	str	r2, [sp, #8]
 8007ede:	9301      	str	r3, [sp, #4]
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	460a      	mov	r2, r1
 8007ee8:	4911      	ldr	r1, [pc, #68]	@ (8007f30 <xTimerCreateTimerTask+0x88>)
 8007eea:	4812      	ldr	r0, [pc, #72]	@ (8007f34 <xTimerCreateTimerTask+0x8c>)
 8007eec:	f7ff f8d0 	bl	8007090 <xTaskCreateStatic>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	4a11      	ldr	r2, [pc, #68]	@ (8007f38 <xTimerCreateTimerTask+0x90>)
 8007ef4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ef6:	4b10      	ldr	r3, [pc, #64]	@ (8007f38 <xTimerCreateTimerTask+0x90>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007efe:	2301      	movs	r3, #1
 8007f00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10b      	bne.n	8007f20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	613b      	str	r3, [r7, #16]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f20:	697b      	ldr	r3, [r7, #20]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20001480 	.word	0x20001480
 8007f30:	0800dea8 	.word	0x0800dea8
 8007f34:	08008075 	.word	0x08008075
 8007f38:	20001484 	.word	0x20001484

08007f3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	@ 0x28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10b      	bne.n	8007f6c <xTimerGenericCommand+0x30>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	623b      	str	r3, [r7, #32]
}
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	e7fd      	b.n	8007f68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f6c:	4b19      	ldr	r3, [pc, #100]	@ (8007fd4 <xTimerGenericCommand+0x98>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02a      	beq.n	8007fca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	dc18      	bgt.n	8007fb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f86:	f7ff fead 	bl	8007ce4 <xTaskGetSchedulerState>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d109      	bne.n	8007fa4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f90:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <xTimerGenericCommand+0x98>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	f107 0110 	add.w	r1, r7, #16
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9c:	f7fe fc88 	bl	80068b0 <xQueueGenericSend>
 8007fa0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fa2:	e012      	b.n	8007fca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd4 <xTimerGenericCommand+0x98>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	f107 0110 	add.w	r1, r7, #16
 8007fac:	2300      	movs	r3, #0
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f7fe fc7e 	bl	80068b0 <xQueueGenericSend>
 8007fb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fb6:	e008      	b.n	8007fca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fb8:	4b06      	ldr	r3, [pc, #24]	@ (8007fd4 <xTimerGenericCommand+0x98>)
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	f107 0110 	add.w	r1, r7, #16
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	f7fe fd76 	bl	8006ab4 <xQueueGenericSendFromISR>
 8007fc8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3728      	adds	r7, #40	@ 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20001480 	.word	0x20001480

08007fd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe2:	4b23      	ldr	r3, [pc, #140]	@ (8008070 <prvProcessExpiredTimer+0x98>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	3304      	adds	r3, #4
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fe faed 	bl	80065d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d023      	beq.n	800804c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	18d1      	adds	r1, r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	6978      	ldr	r0, [r7, #20]
 8008012:	f000 f8d5 	bl	80081c0 <prvInsertTimerInActiveList>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d020      	beq.n	800805e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800801c:	2300      	movs	r3, #0
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	2100      	movs	r1, #0
 8008026:	6978      	ldr	r0, [r7, #20]
 8008028:	f7ff ff88 	bl	8007f3c <xTimerGenericCommand>
 800802c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d114      	bne.n	800805e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	6978      	ldr	r0, [r7, #20]
 8008064:	4798      	blx	r3
}
 8008066:	bf00      	nop
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20001478 	.word	0x20001478

08008074 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800807c:	f107 0308 	add.w	r3, r7, #8
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f859 	bl	8008138 <prvGetNextExpireTime>
 8008086:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4619      	mov	r1, r3
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f805 	bl	800809c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008092:	f000 f8d7 	bl	8008244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008096:	bf00      	nop
 8008098:	e7f0      	b.n	800807c <prvTimerTask+0x8>
	...

0800809c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080a6:	f7ff fa37 	bl	8007518 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f866 	bl	8008180 <prvSampleTimeNow>
 80080b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d130      	bne.n	800811e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <prvProcessTimerOrBlockTask+0x3c>
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d806      	bhi.n	80080d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080ca:	f7ff fa33 	bl	8007534 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff ff81 	bl	8007fd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080d6:	e024      	b.n	8008122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d008      	beq.n	80080f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080de:	4b13      	ldr	r3, [pc, #76]	@ (800812c <prvProcessTimerOrBlockTask+0x90>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <prvProcessTimerOrBlockTask+0x50>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <prvProcessTimerOrBlockTask+0x52>
 80080ec:	2300      	movs	r3, #0
 80080ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008130 <prvProcessTimerOrBlockTask+0x94>)
 80080f2:	6818      	ldr	r0, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	4619      	mov	r1, r3
 80080fe:	f7fe ff93 	bl	8007028 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008102:	f7ff fa17 	bl	8007534 <xTaskResumeAll>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800810c:	4b09      	ldr	r3, [pc, #36]	@ (8008134 <prvProcessTimerOrBlockTask+0x98>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
}
 800811c:	e001      	b.n	8008122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800811e:	f7ff fa09 	bl	8007534 <xTaskResumeAll>
}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	2000147c 	.word	0x2000147c
 8008130:	20001480 	.word	0x20001480
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008140:	4b0e      	ldr	r3, [pc, #56]	@ (800817c <prvGetNextExpireTime+0x44>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <prvGetNextExpireTime+0x16>
 800814a:	2201      	movs	r2, #1
 800814c:	e000      	b.n	8008150 <prvGetNextExpireTime+0x18>
 800814e:	2200      	movs	r2, #0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800815c:	4b07      	ldr	r3, [pc, #28]	@ (800817c <prvGetNextExpireTime+0x44>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	e001      	b.n	800816c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800816c:	68fb      	ldr	r3, [r7, #12]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20001478 	.word	0x20001478

08008180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008188:	f7ff fa72 	bl	8007670 <xTaskGetTickCount>
 800818c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800818e:	4b0b      	ldr	r3, [pc, #44]	@ (80081bc <prvSampleTimeNow+0x3c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	429a      	cmp	r2, r3
 8008196:	d205      	bcs.n	80081a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008198:	f000 f93a 	bl	8008410 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	e002      	b.n	80081aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081aa:	4a04      	ldr	r2, [pc, #16]	@ (80081bc <prvSampleTimeNow+0x3c>)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20001488 	.word	0x20001488

080081c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d812      	bhi.n	800820c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	1ad2      	subs	r2, r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d302      	bcc.n	80081fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	e01b      	b.n	8008232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081fa:	4b10      	ldr	r3, [pc, #64]	@ (800823c <prvInsertTimerInActiveList+0x7c>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3304      	adds	r3, #4
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f7fe f9aa 	bl	800655e <vListInsert>
 800820a:	e012      	b.n	8008232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d206      	bcs.n	8008222 <prvInsertTimerInActiveList+0x62>
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d302      	bcc.n	8008222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e007      	b.n	8008232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008222:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <prvInsertTimerInActiveList+0x80>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7fe f996 	bl	800655e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008232:	697b      	ldr	r3, [r7, #20]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	2000147c 	.word	0x2000147c
 8008240:	20001478 	.word	0x20001478

08008244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	@ 0x38
 8008248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800824a:	e0ce      	b.n	80083ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	da19      	bge.n	8008286 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008252:	1d3b      	adds	r3, r7, #4
 8008254:	3304      	adds	r3, #4
 8008256:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	61fb      	str	r3, [r7, #28]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800827c:	6850      	ldr	r0, [r2, #4]
 800827e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008280:	6892      	ldr	r2, [r2, #8]
 8008282:	4611      	mov	r1, r2
 8008284:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f2c0 80ae 	blt.w	80083ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	3304      	adds	r3, #4
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe f996 	bl	80065d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082a4:	463b      	mov	r3, r7
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff ff6a 	bl	8008180 <prvSampleTimeNow>
 80082ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b09      	cmp	r3, #9
 80082b2:	f200 8097 	bhi.w	80083e4 <prvProcessReceivedCommands+0x1a0>
 80082b6:	a201      	add	r2, pc, #4	@ (adr r2, 80082bc <prvProcessReceivedCommands+0x78>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	0800835b 	.word	0x0800835b
 80082cc:	0800836f 	.word	0x0800836f
 80082d0:	080083bb 	.word	0x080083bb
 80082d4:	080082e5 	.word	0x080082e5
 80082d8:	080082e5 	.word	0x080082e5
 80082dc:	0800835b 	.word	0x0800835b
 80082e0:	0800836f 	.word	0x0800836f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	18d1      	adds	r1, r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008304:	f7ff ff5c 	bl	80081c0 <prvInsertTimerInActiveList>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d06c      	beq.n	80083e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d061      	beq.n	80083e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	441a      	add	r2, r3
 800832c:	2300      	movs	r3, #0
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2300      	movs	r3, #0
 8008332:	2100      	movs	r1, #0
 8008334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008336:	f7ff fe01 	bl	8007f3c <xTimerGenericCommand>
 800833a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d152      	bne.n	80083e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	61bb      	str	r3, [r7, #24]
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	e7fd      	b.n	8008356 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	b2da      	uxtb	r2, r3
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800836c:	e03d      	b.n	80083ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800836e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008374:	f043 0301 	orr.w	r3, r3, #1
 8008378:	b2da      	uxtb	r2, r3
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	617b      	str	r3, [r7, #20]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	699a      	ldr	r2, [r3, #24]
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	18d1      	adds	r1, r2, r3
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b4:	f7ff ff04 	bl	80081c0 <prvInsertTimerInActiveList>
					break;
 80083b8:	e017      	b.n	80083ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d103      	bne.n	80083d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80083c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ca:	f000 fbe5 	bl	8008b98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083ce:	e00c      	b.n	80083ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083d6:	f023 0301 	bic.w	r3, r3, #1
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083e2:	e002      	b.n	80083ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <prvProcessReceivedCommands+0x1a6>
					break;
 80083e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083ea:	4b08      	ldr	r3, [pc, #32]	@ (800840c <prvProcessReceivedCommands+0x1c8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	1d39      	adds	r1, r7, #4
 80083f0:	2200      	movs	r2, #0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fbfc 	bl	8006bf0 <xQueueReceive>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f47f af26 	bne.w	800824c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	3730      	adds	r7, #48	@ 0x30
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20001480 	.word	0x20001480

08008410 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008416:	e049      	b.n	80084ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008418:	4b2e      	ldr	r3, [pc, #184]	@ (80084d4 <prvSwitchTimerLists+0xc4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008422:	4b2c      	ldr	r3, [pc, #176]	@ (80084d4 <prvSwitchTimerLists+0xc4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe f8cd 	bl	80065d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d02f      	beq.n	80084ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4413      	add	r3, r2
 8008454:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	429a      	cmp	r2, r3
 800845c:	d90e      	bls.n	800847c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800846a:	4b1a      	ldr	r3, [pc, #104]	@ (80084d4 <prvSwitchTimerLists+0xc4>)
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe f872 	bl	800655e <vListInsert>
 800847a:	e017      	b.n	80084ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800847c:	2300      	movs	r3, #0
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	2100      	movs	r1, #0
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff fd58 	bl	8007f3c <xTimerGenericCommand>
 800848c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	603b      	str	r3, [r7, #0]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084ac:	4b09      	ldr	r3, [pc, #36]	@ (80084d4 <prvSwitchTimerLists+0xc4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1b0      	bne.n	8008418 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084b6:	4b07      	ldr	r3, [pc, #28]	@ (80084d4 <prvSwitchTimerLists+0xc4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084bc:	4b06      	ldr	r3, [pc, #24]	@ (80084d8 <prvSwitchTimerLists+0xc8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a04      	ldr	r2, [pc, #16]	@ (80084d4 <prvSwitchTimerLists+0xc4>)
 80084c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084c4:	4a04      	ldr	r2, [pc, #16]	@ (80084d8 <prvSwitchTimerLists+0xc8>)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	6013      	str	r3, [r2, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20001478 	.word	0x20001478
 80084d8:	2000147c 	.word	0x2000147c

080084dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084e2:	f000 f969 	bl	80087b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084e6:	4b15      	ldr	r3, [pc, #84]	@ (800853c <prvCheckForValidListAndQueue+0x60>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d120      	bne.n	8008530 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084ee:	4814      	ldr	r0, [pc, #80]	@ (8008540 <prvCheckForValidListAndQueue+0x64>)
 80084f0:	f7fd ffe4 	bl	80064bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084f4:	4813      	ldr	r0, [pc, #76]	@ (8008544 <prvCheckForValidListAndQueue+0x68>)
 80084f6:	f7fd ffe1 	bl	80064bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084fa:	4b13      	ldr	r3, [pc, #76]	@ (8008548 <prvCheckForValidListAndQueue+0x6c>)
 80084fc:	4a10      	ldr	r2, [pc, #64]	@ (8008540 <prvCheckForValidListAndQueue+0x64>)
 80084fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008500:	4b12      	ldr	r3, [pc, #72]	@ (800854c <prvCheckForValidListAndQueue+0x70>)
 8008502:	4a10      	ldr	r2, [pc, #64]	@ (8008544 <prvCheckForValidListAndQueue+0x68>)
 8008504:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008506:	2300      	movs	r3, #0
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	4b11      	ldr	r3, [pc, #68]	@ (8008550 <prvCheckForValidListAndQueue+0x74>)
 800850c:	4a11      	ldr	r2, [pc, #68]	@ (8008554 <prvCheckForValidListAndQueue+0x78>)
 800850e:	2110      	movs	r1, #16
 8008510:	200a      	movs	r0, #10
 8008512:	f7fe f8f1 	bl	80066f8 <xQueueGenericCreateStatic>
 8008516:	4603      	mov	r3, r0
 8008518:	4a08      	ldr	r2, [pc, #32]	@ (800853c <prvCheckForValidListAndQueue+0x60>)
 800851a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800851c:	4b07      	ldr	r3, [pc, #28]	@ (800853c <prvCheckForValidListAndQueue+0x60>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008524:	4b05      	ldr	r3, [pc, #20]	@ (800853c <prvCheckForValidListAndQueue+0x60>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	490b      	ldr	r1, [pc, #44]	@ (8008558 <prvCheckForValidListAndQueue+0x7c>)
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fd52 	bl	8006fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008530:	f000 f974 	bl	800881c <vPortExitCritical>
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20001480 	.word	0x20001480
 8008540:	20001450 	.word	0x20001450
 8008544:	20001464 	.word	0x20001464
 8008548:	20001478 	.word	0x20001478
 800854c:	2000147c 	.word	0x2000147c
 8008550:	2000152c 	.word	0x2000152c
 8008554:	2000148c 	.word	0x2000148c
 8008558:	0800deb0 	.word	0x0800deb0

0800855c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3b04      	subs	r3, #4
 800856c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3b04      	subs	r3, #4
 800857a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3b04      	subs	r3, #4
 800858a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800858c:	4a0c      	ldr	r2, [pc, #48]	@ (80085c0 <pxPortInitialiseStack+0x64>)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3b14      	subs	r3, #20
 8008596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3b04      	subs	r3, #4
 80085a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f06f 0202 	mvn.w	r2, #2
 80085aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b20      	subs	r3, #32
 80085b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	080085c5 	.word	0x080085c5

080085c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085ce:	4b13      	ldr	r3, [pc, #76]	@ (800861c <prvTaskExitError+0x58>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d00b      	beq.n	80085f0 <prvTaskExitError+0x2c>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	60fb      	str	r3, [r7, #12]
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	e7fd      	b.n	80085ec <prvTaskExitError+0x28>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60bb      	str	r3, [r7, #8]
}
 8008602:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008604:	bf00      	nop
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0fc      	beq.n	8008606 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	2000000c 	.word	0x2000000c

08008620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008620:	4b07      	ldr	r3, [pc, #28]	@ (8008640 <pxCurrentTCBConst2>)
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	6808      	ldr	r0, [r1, #0]
 8008626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	f380 8809 	msr	PSP, r0
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8811 	msr	BASEPRI, r0
 800863a:	4770      	bx	lr
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst2>:
 8008640:	20000f50 	.word	0x20000f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008648:	4808      	ldr	r0, [pc, #32]	@ (800866c <prvPortStartFirstTask+0x24>)
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f380 8808 	msr	MSP, r0
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8814 	msr	CONTROL, r0
 800865a:	b662      	cpsie	i
 800865c:	b661      	cpsie	f
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	df00      	svc	0
 8008668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800866a:	bf00      	nop
 800866c:	e000ed08 	.word	0xe000ed08

08008670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008676:	4b47      	ldr	r3, [pc, #284]	@ (8008794 <xPortStartScheduler+0x124>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a47      	ldr	r2, [pc, #284]	@ (8008798 <xPortStartScheduler+0x128>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10b      	bne.n	8008698 <xPortStartScheduler+0x28>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008698:	4b3e      	ldr	r3, [pc, #248]	@ (8008794 <xPortStartScheduler+0x124>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a3f      	ldr	r2, [pc, #252]	@ (800879c <xPortStartScheduler+0x12c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d10b      	bne.n	80086ba <xPortStartScheduler+0x4a>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	60fb      	str	r3, [r7, #12]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086ba:	4b39      	ldr	r3, [pc, #228]	@ (80087a0 <xPortStartScheduler+0x130>)
 80086bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	22ff      	movs	r2, #255	@ 0xff
 80086ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	4b31      	ldr	r3, [pc, #196]	@ (80087a4 <xPortStartScheduler+0x134>)
 80086e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086e2:	4b31      	ldr	r3, [pc, #196]	@ (80087a8 <xPortStartScheduler+0x138>)
 80086e4:	2207      	movs	r2, #7
 80086e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086e8:	e009      	b.n	80086fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80086ea:	4b2f      	ldr	r3, [pc, #188]	@ (80087a8 <xPortStartScheduler+0x138>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	4a2d      	ldr	r2, [pc, #180]	@ (80087a8 <xPortStartScheduler+0x138>)
 80086f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008706:	2b80      	cmp	r3, #128	@ 0x80
 8008708:	d0ef      	beq.n	80086ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800870a:	4b27      	ldr	r3, [pc, #156]	@ (80087a8 <xPortStartScheduler+0x138>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1c3 0307 	rsb	r3, r3, #7
 8008712:	2b04      	cmp	r3, #4
 8008714:	d00b      	beq.n	800872e <xPortStartScheduler+0xbe>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60bb      	str	r3, [r7, #8]
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800872e:	4b1e      	ldr	r3, [pc, #120]	@ (80087a8 <xPortStartScheduler+0x138>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <xPortStartScheduler+0x138>)
 8008736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008738:	4b1b      	ldr	r3, [pc, #108]	@ (80087a8 <xPortStartScheduler+0x138>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008740:	4a19      	ldr	r2, [pc, #100]	@ (80087a8 <xPortStartScheduler+0x138>)
 8008742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800874c:	4b17      	ldr	r3, [pc, #92]	@ (80087ac <xPortStartScheduler+0x13c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a16      	ldr	r2, [pc, #88]	@ (80087ac <xPortStartScheduler+0x13c>)
 8008752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008758:	4b14      	ldr	r3, [pc, #80]	@ (80087ac <xPortStartScheduler+0x13c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a13      	ldr	r2, [pc, #76]	@ (80087ac <xPortStartScheduler+0x13c>)
 800875e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008764:	f000 f8da 	bl	800891c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008768:	4b11      	ldr	r3, [pc, #68]	@ (80087b0 <xPortStartScheduler+0x140>)
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800876e:	f000 f8f9 	bl	8008964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008772:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <xPortStartScheduler+0x144>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a0f      	ldr	r2, [pc, #60]	@ (80087b4 <xPortStartScheduler+0x144>)
 8008778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800877c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800877e:	f7ff ff63 	bl	8008648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008782:	f7ff f83f 	bl	8007804 <vTaskSwitchContext>
	prvTaskExitError();
 8008786:	f7ff ff1d 	bl	80085c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	e000ed00 	.word	0xe000ed00
 8008798:	410fc271 	.word	0x410fc271
 800879c:	410fc270 	.word	0x410fc270
 80087a0:	e000e400 	.word	0xe000e400
 80087a4:	2000157c 	.word	0x2000157c
 80087a8:	20001580 	.word	0x20001580
 80087ac:	e000ed20 	.word	0xe000ed20
 80087b0:	2000000c 	.word	0x2000000c
 80087b4:	e000ef34 	.word	0xe000ef34

080087b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087d2:	4b10      	ldr	r3, [pc, #64]	@ (8008814 <vPortEnterCritical+0x5c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3301      	adds	r3, #1
 80087d8:	4a0e      	ldr	r2, [pc, #56]	@ (8008814 <vPortEnterCritical+0x5c>)
 80087da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008814 <vPortEnterCritical+0x5c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d110      	bne.n	8008806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008818 <vPortEnterCritical+0x60>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <vPortEnterCritical+0x4e>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	603b      	str	r3, [r7, #0]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <vPortEnterCritical+0x4a>
	}
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	2000000c 	.word	0x2000000c
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008822:	4b12      	ldr	r3, [pc, #72]	@ (800886c <vPortExitCritical+0x50>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <vPortExitCritical+0x26>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	607b      	str	r3, [r7, #4]
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	e7fd      	b.n	800883e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008842:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <vPortExitCritical+0x50>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3b01      	subs	r3, #1
 8008848:	4a08      	ldr	r2, [pc, #32]	@ (800886c <vPortExitCritical+0x50>)
 800884a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800884c:	4b07      	ldr	r3, [pc, #28]	@ (800886c <vPortExitCritical+0x50>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d105      	bne.n	8008860 <vPortExitCritical+0x44>
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
}
 800885e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	2000000c 	.word	0x2000000c

08008870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008870:	f3ef 8009 	mrs	r0, PSP
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	4b15      	ldr	r3, [pc, #84]	@ (80088d0 <pxCurrentTCBConst>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	f01e 0f10 	tst.w	lr, #16
 8008880:	bf08      	it	eq
 8008882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	6010      	str	r0, [r2, #0]
 800888c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008894:	f380 8811 	msr	BASEPRI, r0
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f7fe ffb0 	bl	8007804 <vTaskSwitchContext>
 80088a4:	f04f 0000 	mov.w	r0, #0
 80088a8:	f380 8811 	msr	BASEPRI, r0
 80088ac:	bc09      	pop	{r0, r3}
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	6808      	ldr	r0, [r1, #0]
 80088b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b6:	f01e 0f10 	tst.w	lr, #16
 80088ba:	bf08      	it	eq
 80088bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088c0:	f380 8809 	msr	PSP, r0
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	f3af 8000 	nop.w

080088d0 <pxCurrentTCBConst>:
 80088d0:	20000f50 	.word	0x20000f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088f2:	f7fe fecd 	bl	8007690 <xTaskIncrementTick>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088fc:	4b06      	ldr	r3, [pc, #24]	@ (8008918 <xPortSysTickHandler+0x40>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f383 8811 	msr	BASEPRI, r3
}
 800890e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008920:	4b0b      	ldr	r3, [pc, #44]	@ (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008926:	4b0b      	ldr	r3, [pc, #44]	@ (8008954 <vPortSetupTimerInterrupt+0x38>)
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800892c:	4b0a      	ldr	r3, [pc, #40]	@ (8008958 <vPortSetupTimerInterrupt+0x3c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a0a      	ldr	r2, [pc, #40]	@ (800895c <vPortSetupTimerInterrupt+0x40>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	099b      	lsrs	r3, r3, #6
 8008938:	4a09      	ldr	r2, [pc, #36]	@ (8008960 <vPortSetupTimerInterrupt+0x44>)
 800893a:	3b01      	subs	r3, #1
 800893c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800893e:	4b04      	ldr	r3, [pc, #16]	@ (8008950 <vPortSetupTimerInterrupt+0x34>)
 8008940:	2207      	movs	r2, #7
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	e000e010 	.word	0xe000e010
 8008954:	e000e018 	.word	0xe000e018
 8008958:	20000000 	.word	0x20000000
 800895c:	10624dd3 	.word	0x10624dd3
 8008960:	e000e014 	.word	0xe000e014

08008964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008974 <vPortEnableVFP+0x10>
 8008968:	6801      	ldr	r1, [r0, #0]
 800896a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800896e:	6001      	str	r1, [r0, #0]
 8008970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008972:	bf00      	nop
 8008974:	e000ed88 	.word	0xe000ed88

08008978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800897e:	f3ef 8305 	mrs	r3, IPSR
 8008982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b0f      	cmp	r3, #15
 8008988:	d915      	bls.n	80089b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800898a:	4a18      	ldr	r2, [pc, #96]	@ (80089ec <vPortValidateInterruptPriority+0x74>)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008994:	4b16      	ldr	r3, [pc, #88]	@ (80089f0 <vPortValidateInterruptPriority+0x78>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	7afa      	ldrb	r2, [r7, #11]
 800899a:	429a      	cmp	r2, r3
 800899c:	d20b      	bcs.n	80089b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089b6:	4b0f      	ldr	r3, [pc, #60]	@ (80089f4 <vPortValidateInterruptPriority+0x7c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80089be:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <vPortValidateInterruptPriority+0x80>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d90b      	bls.n	80089de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	603b      	str	r3, [r7, #0]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <vPortValidateInterruptPriority+0x62>
	}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	e000e3f0 	.word	0xe000e3f0
 80089f0:	2000157c 	.word	0x2000157c
 80089f4:	e000ed0c 	.word	0xe000ed0c
 80089f8:	20001580 	.word	0x20001580

080089fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	@ 0x28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a08:	f7fe fd86 	bl	8007518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008b80 <pvPortMalloc+0x184>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a14:	f000 f924 	bl	8008c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a18:	4b5a      	ldr	r3, [pc, #360]	@ (8008b84 <pvPortMalloc+0x188>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 8095 	bne.w	8008b50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a2c:	2208      	movs	r2, #8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4413      	add	r3, r2
 8008a32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d015      	beq.n	8008a6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f023 0307 	bic.w	r3, r3, #7
 8008a44:	3308      	adds	r3, #8
 8008a46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <pvPortMalloc+0x6e>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	617b      	str	r3, [r7, #20]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d06f      	beq.n	8008b50 <pvPortMalloc+0x154>
 8008a70:	4b45      	ldr	r3, [pc, #276]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d86a      	bhi.n	8008b50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a7a:	4b44      	ldr	r3, [pc, #272]	@ (8008b8c <pvPortMalloc+0x190>)
 8008a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a7e:	4b43      	ldr	r3, [pc, #268]	@ (8008b8c <pvPortMalloc+0x190>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a84:	e004      	b.n	8008a90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d903      	bls.n	8008aa2 <pvPortMalloc+0xa6>
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1f1      	bne.n	8008a86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008aa2:	4b37      	ldr	r3, [pc, #220]	@ (8008b80 <pvPortMalloc+0x184>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d051      	beq.n	8008b50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	4413      	add	r3, r2
 8008ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	1ad2      	subs	r2, r2, r3
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d920      	bls.n	8008b10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
}
 8008af2:	bf00      	nop
 8008af4:	bf00      	nop
 8008af6:	e7fd      	b.n	8008af4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b0a:	69b8      	ldr	r0, [r7, #24]
 8008b0c:	f000 f90a 	bl	8008d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b10:	4b1d      	ldr	r3, [pc, #116]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <pvPortMalloc+0x194>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d203      	bcs.n	8008b32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b2a:	4b17      	ldr	r3, [pc, #92]	@ (8008b88 <pvPortMalloc+0x18c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	@ (8008b90 <pvPortMalloc+0x194>)
 8008b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4b13      	ldr	r3, [pc, #76]	@ (8008b84 <pvPortMalloc+0x188>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b46:	4b13      	ldr	r3, [pc, #76]	@ (8008b94 <pvPortMalloc+0x198>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	4a11      	ldr	r2, [pc, #68]	@ (8008b94 <pvPortMalloc+0x198>)
 8008b4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b50:	f7fe fcf0 	bl	8007534 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <pvPortMalloc+0x17a>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	60fb      	str	r3, [r7, #12]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <pvPortMalloc+0x176>
	return pvReturn;
 8008b76:	69fb      	ldr	r3, [r7, #28]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3728      	adds	r7, #40	@ 0x28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	2000518c 	.word	0x2000518c
 8008b84:	200051a0 	.word	0x200051a0
 8008b88:	20005190 	.word	0x20005190
 8008b8c:	20005184 	.word	0x20005184
 8008b90:	20005194 	.word	0x20005194
 8008b94:	20005198 	.word	0x20005198

08008b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d04f      	beq.n	8008c4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008baa:	2308      	movs	r3, #8
 8008bac:	425b      	negs	r3, r3
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	4b25      	ldr	r3, [pc, #148]	@ (8008c54 <vPortFree+0xbc>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <vPortFree+0x46>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	60fb      	str	r3, [r7, #12]
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	e7fd      	b.n	8008bda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00b      	beq.n	8008bfe <vPortFree+0x66>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60bb      	str	r3, [r7, #8]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	4b14      	ldr	r3, [pc, #80]	@ (8008c54 <vPortFree+0xbc>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4013      	ands	r3, r2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01e      	beq.n	8008c4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11a      	bne.n	8008c4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	4b0e      	ldr	r3, [pc, #56]	@ (8008c54 <vPortFree+0xbc>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	401a      	ands	r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c24:	f7fe fc78 	bl	8007518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c58 <vPortFree+0xc0>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4413      	add	r3, r2
 8008c32:	4a09      	ldr	r2, [pc, #36]	@ (8008c58 <vPortFree+0xc0>)
 8008c34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c36:	6938      	ldr	r0, [r7, #16]
 8008c38:	f000 f874 	bl	8008d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <vPortFree+0xc4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	4a06      	ldr	r2, [pc, #24]	@ (8008c5c <vPortFree+0xc4>)
 8008c44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c46:	f7fe fc75 	bl	8007534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c4a:	bf00      	nop
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	200051a0 	.word	0x200051a0
 8008c58:	20005190 	.word	0x20005190
 8008c5c:	2000519c 	.word	0x2000519c

08008c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c6c:	4b27      	ldr	r3, [pc, #156]	@ (8008d0c <prvHeapInit+0xac>)
 8008c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00c      	beq.n	8008c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0307 	bic.w	r3, r3, #7
 8008c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008d0c <prvHeapInit+0xac>)
 8008c90:	4413      	add	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c98:	4a1d      	ldr	r2, [pc, #116]	@ (8008d10 <prvHeapInit+0xb0>)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8008d10 <prvHeapInit+0xb0>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cac:	2208      	movs	r2, #8
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	@ (8008d14 <prvHeapInit+0xb4>)
 8008cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cc2:	4b14      	ldr	r3, [pc, #80]	@ (8008d14 <prvHeapInit+0xb4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cca:	4b12      	ldr	r3, [pc, #72]	@ (8008d14 <prvHeapInit+0xb4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	1ad2      	subs	r2, r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d14 <prvHeapInit+0xb4>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4a0a      	ldr	r2, [pc, #40]	@ (8008d18 <prvHeapInit+0xb8>)
 8008cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4a09      	ldr	r2, [pc, #36]	@ (8008d1c <prvHeapInit+0xbc>)
 8008cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cf8:	4b09      	ldr	r3, [pc, #36]	@ (8008d20 <prvHeapInit+0xc0>)
 8008cfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cfe:	601a      	str	r2, [r3, #0]
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20001584 	.word	0x20001584
 8008d10:	20005184 	.word	0x20005184
 8008d14:	2000518c 	.word	0x2000518c
 8008d18:	20005194 	.word	0x20005194
 8008d1c:	20005190 	.word	0x20005190
 8008d20:	200051a0 	.word	0x200051a0

08008d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d2c:	4b28      	ldr	r3, [pc, #160]	@ (8008dd0 <prvInsertBlockIntoFreeList+0xac>)
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e002      	b.n	8008d38 <prvInsertBlockIntoFreeList+0x14>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d8f7      	bhi.n	8008d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d108      	bne.n	8008d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	441a      	add	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	441a      	add	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d118      	bne.n	8008dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b15      	ldr	r3, [pc, #84]	@ (8008dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d00d      	beq.n	8008da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	441a      	add	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	e008      	b.n	8008db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008da2:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	e003      	b.n	8008db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d002      	beq.n	8008dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20005184 	.word	0x20005184
 8008dd4:	2000518c 	.word	0x2000518c

08008dd8 <__cvt>:
 8008dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	461d      	mov	r5, r3
 8008de2:	4614      	mov	r4, r2
 8008de4:	bfbc      	itt	lt
 8008de6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008dea:	4614      	movlt	r4, r2
 8008dec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008dee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008df0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008df4:	bfb6      	itet	lt
 8008df6:	461d      	movlt	r5, r3
 8008df8:	2300      	movge	r3, #0
 8008dfa:	232d      	movlt	r3, #45	@ 0x2d
 8008dfc:	7013      	strb	r3, [r2, #0]
 8008dfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e00:	f023 0820 	bic.w	r8, r3, #32
 8008e04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e08:	d005      	beq.n	8008e16 <__cvt+0x3e>
 8008e0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e0e:	d100      	bne.n	8008e12 <__cvt+0x3a>
 8008e10:	3601      	adds	r6, #1
 8008e12:	2302      	movs	r3, #2
 8008e14:	e000      	b.n	8008e18 <__cvt+0x40>
 8008e16:	2303      	movs	r3, #3
 8008e18:	aa07      	add	r2, sp, #28
 8008e1a:	9204      	str	r2, [sp, #16]
 8008e1c:	aa06      	add	r2, sp, #24
 8008e1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008e22:	e9cd 3600 	strd	r3, r6, [sp]
 8008e26:	4622      	mov	r2, r4
 8008e28:	462b      	mov	r3, r5
 8008e2a:	f001 f9e1 	bl	800a1f0 <_dtoa_r>
 8008e2e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008e32:	4607      	mov	r7, r0
 8008e34:	d119      	bne.n	8008e6a <__cvt+0x92>
 8008e36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e38:	07db      	lsls	r3, r3, #31
 8008e3a:	d50e      	bpl.n	8008e5a <__cvt+0x82>
 8008e3c:	eb00 0906 	add.w	r9, r0, r6
 8008e40:	2200      	movs	r2, #0
 8008e42:	2300      	movs	r3, #0
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 fe4e 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e4c:	b108      	cbz	r0, 8008e52 <__cvt+0x7a>
 8008e4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e52:	2230      	movs	r2, #48	@ 0x30
 8008e54:	9b07      	ldr	r3, [sp, #28]
 8008e56:	454b      	cmp	r3, r9
 8008e58:	d31e      	bcc.n	8008e98 <__cvt+0xc0>
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008e5e:	1bdb      	subs	r3, r3, r7
 8008e60:	4638      	mov	r0, r7
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	b008      	add	sp, #32
 8008e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e6e:	eb00 0906 	add.w	r9, r0, r6
 8008e72:	d1e5      	bne.n	8008e40 <__cvt+0x68>
 8008e74:	7803      	ldrb	r3, [r0, #0]
 8008e76:	2b30      	cmp	r3, #48	@ 0x30
 8008e78:	d10a      	bne.n	8008e90 <__cvt+0xb8>
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4620      	mov	r0, r4
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7f7 fe31 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e86:	b918      	cbnz	r0, 8008e90 <__cvt+0xb8>
 8008e88:	f1c6 0601 	rsb	r6, r6, #1
 8008e8c:	f8ca 6000 	str.w	r6, [sl]
 8008e90:	f8da 3000 	ldr.w	r3, [sl]
 8008e94:	4499      	add	r9, r3
 8008e96:	e7d3      	b.n	8008e40 <__cvt+0x68>
 8008e98:	1c59      	adds	r1, r3, #1
 8008e9a:	9107      	str	r1, [sp, #28]
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	e7d9      	b.n	8008e54 <__cvt+0x7c>

08008ea0 <__exponent>:
 8008ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ea2:	2900      	cmp	r1, #0
 8008ea4:	bfba      	itte	lt
 8008ea6:	4249      	neglt	r1, r1
 8008ea8:	232d      	movlt	r3, #45	@ 0x2d
 8008eaa:	232b      	movge	r3, #43	@ 0x2b
 8008eac:	2909      	cmp	r1, #9
 8008eae:	7002      	strb	r2, [r0, #0]
 8008eb0:	7043      	strb	r3, [r0, #1]
 8008eb2:	dd29      	ble.n	8008f08 <__exponent+0x68>
 8008eb4:	f10d 0307 	add.w	r3, sp, #7
 8008eb8:	461d      	mov	r5, r3
 8008eba:	270a      	movs	r7, #10
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ec2:	fb07 1416 	mls	r4, r7, r6, r1
 8008ec6:	3430      	adds	r4, #48	@ 0x30
 8008ec8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ecc:	460c      	mov	r4, r1
 8008ece:	2c63      	cmp	r4, #99	@ 0x63
 8008ed0:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	dcf1      	bgt.n	8008ebc <__exponent+0x1c>
 8008ed8:	3130      	adds	r1, #48	@ 0x30
 8008eda:	1e94      	subs	r4, r2, #2
 8008edc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ee0:	1c41      	adds	r1, r0, #1
 8008ee2:	4623      	mov	r3, r4
 8008ee4:	42ab      	cmp	r3, r5
 8008ee6:	d30a      	bcc.n	8008efe <__exponent+0x5e>
 8008ee8:	f10d 0309 	add.w	r3, sp, #9
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	42ac      	cmp	r4, r5
 8008ef0:	bf88      	it	hi
 8008ef2:	2300      	movhi	r3, #0
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	4403      	add	r3, r0
 8008ef8:	1a18      	subs	r0, r3, r0
 8008efa:	b003      	add	sp, #12
 8008efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008efe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f02:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f06:	e7ed      	b.n	8008ee4 <__exponent+0x44>
 8008f08:	2330      	movs	r3, #48	@ 0x30
 8008f0a:	3130      	adds	r1, #48	@ 0x30
 8008f0c:	7083      	strb	r3, [r0, #2]
 8008f0e:	70c1      	strb	r1, [r0, #3]
 8008f10:	1d03      	adds	r3, r0, #4
 8008f12:	e7f1      	b.n	8008ef8 <__exponent+0x58>

08008f14 <_printf_float>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	b091      	sub	sp, #68	@ 0x44
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008f20:	4616      	mov	r6, r2
 8008f22:	461f      	mov	r7, r3
 8008f24:	4605      	mov	r5, r0
 8008f26:	f001 f84f 	bl	8009fc8 <_localeconv_r>
 8008f2a:	6803      	ldr	r3, [r0, #0]
 8008f2c:	9308      	str	r3, [sp, #32]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f7 f9ae 	bl	8000290 <strlen>
 8008f34:	2300      	movs	r3, #0
 8008f36:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f38:	f8d8 3000 	ldr.w	r3, [r8]
 8008f3c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f3e:	3307      	adds	r3, #7
 8008f40:	f023 0307 	bic.w	r3, r3, #7
 8008f44:	f103 0208 	add.w	r2, r3, #8
 8008f48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8008f50:	f8c8 2000 	str.w	r2, [r8]
 8008f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f5e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008f62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f6a:	4b9d      	ldr	r3, [pc, #628]	@ (80091e0 <_printf_float+0x2cc>)
 8008f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f70:	f7f7 fdec 	bl	8000b4c <__aeabi_dcmpun>
 8008f74:	bb70      	cbnz	r0, 8008fd4 <_printf_float+0xc0>
 8008f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f7a:	4b99      	ldr	r3, [pc, #612]	@ (80091e0 <_printf_float+0x2cc>)
 8008f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f80:	f7f7 fdc6 	bl	8000b10 <__aeabi_dcmple>
 8008f84:	bb30      	cbnz	r0, 8008fd4 <_printf_float+0xc0>
 8008f86:	2200      	movs	r2, #0
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	f7f7 fdb5 	bl	8000afc <__aeabi_dcmplt>
 8008f92:	b110      	cbz	r0, 8008f9a <_printf_float+0x86>
 8008f94:	232d      	movs	r3, #45	@ 0x2d
 8008f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f9a:	4a92      	ldr	r2, [pc, #584]	@ (80091e4 <_printf_float+0x2d0>)
 8008f9c:	4b92      	ldr	r3, [pc, #584]	@ (80091e8 <_printf_float+0x2d4>)
 8008f9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008fa2:	bf94      	ite	ls
 8008fa4:	4690      	movls	r8, r2
 8008fa6:	4698      	movhi	r8, r3
 8008fa8:	2303      	movs	r3, #3
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	f02b 0304 	bic.w	r3, fp, #4
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	f04f 0900 	mov.w	r9, #0
 8008fb6:	9700      	str	r7, [sp, #0]
 8008fb8:	4633      	mov	r3, r6
 8008fba:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 f9d4 	bl	800936c <_printf_common>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f040 808f 	bne.w	80090e8 <_printf_float+0x1d4>
 8008fca:	f04f 30ff 	mov.w	r0, #4294967295
 8008fce:	b011      	add	sp, #68	@ 0x44
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 fdb6 	bl	8000b4c <__aeabi_dcmpun>
 8008fe0:	b140      	cbz	r0, 8008ff4 <_printf_float+0xe0>
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfbc      	itt	lt
 8008fe8:	232d      	movlt	r3, #45	@ 0x2d
 8008fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008fee:	4a7f      	ldr	r2, [pc, #508]	@ (80091ec <_printf_float+0x2d8>)
 8008ff0:	4b7f      	ldr	r3, [pc, #508]	@ (80091f0 <_printf_float+0x2dc>)
 8008ff2:	e7d4      	b.n	8008f9e <_printf_float+0x8a>
 8008ff4:	6863      	ldr	r3, [r4, #4]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008ffc:	d13f      	bne.n	800907e <_printf_float+0x16a>
 8008ffe:	2306      	movs	r3, #6
 8009000:	6063      	str	r3, [r4, #4]
 8009002:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009006:	2200      	movs	r2, #0
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	9206      	str	r2, [sp, #24]
 800900c:	aa0e      	add	r2, sp, #56	@ 0x38
 800900e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009012:	aa0d      	add	r2, sp, #52	@ 0x34
 8009014:	9203      	str	r2, [sp, #12]
 8009016:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800901a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	4642      	mov	r2, r8
 8009024:	464b      	mov	r3, r9
 8009026:	4628      	mov	r0, r5
 8009028:	910a      	str	r1, [sp, #40]	@ 0x28
 800902a:	f7ff fed5 	bl	8008dd8 <__cvt>
 800902e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009030:	2947      	cmp	r1, #71	@ 0x47
 8009032:	4680      	mov	r8, r0
 8009034:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009036:	d128      	bne.n	800908a <_printf_float+0x176>
 8009038:	1cc8      	adds	r0, r1, #3
 800903a:	db02      	blt.n	8009042 <_printf_float+0x12e>
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	4299      	cmp	r1, r3
 8009040:	dd40      	ble.n	80090c4 <_printf_float+0x1b0>
 8009042:	f1aa 0a02 	sub.w	sl, sl, #2
 8009046:	fa5f fa8a 	uxtb.w	sl, sl
 800904a:	3901      	subs	r1, #1
 800904c:	4652      	mov	r2, sl
 800904e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009052:	910d      	str	r1, [sp, #52]	@ 0x34
 8009054:	f7ff ff24 	bl	8008ea0 <__exponent>
 8009058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800905a:	1813      	adds	r3, r2, r0
 800905c:	2a01      	cmp	r2, #1
 800905e:	4681      	mov	r9, r0
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	dc02      	bgt.n	800906a <_printf_float+0x156>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	07d2      	lsls	r2, r2, #31
 8009068:	d501      	bpl.n	800906e <_printf_float+0x15a>
 800906a:	3301      	adds	r3, #1
 800906c:	6123      	str	r3, [r4, #16]
 800906e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009072:	2b00      	cmp	r3, #0
 8009074:	d09f      	beq.n	8008fb6 <_printf_float+0xa2>
 8009076:	232d      	movs	r3, #45	@ 0x2d
 8009078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800907c:	e79b      	b.n	8008fb6 <_printf_float+0xa2>
 800907e:	2947      	cmp	r1, #71	@ 0x47
 8009080:	d1bf      	bne.n	8009002 <_printf_float+0xee>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1bd      	bne.n	8009002 <_printf_float+0xee>
 8009086:	2301      	movs	r3, #1
 8009088:	e7ba      	b.n	8009000 <_printf_float+0xec>
 800908a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800908e:	d9dc      	bls.n	800904a <_printf_float+0x136>
 8009090:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009094:	d118      	bne.n	80090c8 <_printf_float+0x1b4>
 8009096:	2900      	cmp	r1, #0
 8009098:	6863      	ldr	r3, [r4, #4]
 800909a:	dd0b      	ble.n	80090b4 <_printf_float+0x1a0>
 800909c:	6121      	str	r1, [r4, #16]
 800909e:	b913      	cbnz	r3, 80090a6 <_printf_float+0x192>
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	07d0      	lsls	r0, r2, #31
 80090a4:	d502      	bpl.n	80090ac <_printf_float+0x198>
 80090a6:	3301      	adds	r3, #1
 80090a8:	440b      	add	r3, r1
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	e7dc      	b.n	800906e <_printf_float+0x15a>
 80090b4:	b913      	cbnz	r3, 80090bc <_printf_float+0x1a8>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	07d2      	lsls	r2, r2, #31
 80090ba:	d501      	bpl.n	80090c0 <_printf_float+0x1ac>
 80090bc:	3302      	adds	r3, #2
 80090be:	e7f4      	b.n	80090aa <_printf_float+0x196>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7f2      	b.n	80090aa <_printf_float+0x196>
 80090c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80090c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ca:	4299      	cmp	r1, r3
 80090cc:	db05      	blt.n	80090da <_printf_float+0x1c6>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	6121      	str	r1, [r4, #16]
 80090d2:	07d8      	lsls	r0, r3, #31
 80090d4:	d5ea      	bpl.n	80090ac <_printf_float+0x198>
 80090d6:	1c4b      	adds	r3, r1, #1
 80090d8:	e7e7      	b.n	80090aa <_printf_float+0x196>
 80090da:	2900      	cmp	r1, #0
 80090dc:	bfd4      	ite	le
 80090de:	f1c1 0202 	rsble	r2, r1, #2
 80090e2:	2201      	movgt	r2, #1
 80090e4:	4413      	add	r3, r2
 80090e6:	e7e0      	b.n	80090aa <_printf_float+0x196>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	055a      	lsls	r2, r3, #21
 80090ec:	d407      	bmi.n	80090fe <_printf_float+0x1ea>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	4642      	mov	r2, r8
 80090f2:	4631      	mov	r1, r6
 80090f4:	4628      	mov	r0, r5
 80090f6:	47b8      	blx	r7
 80090f8:	3001      	adds	r0, #1
 80090fa:	d12b      	bne.n	8009154 <_printf_float+0x240>
 80090fc:	e765      	b.n	8008fca <_printf_float+0xb6>
 80090fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009102:	f240 80dd 	bls.w	80092c0 <_printf_float+0x3ac>
 8009106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800910a:	2200      	movs	r2, #0
 800910c:	2300      	movs	r3, #0
 800910e:	f7f7 fceb 	bl	8000ae8 <__aeabi_dcmpeq>
 8009112:	2800      	cmp	r0, #0
 8009114:	d033      	beq.n	800917e <_printf_float+0x26a>
 8009116:	4a37      	ldr	r2, [pc, #220]	@ (80091f4 <_printf_float+0x2e0>)
 8009118:	2301      	movs	r3, #1
 800911a:	4631      	mov	r1, r6
 800911c:	4628      	mov	r0, r5
 800911e:	47b8      	blx	r7
 8009120:	3001      	adds	r0, #1
 8009122:	f43f af52 	beq.w	8008fca <_printf_float+0xb6>
 8009126:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800912a:	4543      	cmp	r3, r8
 800912c:	db02      	blt.n	8009134 <_printf_float+0x220>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	07d8      	lsls	r0, r3, #31
 8009132:	d50f      	bpl.n	8009154 <_printf_float+0x240>
 8009134:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	f43f af43 	beq.w	8008fca <_printf_float+0xb6>
 8009144:	f04f 0900 	mov.w	r9, #0
 8009148:	f108 38ff 	add.w	r8, r8, #4294967295
 800914c:	f104 0a1a 	add.w	sl, r4, #26
 8009150:	45c8      	cmp	r8, r9
 8009152:	dc09      	bgt.n	8009168 <_printf_float+0x254>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	079b      	lsls	r3, r3, #30
 8009158:	f100 8103 	bmi.w	8009362 <_printf_float+0x44e>
 800915c:	68e0      	ldr	r0, [r4, #12]
 800915e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009160:	4298      	cmp	r0, r3
 8009162:	bfb8      	it	lt
 8009164:	4618      	movlt	r0, r3
 8009166:	e732      	b.n	8008fce <_printf_float+0xba>
 8009168:	2301      	movs	r3, #1
 800916a:	4652      	mov	r2, sl
 800916c:	4631      	mov	r1, r6
 800916e:	4628      	mov	r0, r5
 8009170:	47b8      	blx	r7
 8009172:	3001      	adds	r0, #1
 8009174:	f43f af29 	beq.w	8008fca <_printf_float+0xb6>
 8009178:	f109 0901 	add.w	r9, r9, #1
 800917c:	e7e8      	b.n	8009150 <_printf_float+0x23c>
 800917e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009180:	2b00      	cmp	r3, #0
 8009182:	dc39      	bgt.n	80091f8 <_printf_float+0x2e4>
 8009184:	4a1b      	ldr	r2, [pc, #108]	@ (80091f4 <_printf_float+0x2e0>)
 8009186:	2301      	movs	r3, #1
 8009188:	4631      	mov	r1, r6
 800918a:	4628      	mov	r0, r5
 800918c:	47b8      	blx	r7
 800918e:	3001      	adds	r0, #1
 8009190:	f43f af1b 	beq.w	8008fca <_printf_float+0xb6>
 8009194:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009198:	ea59 0303 	orrs.w	r3, r9, r3
 800919c:	d102      	bne.n	80091a4 <_printf_float+0x290>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	07d9      	lsls	r1, r3, #31
 80091a2:	d5d7      	bpl.n	8009154 <_printf_float+0x240>
 80091a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091a8:	4631      	mov	r1, r6
 80091aa:	4628      	mov	r0, r5
 80091ac:	47b8      	blx	r7
 80091ae:	3001      	adds	r0, #1
 80091b0:	f43f af0b 	beq.w	8008fca <_printf_float+0xb6>
 80091b4:	f04f 0a00 	mov.w	sl, #0
 80091b8:	f104 0b1a 	add.w	fp, r4, #26
 80091bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091be:	425b      	negs	r3, r3
 80091c0:	4553      	cmp	r3, sl
 80091c2:	dc01      	bgt.n	80091c8 <_printf_float+0x2b4>
 80091c4:	464b      	mov	r3, r9
 80091c6:	e793      	b.n	80090f0 <_printf_float+0x1dc>
 80091c8:	2301      	movs	r3, #1
 80091ca:	465a      	mov	r2, fp
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	47b8      	blx	r7
 80091d2:	3001      	adds	r0, #1
 80091d4:	f43f aef9 	beq.w	8008fca <_printf_float+0xb6>
 80091d8:	f10a 0a01 	add.w	sl, sl, #1
 80091dc:	e7ee      	b.n	80091bc <_printf_float+0x2a8>
 80091de:	bf00      	nop
 80091e0:	7fefffff 	.word	0x7fefffff
 80091e4:	0800fffc 	.word	0x0800fffc
 80091e8:	08010000 	.word	0x08010000
 80091ec:	08010004 	.word	0x08010004
 80091f0:	08010008 	.word	0x08010008
 80091f4:	08010398 	.word	0x08010398
 80091f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091fa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80091fe:	4553      	cmp	r3, sl
 8009200:	bfa8      	it	ge
 8009202:	4653      	movge	r3, sl
 8009204:	2b00      	cmp	r3, #0
 8009206:	4699      	mov	r9, r3
 8009208:	dc36      	bgt.n	8009278 <_printf_float+0x364>
 800920a:	f04f 0b00 	mov.w	fp, #0
 800920e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009212:	f104 021a 	add.w	r2, r4, #26
 8009216:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009218:	930a      	str	r3, [sp, #40]	@ 0x28
 800921a:	eba3 0309 	sub.w	r3, r3, r9
 800921e:	455b      	cmp	r3, fp
 8009220:	dc31      	bgt.n	8009286 <_printf_float+0x372>
 8009222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009224:	459a      	cmp	sl, r3
 8009226:	dc3a      	bgt.n	800929e <_printf_float+0x38a>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	07da      	lsls	r2, r3, #31
 800922c:	d437      	bmi.n	800929e <_printf_float+0x38a>
 800922e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009230:	ebaa 0903 	sub.w	r9, sl, r3
 8009234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009236:	ebaa 0303 	sub.w	r3, sl, r3
 800923a:	4599      	cmp	r9, r3
 800923c:	bfa8      	it	ge
 800923e:	4699      	movge	r9, r3
 8009240:	f1b9 0f00 	cmp.w	r9, #0
 8009244:	dc33      	bgt.n	80092ae <_printf_float+0x39a>
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800924e:	f104 0b1a 	add.w	fp, r4, #26
 8009252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009254:	ebaa 0303 	sub.w	r3, sl, r3
 8009258:	eba3 0309 	sub.w	r3, r3, r9
 800925c:	4543      	cmp	r3, r8
 800925e:	f77f af79 	ble.w	8009154 <_printf_float+0x240>
 8009262:	2301      	movs	r3, #1
 8009264:	465a      	mov	r2, fp
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	f43f aeac 	beq.w	8008fca <_printf_float+0xb6>
 8009272:	f108 0801 	add.w	r8, r8, #1
 8009276:	e7ec      	b.n	8009252 <_printf_float+0x33e>
 8009278:	4642      	mov	r2, r8
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	d1c2      	bne.n	800920a <_printf_float+0x2f6>
 8009284:	e6a1      	b.n	8008fca <_printf_float+0xb6>
 8009286:	2301      	movs	r3, #1
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	920a      	str	r2, [sp, #40]	@ 0x28
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f ae9a 	beq.w	8008fca <_printf_float+0xb6>
 8009296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009298:	f10b 0b01 	add.w	fp, fp, #1
 800929c:	e7bb      	b.n	8009216 <_printf_float+0x302>
 800929e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	d1c0      	bne.n	800922e <_printf_float+0x31a>
 80092ac:	e68d      	b.n	8008fca <_printf_float+0xb6>
 80092ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092b0:	464b      	mov	r3, r9
 80092b2:	4442      	add	r2, r8
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	d1c3      	bne.n	8009246 <_printf_float+0x332>
 80092be:	e684      	b.n	8008fca <_printf_float+0xb6>
 80092c0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80092c4:	f1ba 0f01 	cmp.w	sl, #1
 80092c8:	dc01      	bgt.n	80092ce <_printf_float+0x3ba>
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d536      	bpl.n	800933c <_printf_float+0x428>
 80092ce:	2301      	movs	r3, #1
 80092d0:	4642      	mov	r2, r8
 80092d2:	4631      	mov	r1, r6
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b8      	blx	r7
 80092d8:	3001      	adds	r0, #1
 80092da:	f43f ae76 	beq.w	8008fca <_printf_float+0xb6>
 80092de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae6e 	beq.w	8008fca <_printf_float+0xb6>
 80092ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092f2:	2200      	movs	r2, #0
 80092f4:	2300      	movs	r3, #0
 80092f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092fa:	f7f7 fbf5 	bl	8000ae8 <__aeabi_dcmpeq>
 80092fe:	b9c0      	cbnz	r0, 8009332 <_printf_float+0x41e>
 8009300:	4653      	mov	r3, sl
 8009302:	f108 0201 	add.w	r2, r8, #1
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	47b8      	blx	r7
 800930c:	3001      	adds	r0, #1
 800930e:	d10c      	bne.n	800932a <_printf_float+0x416>
 8009310:	e65b      	b.n	8008fca <_printf_float+0xb6>
 8009312:	2301      	movs	r3, #1
 8009314:	465a      	mov	r2, fp
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	f43f ae54 	beq.w	8008fca <_printf_float+0xb6>
 8009322:	f108 0801 	add.w	r8, r8, #1
 8009326:	45d0      	cmp	r8, sl
 8009328:	dbf3      	blt.n	8009312 <_printf_float+0x3fe>
 800932a:	464b      	mov	r3, r9
 800932c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009330:	e6df      	b.n	80090f2 <_printf_float+0x1de>
 8009332:	f04f 0800 	mov.w	r8, #0
 8009336:	f104 0b1a 	add.w	fp, r4, #26
 800933a:	e7f4      	b.n	8009326 <_printf_float+0x412>
 800933c:	2301      	movs	r3, #1
 800933e:	4642      	mov	r2, r8
 8009340:	e7e1      	b.n	8009306 <_printf_float+0x3f2>
 8009342:	2301      	movs	r3, #1
 8009344:	464a      	mov	r2, r9
 8009346:	4631      	mov	r1, r6
 8009348:	4628      	mov	r0, r5
 800934a:	47b8      	blx	r7
 800934c:	3001      	adds	r0, #1
 800934e:	f43f ae3c 	beq.w	8008fca <_printf_float+0xb6>
 8009352:	f108 0801 	add.w	r8, r8, #1
 8009356:	68e3      	ldr	r3, [r4, #12]
 8009358:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800935a:	1a5b      	subs	r3, r3, r1
 800935c:	4543      	cmp	r3, r8
 800935e:	dcf0      	bgt.n	8009342 <_printf_float+0x42e>
 8009360:	e6fc      	b.n	800915c <_printf_float+0x248>
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	f104 0919 	add.w	r9, r4, #25
 800936a:	e7f4      	b.n	8009356 <_printf_float+0x442>

0800936c <_printf_common>:
 800936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	4616      	mov	r6, r2
 8009372:	4698      	mov	r8, r3
 8009374:	688a      	ldr	r2, [r1, #8]
 8009376:	690b      	ldr	r3, [r1, #16]
 8009378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800937c:	4293      	cmp	r3, r2
 800937e:	bfb8      	it	lt
 8009380:	4613      	movlt	r3, r2
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009388:	4607      	mov	r7, r0
 800938a:	460c      	mov	r4, r1
 800938c:	b10a      	cbz	r2, 8009392 <_printf_common+0x26>
 800938e:	3301      	adds	r3, #1
 8009390:	6033      	str	r3, [r6, #0]
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	0699      	lsls	r1, r3, #26
 8009396:	bf42      	ittt	mi
 8009398:	6833      	ldrmi	r3, [r6, #0]
 800939a:	3302      	addmi	r3, #2
 800939c:	6033      	strmi	r3, [r6, #0]
 800939e:	6825      	ldr	r5, [r4, #0]
 80093a0:	f015 0506 	ands.w	r5, r5, #6
 80093a4:	d106      	bne.n	80093b4 <_printf_common+0x48>
 80093a6:	f104 0a19 	add.w	sl, r4, #25
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	6832      	ldr	r2, [r6, #0]
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	dc26      	bgt.n	8009402 <_printf_common+0x96>
 80093b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	3b00      	subs	r3, #0
 80093bc:	bf18      	it	ne
 80093be:	2301      	movne	r3, #1
 80093c0:	0692      	lsls	r2, r2, #26
 80093c2:	d42b      	bmi.n	800941c <_printf_common+0xb0>
 80093c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093c8:	4641      	mov	r1, r8
 80093ca:	4638      	mov	r0, r7
 80093cc:	47c8      	blx	r9
 80093ce:	3001      	adds	r0, #1
 80093d0:	d01e      	beq.n	8009410 <_printf_common+0xa4>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	f003 0306 	and.w	r3, r3, #6
 80093da:	2b04      	cmp	r3, #4
 80093dc:	bf02      	ittt	eq
 80093de:	68e5      	ldreq	r5, [r4, #12]
 80093e0:	6833      	ldreq	r3, [r6, #0]
 80093e2:	1aed      	subeq	r5, r5, r3
 80093e4:	68a3      	ldr	r3, [r4, #8]
 80093e6:	bf0c      	ite	eq
 80093e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093ec:	2500      	movne	r5, #0
 80093ee:	4293      	cmp	r3, r2
 80093f0:	bfc4      	itt	gt
 80093f2:	1a9b      	subgt	r3, r3, r2
 80093f4:	18ed      	addgt	r5, r5, r3
 80093f6:	2600      	movs	r6, #0
 80093f8:	341a      	adds	r4, #26
 80093fa:	42b5      	cmp	r5, r6
 80093fc:	d11a      	bne.n	8009434 <_printf_common+0xc8>
 80093fe:	2000      	movs	r0, #0
 8009400:	e008      	b.n	8009414 <_printf_common+0xa8>
 8009402:	2301      	movs	r3, #1
 8009404:	4652      	mov	r2, sl
 8009406:	4641      	mov	r1, r8
 8009408:	4638      	mov	r0, r7
 800940a:	47c8      	blx	r9
 800940c:	3001      	adds	r0, #1
 800940e:	d103      	bne.n	8009418 <_printf_common+0xac>
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009418:	3501      	adds	r5, #1
 800941a:	e7c6      	b.n	80093aa <_printf_common+0x3e>
 800941c:	18e1      	adds	r1, r4, r3
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	2030      	movs	r0, #48	@ 0x30
 8009422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009426:	4422      	add	r2, r4
 8009428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800942c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009430:	3302      	adds	r3, #2
 8009432:	e7c7      	b.n	80093c4 <_printf_common+0x58>
 8009434:	2301      	movs	r3, #1
 8009436:	4622      	mov	r2, r4
 8009438:	4641      	mov	r1, r8
 800943a:	4638      	mov	r0, r7
 800943c:	47c8      	blx	r9
 800943e:	3001      	adds	r0, #1
 8009440:	d0e6      	beq.n	8009410 <_printf_common+0xa4>
 8009442:	3601      	adds	r6, #1
 8009444:	e7d9      	b.n	80093fa <_printf_common+0x8e>
	...

08009448 <_printf_i>:
 8009448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800944c:	7e0f      	ldrb	r7, [r1, #24]
 800944e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009450:	2f78      	cmp	r7, #120	@ 0x78
 8009452:	4691      	mov	r9, r2
 8009454:	4680      	mov	r8, r0
 8009456:	460c      	mov	r4, r1
 8009458:	469a      	mov	sl, r3
 800945a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800945e:	d807      	bhi.n	8009470 <_printf_i+0x28>
 8009460:	2f62      	cmp	r7, #98	@ 0x62
 8009462:	d80a      	bhi.n	800947a <_printf_i+0x32>
 8009464:	2f00      	cmp	r7, #0
 8009466:	f000 80d2 	beq.w	800960e <_printf_i+0x1c6>
 800946a:	2f58      	cmp	r7, #88	@ 0x58
 800946c:	f000 80b9 	beq.w	80095e2 <_printf_i+0x19a>
 8009470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009478:	e03a      	b.n	80094f0 <_printf_i+0xa8>
 800947a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800947e:	2b15      	cmp	r3, #21
 8009480:	d8f6      	bhi.n	8009470 <_printf_i+0x28>
 8009482:	a101      	add	r1, pc, #4	@ (adr r1, 8009488 <_printf_i+0x40>)
 8009484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094f5 	.word	0x080094f5
 8009490:	08009471 	.word	0x08009471
 8009494:	08009471 	.word	0x08009471
 8009498:	08009471 	.word	0x08009471
 800949c:	08009471 	.word	0x08009471
 80094a0:	080094f5 	.word	0x080094f5
 80094a4:	08009471 	.word	0x08009471
 80094a8:	08009471 	.word	0x08009471
 80094ac:	08009471 	.word	0x08009471
 80094b0:	08009471 	.word	0x08009471
 80094b4:	080095f5 	.word	0x080095f5
 80094b8:	0800951f 	.word	0x0800951f
 80094bc:	080095af 	.word	0x080095af
 80094c0:	08009471 	.word	0x08009471
 80094c4:	08009471 	.word	0x08009471
 80094c8:	08009617 	.word	0x08009617
 80094cc:	08009471 	.word	0x08009471
 80094d0:	0800951f 	.word	0x0800951f
 80094d4:	08009471 	.word	0x08009471
 80094d8:	08009471 	.word	0x08009471
 80094dc:	080095b7 	.word	0x080095b7
 80094e0:	6833      	ldr	r3, [r6, #0]
 80094e2:	1d1a      	adds	r2, r3, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6032      	str	r2, [r6, #0]
 80094e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094f0:	2301      	movs	r3, #1
 80094f2:	e09d      	b.n	8009630 <_printf_i+0x1e8>
 80094f4:	6833      	ldr	r3, [r6, #0]
 80094f6:	6820      	ldr	r0, [r4, #0]
 80094f8:	1d19      	adds	r1, r3, #4
 80094fa:	6031      	str	r1, [r6, #0]
 80094fc:	0606      	lsls	r6, r0, #24
 80094fe:	d501      	bpl.n	8009504 <_printf_i+0xbc>
 8009500:	681d      	ldr	r5, [r3, #0]
 8009502:	e003      	b.n	800950c <_printf_i+0xc4>
 8009504:	0645      	lsls	r5, r0, #25
 8009506:	d5fb      	bpl.n	8009500 <_printf_i+0xb8>
 8009508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800950c:	2d00      	cmp	r5, #0
 800950e:	da03      	bge.n	8009518 <_printf_i+0xd0>
 8009510:	232d      	movs	r3, #45	@ 0x2d
 8009512:	426d      	negs	r5, r5
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009518:	4859      	ldr	r0, [pc, #356]	@ (8009680 <_printf_i+0x238>)
 800951a:	230a      	movs	r3, #10
 800951c:	e011      	b.n	8009542 <_printf_i+0xfa>
 800951e:	6821      	ldr	r1, [r4, #0]
 8009520:	6833      	ldr	r3, [r6, #0]
 8009522:	0608      	lsls	r0, r1, #24
 8009524:	f853 5b04 	ldr.w	r5, [r3], #4
 8009528:	d402      	bmi.n	8009530 <_printf_i+0xe8>
 800952a:	0649      	lsls	r1, r1, #25
 800952c:	bf48      	it	mi
 800952e:	b2ad      	uxthmi	r5, r5
 8009530:	2f6f      	cmp	r7, #111	@ 0x6f
 8009532:	4853      	ldr	r0, [pc, #332]	@ (8009680 <_printf_i+0x238>)
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	bf14      	ite	ne
 8009538:	230a      	movne	r3, #10
 800953a:	2308      	moveq	r3, #8
 800953c:	2100      	movs	r1, #0
 800953e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009542:	6866      	ldr	r6, [r4, #4]
 8009544:	60a6      	str	r6, [r4, #8]
 8009546:	2e00      	cmp	r6, #0
 8009548:	bfa2      	ittt	ge
 800954a:	6821      	ldrge	r1, [r4, #0]
 800954c:	f021 0104 	bicge.w	r1, r1, #4
 8009550:	6021      	strge	r1, [r4, #0]
 8009552:	b90d      	cbnz	r5, 8009558 <_printf_i+0x110>
 8009554:	2e00      	cmp	r6, #0
 8009556:	d04b      	beq.n	80095f0 <_printf_i+0x1a8>
 8009558:	4616      	mov	r6, r2
 800955a:	fbb5 f1f3 	udiv	r1, r5, r3
 800955e:	fb03 5711 	mls	r7, r3, r1, r5
 8009562:	5dc7      	ldrb	r7, [r0, r7]
 8009564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009568:	462f      	mov	r7, r5
 800956a:	42bb      	cmp	r3, r7
 800956c:	460d      	mov	r5, r1
 800956e:	d9f4      	bls.n	800955a <_printf_i+0x112>
 8009570:	2b08      	cmp	r3, #8
 8009572:	d10b      	bne.n	800958c <_printf_i+0x144>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07df      	lsls	r7, r3, #31
 8009578:	d508      	bpl.n	800958c <_printf_i+0x144>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	6861      	ldr	r1, [r4, #4]
 800957e:	4299      	cmp	r1, r3
 8009580:	bfde      	ittt	le
 8009582:	2330      	movle	r3, #48	@ 0x30
 8009584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800958c:	1b92      	subs	r2, r2, r6
 800958e:	6122      	str	r2, [r4, #16]
 8009590:	f8cd a000 	str.w	sl, [sp]
 8009594:	464b      	mov	r3, r9
 8009596:	aa03      	add	r2, sp, #12
 8009598:	4621      	mov	r1, r4
 800959a:	4640      	mov	r0, r8
 800959c:	f7ff fee6 	bl	800936c <_printf_common>
 80095a0:	3001      	adds	r0, #1
 80095a2:	d14a      	bne.n	800963a <_printf_i+0x1f2>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b004      	add	sp, #16
 80095aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	f043 0320 	orr.w	r3, r3, #32
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	4833      	ldr	r0, [pc, #204]	@ (8009684 <_printf_i+0x23c>)
 80095b8:	2778      	movs	r7, #120	@ 0x78
 80095ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	6831      	ldr	r1, [r6, #0]
 80095c2:	061f      	lsls	r7, r3, #24
 80095c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095c8:	d402      	bmi.n	80095d0 <_printf_i+0x188>
 80095ca:	065f      	lsls	r7, r3, #25
 80095cc:	bf48      	it	mi
 80095ce:	b2ad      	uxthmi	r5, r5
 80095d0:	6031      	str	r1, [r6, #0]
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	bf44      	itt	mi
 80095d6:	f043 0320 	orrmi.w	r3, r3, #32
 80095da:	6023      	strmi	r3, [r4, #0]
 80095dc:	b11d      	cbz	r5, 80095e6 <_printf_i+0x19e>
 80095de:	2310      	movs	r3, #16
 80095e0:	e7ac      	b.n	800953c <_printf_i+0xf4>
 80095e2:	4827      	ldr	r0, [pc, #156]	@ (8009680 <_printf_i+0x238>)
 80095e4:	e7e9      	b.n	80095ba <_printf_i+0x172>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	f023 0320 	bic.w	r3, r3, #32
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	e7f6      	b.n	80095de <_printf_i+0x196>
 80095f0:	4616      	mov	r6, r2
 80095f2:	e7bd      	b.n	8009570 <_printf_i+0x128>
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	6825      	ldr	r5, [r4, #0]
 80095f8:	6961      	ldr	r1, [r4, #20]
 80095fa:	1d18      	adds	r0, r3, #4
 80095fc:	6030      	str	r0, [r6, #0]
 80095fe:	062e      	lsls	r6, r5, #24
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	d501      	bpl.n	8009608 <_printf_i+0x1c0>
 8009604:	6019      	str	r1, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0x1c6>
 8009608:	0668      	lsls	r0, r5, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0x1bc>
 800960c:	8019      	strh	r1, [r3, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	4616      	mov	r6, r2
 8009614:	e7bc      	b.n	8009590 <_printf_i+0x148>
 8009616:	6833      	ldr	r3, [r6, #0]
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	6032      	str	r2, [r6, #0]
 800961c:	681e      	ldr	r6, [r3, #0]
 800961e:	6862      	ldr	r2, [r4, #4]
 8009620:	2100      	movs	r1, #0
 8009622:	4630      	mov	r0, r6
 8009624:	f7f6 fde4 	bl	80001f0 <memchr>
 8009628:	b108      	cbz	r0, 800962e <_printf_i+0x1e6>
 800962a:	1b80      	subs	r0, r0, r6
 800962c:	6060      	str	r0, [r4, #4]
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	2300      	movs	r3, #0
 8009634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009638:	e7aa      	b.n	8009590 <_printf_i+0x148>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	4632      	mov	r2, r6
 800963e:	4649      	mov	r1, r9
 8009640:	4640      	mov	r0, r8
 8009642:	47d0      	blx	sl
 8009644:	3001      	adds	r0, #1
 8009646:	d0ad      	beq.n	80095a4 <_printf_i+0x15c>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	079b      	lsls	r3, r3, #30
 800964c:	d413      	bmi.n	8009676 <_printf_i+0x22e>
 800964e:	68e0      	ldr	r0, [r4, #12]
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	4298      	cmp	r0, r3
 8009654:	bfb8      	it	lt
 8009656:	4618      	movlt	r0, r3
 8009658:	e7a6      	b.n	80095a8 <_printf_i+0x160>
 800965a:	2301      	movs	r3, #1
 800965c:	4632      	mov	r2, r6
 800965e:	4649      	mov	r1, r9
 8009660:	4640      	mov	r0, r8
 8009662:	47d0      	blx	sl
 8009664:	3001      	adds	r0, #1
 8009666:	d09d      	beq.n	80095a4 <_printf_i+0x15c>
 8009668:	3501      	adds	r5, #1
 800966a:	68e3      	ldr	r3, [r4, #12]
 800966c:	9903      	ldr	r1, [sp, #12]
 800966e:	1a5b      	subs	r3, r3, r1
 8009670:	42ab      	cmp	r3, r5
 8009672:	dcf2      	bgt.n	800965a <_printf_i+0x212>
 8009674:	e7eb      	b.n	800964e <_printf_i+0x206>
 8009676:	2500      	movs	r5, #0
 8009678:	f104 0619 	add.w	r6, r4, #25
 800967c:	e7f5      	b.n	800966a <_printf_i+0x222>
 800967e:	bf00      	nop
 8009680:	0801000c 	.word	0x0801000c
 8009684:	0801001d 	.word	0x0801001d

08009688 <_scanf_float>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	b087      	sub	sp, #28
 800968e:	4617      	mov	r7, r2
 8009690:	9303      	str	r3, [sp, #12]
 8009692:	688b      	ldr	r3, [r1, #8]
 8009694:	1e5a      	subs	r2, r3, #1
 8009696:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800969a:	bf81      	itttt	hi
 800969c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80096a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80096a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80096a8:	608b      	strhi	r3, [r1, #8]
 80096aa:	680b      	ldr	r3, [r1, #0]
 80096ac:	460a      	mov	r2, r1
 80096ae:	f04f 0500 	mov.w	r5, #0
 80096b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80096b6:	f842 3b1c 	str.w	r3, [r2], #28
 80096ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80096be:	4680      	mov	r8, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	bf98      	it	ls
 80096c4:	f04f 0b00 	movls.w	fp, #0
 80096c8:	9201      	str	r2, [sp, #4]
 80096ca:	4616      	mov	r6, r2
 80096cc:	46aa      	mov	sl, r5
 80096ce:	46a9      	mov	r9, r5
 80096d0:	9502      	str	r5, [sp, #8]
 80096d2:	68a2      	ldr	r2, [r4, #8]
 80096d4:	b152      	cbz	r2, 80096ec <_scanf_float+0x64>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b4e      	cmp	r3, #78	@ 0x4e
 80096dc:	d864      	bhi.n	80097a8 <_scanf_float+0x120>
 80096de:	2b40      	cmp	r3, #64	@ 0x40
 80096e0:	d83c      	bhi.n	800975c <_scanf_float+0xd4>
 80096e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80096e6:	b2c8      	uxtb	r0, r1
 80096e8:	280e      	cmp	r0, #14
 80096ea:	d93a      	bls.n	8009762 <_scanf_float+0xda>
 80096ec:	f1b9 0f00 	cmp.w	r9, #0
 80096f0:	d003      	beq.n	80096fa <_scanf_float+0x72>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096fe:	f1ba 0f01 	cmp.w	sl, #1
 8009702:	f200 8117 	bhi.w	8009934 <_scanf_float+0x2ac>
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	429e      	cmp	r6, r3
 800970a:	f200 8108 	bhi.w	800991e <_scanf_float+0x296>
 800970e:	2001      	movs	r0, #1
 8009710:	b007      	add	sp, #28
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800971a:	2a0d      	cmp	r2, #13
 800971c:	d8e6      	bhi.n	80096ec <_scanf_float+0x64>
 800971e:	a101      	add	r1, pc, #4	@ (adr r1, 8009724 <_scanf_float+0x9c>)
 8009720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009724:	0800986b 	.word	0x0800986b
 8009728:	080096ed 	.word	0x080096ed
 800972c:	080096ed 	.word	0x080096ed
 8009730:	080096ed 	.word	0x080096ed
 8009734:	080098cb 	.word	0x080098cb
 8009738:	080098a3 	.word	0x080098a3
 800973c:	080096ed 	.word	0x080096ed
 8009740:	080096ed 	.word	0x080096ed
 8009744:	08009879 	.word	0x08009879
 8009748:	080096ed 	.word	0x080096ed
 800974c:	080096ed 	.word	0x080096ed
 8009750:	080096ed 	.word	0x080096ed
 8009754:	080096ed 	.word	0x080096ed
 8009758:	08009831 	.word	0x08009831
 800975c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009760:	e7db      	b.n	800971a <_scanf_float+0x92>
 8009762:	290e      	cmp	r1, #14
 8009764:	d8c2      	bhi.n	80096ec <_scanf_float+0x64>
 8009766:	a001      	add	r0, pc, #4	@ (adr r0, 800976c <_scanf_float+0xe4>)
 8009768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800976c:	08009821 	.word	0x08009821
 8009770:	080096ed 	.word	0x080096ed
 8009774:	08009821 	.word	0x08009821
 8009778:	080098b7 	.word	0x080098b7
 800977c:	080096ed 	.word	0x080096ed
 8009780:	080097c9 	.word	0x080097c9
 8009784:	08009807 	.word	0x08009807
 8009788:	08009807 	.word	0x08009807
 800978c:	08009807 	.word	0x08009807
 8009790:	08009807 	.word	0x08009807
 8009794:	08009807 	.word	0x08009807
 8009798:	08009807 	.word	0x08009807
 800979c:	08009807 	.word	0x08009807
 80097a0:	08009807 	.word	0x08009807
 80097a4:	08009807 	.word	0x08009807
 80097a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80097aa:	d809      	bhi.n	80097c0 <_scanf_float+0x138>
 80097ac:	2b60      	cmp	r3, #96	@ 0x60
 80097ae:	d8b2      	bhi.n	8009716 <_scanf_float+0x8e>
 80097b0:	2b54      	cmp	r3, #84	@ 0x54
 80097b2:	d07b      	beq.n	80098ac <_scanf_float+0x224>
 80097b4:	2b59      	cmp	r3, #89	@ 0x59
 80097b6:	d199      	bne.n	80096ec <_scanf_float+0x64>
 80097b8:	2d07      	cmp	r5, #7
 80097ba:	d197      	bne.n	80096ec <_scanf_float+0x64>
 80097bc:	2508      	movs	r5, #8
 80097be:	e02c      	b.n	800981a <_scanf_float+0x192>
 80097c0:	2b74      	cmp	r3, #116	@ 0x74
 80097c2:	d073      	beq.n	80098ac <_scanf_float+0x224>
 80097c4:	2b79      	cmp	r3, #121	@ 0x79
 80097c6:	e7f6      	b.n	80097b6 <_scanf_float+0x12e>
 80097c8:	6821      	ldr	r1, [r4, #0]
 80097ca:	05c8      	lsls	r0, r1, #23
 80097cc:	d51b      	bpl.n	8009806 <_scanf_float+0x17e>
 80097ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80097d2:	6021      	str	r1, [r4, #0]
 80097d4:	f109 0901 	add.w	r9, r9, #1
 80097d8:	f1bb 0f00 	cmp.w	fp, #0
 80097dc:	d003      	beq.n	80097e6 <_scanf_float+0x15e>
 80097de:	3201      	adds	r2, #1
 80097e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097e4:	60a2      	str	r2, [r4, #8]
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	3301      	adds	r3, #1
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	f340 8087 	ble.w	800990c <_scanf_float+0x284>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	3301      	adds	r3, #1
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	e765      	b.n	80096d2 <_scanf_float+0x4a>
 8009806:	eb1a 0105 	adds.w	r1, sl, r5
 800980a:	f47f af6f 	bne.w	80096ec <_scanf_float+0x64>
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	460d      	mov	r5, r1
 8009818:	468a      	mov	sl, r1
 800981a:	f806 3b01 	strb.w	r3, [r6], #1
 800981e:	e7e2      	b.n	80097e6 <_scanf_float+0x15e>
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	0610      	lsls	r0, r2, #24
 8009824:	f57f af62 	bpl.w	80096ec <_scanf_float+0x64>
 8009828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	e7f4      	b.n	800981a <_scanf_float+0x192>
 8009830:	f1ba 0f00 	cmp.w	sl, #0
 8009834:	d10e      	bne.n	8009854 <_scanf_float+0x1cc>
 8009836:	f1b9 0f00 	cmp.w	r9, #0
 800983a:	d10e      	bne.n	800985a <_scanf_float+0x1d2>
 800983c:	6822      	ldr	r2, [r4, #0]
 800983e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009842:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009846:	d108      	bne.n	800985a <_scanf_float+0x1d2>
 8009848:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	f04f 0a01 	mov.w	sl, #1
 8009852:	e7e2      	b.n	800981a <_scanf_float+0x192>
 8009854:	f1ba 0f02 	cmp.w	sl, #2
 8009858:	d055      	beq.n	8009906 <_scanf_float+0x27e>
 800985a:	2d01      	cmp	r5, #1
 800985c:	d002      	beq.n	8009864 <_scanf_float+0x1dc>
 800985e:	2d04      	cmp	r5, #4
 8009860:	f47f af44 	bne.w	80096ec <_scanf_float+0x64>
 8009864:	3501      	adds	r5, #1
 8009866:	b2ed      	uxtb	r5, r5
 8009868:	e7d7      	b.n	800981a <_scanf_float+0x192>
 800986a:	f1ba 0f01 	cmp.w	sl, #1
 800986e:	f47f af3d 	bne.w	80096ec <_scanf_float+0x64>
 8009872:	f04f 0a02 	mov.w	sl, #2
 8009876:	e7d0      	b.n	800981a <_scanf_float+0x192>
 8009878:	b97d      	cbnz	r5, 800989a <_scanf_float+0x212>
 800987a:	f1b9 0f00 	cmp.w	r9, #0
 800987e:	f47f af38 	bne.w	80096f2 <_scanf_float+0x6a>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009888:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800988c:	f040 8103 	bne.w	8009a96 <_scanf_float+0x40e>
 8009890:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	2501      	movs	r5, #1
 8009898:	e7bf      	b.n	800981a <_scanf_float+0x192>
 800989a:	2d03      	cmp	r5, #3
 800989c:	d0e2      	beq.n	8009864 <_scanf_float+0x1dc>
 800989e:	2d05      	cmp	r5, #5
 80098a0:	e7de      	b.n	8009860 <_scanf_float+0x1d8>
 80098a2:	2d02      	cmp	r5, #2
 80098a4:	f47f af22 	bne.w	80096ec <_scanf_float+0x64>
 80098a8:	2503      	movs	r5, #3
 80098aa:	e7b6      	b.n	800981a <_scanf_float+0x192>
 80098ac:	2d06      	cmp	r5, #6
 80098ae:	f47f af1d 	bne.w	80096ec <_scanf_float+0x64>
 80098b2:	2507      	movs	r5, #7
 80098b4:	e7b1      	b.n	800981a <_scanf_float+0x192>
 80098b6:	6822      	ldr	r2, [r4, #0]
 80098b8:	0591      	lsls	r1, r2, #22
 80098ba:	f57f af17 	bpl.w	80096ec <_scanf_float+0x64>
 80098be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80098c2:	6022      	str	r2, [r4, #0]
 80098c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80098c8:	e7a7      	b.n	800981a <_scanf_float+0x192>
 80098ca:	6822      	ldr	r2, [r4, #0]
 80098cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80098d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80098d4:	d006      	beq.n	80098e4 <_scanf_float+0x25c>
 80098d6:	0550      	lsls	r0, r2, #21
 80098d8:	f57f af08 	bpl.w	80096ec <_scanf_float+0x64>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	f000 80d9 	beq.w	8009a96 <_scanf_float+0x40e>
 80098e4:	0591      	lsls	r1, r2, #22
 80098e6:	bf58      	it	pl
 80098e8:	9902      	ldrpl	r1, [sp, #8]
 80098ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098ee:	bf58      	it	pl
 80098f0:	eba9 0101 	subpl.w	r1, r9, r1
 80098f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80098f8:	bf58      	it	pl
 80098fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098fe:	6022      	str	r2, [r4, #0]
 8009900:	f04f 0900 	mov.w	r9, #0
 8009904:	e789      	b.n	800981a <_scanf_float+0x192>
 8009906:	f04f 0a03 	mov.w	sl, #3
 800990a:	e786      	b.n	800981a <_scanf_float+0x192>
 800990c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009910:	4639      	mov	r1, r7
 8009912:	4640      	mov	r0, r8
 8009914:	4798      	blx	r3
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f aedb 	beq.w	80096d2 <_scanf_float+0x4a>
 800991c:	e6e6      	b.n	80096ec <_scanf_float+0x64>
 800991e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009926:	463a      	mov	r2, r7
 8009928:	4640      	mov	r0, r8
 800992a:	4798      	blx	r3
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	3b01      	subs	r3, #1
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	e6e8      	b.n	8009706 <_scanf_float+0x7e>
 8009934:	1e6b      	subs	r3, r5, #1
 8009936:	2b06      	cmp	r3, #6
 8009938:	d824      	bhi.n	8009984 <_scanf_float+0x2fc>
 800993a:	2d02      	cmp	r5, #2
 800993c:	d836      	bhi.n	80099ac <_scanf_float+0x324>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	429e      	cmp	r6, r3
 8009942:	f67f aee4 	bls.w	800970e <_scanf_float+0x86>
 8009946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800994a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800994e:	463a      	mov	r2, r7
 8009950:	4640      	mov	r0, r8
 8009952:	4798      	blx	r3
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	3b01      	subs	r3, #1
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	e7f0      	b.n	800993e <_scanf_float+0x2b6>
 800995c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009960:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009964:	463a      	mov	r2, r7
 8009966:	4640      	mov	r0, r8
 8009968:	4798      	blx	r3
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	3b01      	subs	r3, #1
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009974:	fa5f fa8a 	uxtb.w	sl, sl
 8009978:	f1ba 0f02 	cmp.w	sl, #2
 800997c:	d1ee      	bne.n	800995c <_scanf_float+0x2d4>
 800997e:	3d03      	subs	r5, #3
 8009980:	b2ed      	uxtb	r5, r5
 8009982:	1b76      	subs	r6, r6, r5
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	05da      	lsls	r2, r3, #23
 8009988:	d530      	bpl.n	80099ec <_scanf_float+0x364>
 800998a:	055b      	lsls	r3, r3, #21
 800998c:	d511      	bpl.n	80099b2 <_scanf_float+0x32a>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	429e      	cmp	r6, r3
 8009992:	f67f aebc 	bls.w	800970e <_scanf_float+0x86>
 8009996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800999a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800999e:	463a      	mov	r2, r7
 80099a0:	4640      	mov	r0, r8
 80099a2:	4798      	blx	r3
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	6123      	str	r3, [r4, #16]
 80099aa:	e7f0      	b.n	800998e <_scanf_float+0x306>
 80099ac:	46aa      	mov	sl, r5
 80099ae:	46b3      	mov	fp, r6
 80099b0:	e7de      	b.n	8009970 <_scanf_float+0x2e8>
 80099b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	2965      	cmp	r1, #101	@ 0x65
 80099ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80099be:	f106 35ff 	add.w	r5, r6, #4294967295
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	d00c      	beq.n	80099e0 <_scanf_float+0x358>
 80099c6:	2945      	cmp	r1, #69	@ 0x45
 80099c8:	d00a      	beq.n	80099e0 <_scanf_float+0x358>
 80099ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099ce:	463a      	mov	r2, r7
 80099d0:	4640      	mov	r0, r8
 80099d2:	4798      	blx	r3
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80099da:	3b01      	subs	r3, #1
 80099dc:	1eb5      	subs	r5, r6, #2
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099e4:	463a      	mov	r2, r7
 80099e6:	4640      	mov	r0, r8
 80099e8:	4798      	blx	r3
 80099ea:	462e      	mov	r6, r5
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	f012 0210 	ands.w	r2, r2, #16
 80099f2:	d001      	beq.n	80099f8 <_scanf_float+0x370>
 80099f4:	2000      	movs	r0, #0
 80099f6:	e68b      	b.n	8009710 <_scanf_float+0x88>
 80099f8:	7032      	strb	r2, [r6, #0]
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a04:	d11c      	bne.n	8009a40 <_scanf_float+0x3b8>
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	454b      	cmp	r3, r9
 8009a0a:	eba3 0209 	sub.w	r2, r3, r9
 8009a0e:	d123      	bne.n	8009a58 <_scanf_float+0x3d0>
 8009a10:	2200      	movs	r2, #0
 8009a12:	9901      	ldr	r1, [sp, #4]
 8009a14:	4640      	mov	r0, r8
 8009a16:	f002 fd53 	bl	800c4c0 <_strtod_r>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	6825      	ldr	r5, [r4, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f015 0f02 	tst.w	r5, #2
 8009a24:	4606      	mov	r6, r0
 8009a26:	460f      	mov	r7, r1
 8009a28:	f103 0204 	add.w	r2, r3, #4
 8009a2c:	d01f      	beq.n	8009a6e <_scanf_float+0x3e6>
 8009a2e:	9903      	ldr	r1, [sp, #12]
 8009a30:	600a      	str	r2, [r1, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	e9c3 6700 	strd	r6, r7, [r3]
 8009a38:	68e3      	ldr	r3, [r4, #12]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	60e3      	str	r3, [r4, #12]
 8009a3e:	e7d9      	b.n	80099f4 <_scanf_float+0x36c>
 8009a40:	9b04      	ldr	r3, [sp, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0e4      	beq.n	8009a10 <_scanf_float+0x388>
 8009a46:	9905      	ldr	r1, [sp, #20]
 8009a48:	230a      	movs	r3, #10
 8009a4a:	3101      	adds	r1, #1
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	f002 fdb7 	bl	800c5c0 <_strtol_r>
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	9e05      	ldr	r6, [sp, #20]
 8009a56:	1ac2      	subs	r2, r0, r3
 8009a58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009a5c:	429e      	cmp	r6, r3
 8009a5e:	bf28      	it	cs
 8009a60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009a64:	490d      	ldr	r1, [pc, #52]	@ (8009a9c <_scanf_float+0x414>)
 8009a66:	4630      	mov	r0, r6
 8009a68:	f000 f982 	bl	8009d70 <siprintf>
 8009a6c:	e7d0      	b.n	8009a10 <_scanf_float+0x388>
 8009a6e:	076d      	lsls	r5, r5, #29
 8009a70:	d4dd      	bmi.n	8009a2e <_scanf_float+0x3a6>
 8009a72:	9d03      	ldr	r5, [sp, #12]
 8009a74:	602a      	str	r2, [r5, #0]
 8009a76:	681d      	ldr	r5, [r3, #0]
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	f7f7 f866 	bl	8000b4c <__aeabi_dcmpun>
 8009a80:	b120      	cbz	r0, 8009a8c <_scanf_float+0x404>
 8009a82:	4807      	ldr	r0, [pc, #28]	@ (8009aa0 <_scanf_float+0x418>)
 8009a84:	f000 fb26 	bl	800a0d4 <nanf>
 8009a88:	6028      	str	r0, [r5, #0]
 8009a8a:	e7d5      	b.n	8009a38 <_scanf_float+0x3b0>
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	4639      	mov	r1, r7
 8009a90:	f7f7 f8ba 	bl	8000c08 <__aeabi_d2f>
 8009a94:	e7f8      	b.n	8009a88 <_scanf_float+0x400>
 8009a96:	f04f 0900 	mov.w	r9, #0
 8009a9a:	e62e      	b.n	80096fa <_scanf_float+0x72>
 8009a9c:	0801002e 	.word	0x0801002e
 8009aa0:	080103e0 	.word	0x080103e0

08009aa4 <std>:
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	b510      	push	{r4, lr}
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8009aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ab2:	6083      	str	r3, [r0, #8]
 8009ab4:	8181      	strh	r1, [r0, #12]
 8009ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ab8:	81c2      	strh	r2, [r0, #14]
 8009aba:	6183      	str	r3, [r0, #24]
 8009abc:	4619      	mov	r1, r3
 8009abe:	2208      	movs	r2, #8
 8009ac0:	305c      	adds	r0, #92	@ 0x5c
 8009ac2:	f000 fa79 	bl	8009fb8 <memset>
 8009ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8009afc <std+0x58>)
 8009ac8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009aca:	4b0d      	ldr	r3, [pc, #52]	@ (8009b00 <std+0x5c>)
 8009acc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ace:	4b0d      	ldr	r3, [pc, #52]	@ (8009b04 <std+0x60>)
 8009ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b08 <std+0x64>)
 8009ad4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b0c <std+0x68>)
 8009ad8:	6224      	str	r4, [r4, #32]
 8009ada:	429c      	cmp	r4, r3
 8009adc:	d006      	beq.n	8009aec <std+0x48>
 8009ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ae2:	4294      	cmp	r4, r2
 8009ae4:	d002      	beq.n	8009aec <std+0x48>
 8009ae6:	33d0      	adds	r3, #208	@ 0xd0
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d105      	bne.n	8009af8 <std+0x54>
 8009aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af4:	f000 badc 	b.w	800a0b0 <__retarget_lock_init_recursive>
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	bf00      	nop
 8009afc:	08009e05 	.word	0x08009e05
 8009b00:	08009e2b 	.word	0x08009e2b
 8009b04:	08009e63 	.word	0x08009e63
 8009b08:	08009e87 	.word	0x08009e87
 8009b0c:	200051a4 	.word	0x200051a4

08009b10 <stdio_exit_handler>:
 8009b10:	4a02      	ldr	r2, [pc, #8]	@ (8009b1c <stdio_exit_handler+0xc>)
 8009b12:	4903      	ldr	r1, [pc, #12]	@ (8009b20 <stdio_exit_handler+0x10>)
 8009b14:	4803      	ldr	r0, [pc, #12]	@ (8009b24 <stdio_exit_handler+0x14>)
 8009b16:	f000 b869 	b.w	8009bec <_fwalk_sglue>
 8009b1a:	bf00      	nop
 8009b1c:	20000010 	.word	0x20000010
 8009b20:	0800d235 	.word	0x0800d235
 8009b24:	20000020 	.word	0x20000020

08009b28 <cleanup_stdio>:
 8009b28:	6841      	ldr	r1, [r0, #4]
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <cleanup_stdio+0x34>)
 8009b2c:	4299      	cmp	r1, r3
 8009b2e:	b510      	push	{r4, lr}
 8009b30:	4604      	mov	r4, r0
 8009b32:	d001      	beq.n	8009b38 <cleanup_stdio+0x10>
 8009b34:	f003 fb7e 	bl	800d234 <_fflush_r>
 8009b38:	68a1      	ldr	r1, [r4, #8]
 8009b3a:	4b09      	ldr	r3, [pc, #36]	@ (8009b60 <cleanup_stdio+0x38>)
 8009b3c:	4299      	cmp	r1, r3
 8009b3e:	d002      	beq.n	8009b46 <cleanup_stdio+0x1e>
 8009b40:	4620      	mov	r0, r4
 8009b42:	f003 fb77 	bl	800d234 <_fflush_r>
 8009b46:	68e1      	ldr	r1, [r4, #12]
 8009b48:	4b06      	ldr	r3, [pc, #24]	@ (8009b64 <cleanup_stdio+0x3c>)
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	d004      	beq.n	8009b58 <cleanup_stdio+0x30>
 8009b4e:	4620      	mov	r0, r4
 8009b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b54:	f003 bb6e 	b.w	800d234 <_fflush_r>
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	bf00      	nop
 8009b5c:	200051a4 	.word	0x200051a4
 8009b60:	2000520c 	.word	0x2000520c
 8009b64:	20005274 	.word	0x20005274

08009b68 <global_stdio_init.part.0>:
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b98 <global_stdio_init.part.0+0x30>)
 8009b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8009b9c <global_stdio_init.part.0+0x34>)
 8009b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ba0 <global_stdio_init.part.0+0x38>)
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	4620      	mov	r0, r4
 8009b74:	2200      	movs	r2, #0
 8009b76:	2104      	movs	r1, #4
 8009b78:	f7ff ff94 	bl	8009aa4 <std>
 8009b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b80:	2201      	movs	r2, #1
 8009b82:	2109      	movs	r1, #9
 8009b84:	f7ff ff8e 	bl	8009aa4 <std>
 8009b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b92:	2112      	movs	r1, #18
 8009b94:	f7ff bf86 	b.w	8009aa4 <std>
 8009b98:	200052dc 	.word	0x200052dc
 8009b9c:	200051a4 	.word	0x200051a4
 8009ba0:	08009b11 	.word	0x08009b11

08009ba4 <__sfp_lock_acquire>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	@ (8009bac <__sfp_lock_acquire+0x8>)
 8009ba6:	f000 ba84 	b.w	800a0b2 <__retarget_lock_acquire_recursive>
 8009baa:	bf00      	nop
 8009bac:	200052e5 	.word	0x200052e5

08009bb0 <__sfp_lock_release>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	@ (8009bb8 <__sfp_lock_release+0x8>)
 8009bb2:	f000 ba7f 	b.w	800a0b4 <__retarget_lock_release_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	200052e5 	.word	0x200052e5

08009bbc <__sinit>:
 8009bbc:	b510      	push	{r4, lr}
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	f7ff fff0 	bl	8009ba4 <__sfp_lock_acquire>
 8009bc4:	6a23      	ldr	r3, [r4, #32]
 8009bc6:	b11b      	cbz	r3, 8009bd0 <__sinit+0x14>
 8009bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bcc:	f7ff bff0 	b.w	8009bb0 <__sfp_lock_release>
 8009bd0:	4b04      	ldr	r3, [pc, #16]	@ (8009be4 <__sinit+0x28>)
 8009bd2:	6223      	str	r3, [r4, #32]
 8009bd4:	4b04      	ldr	r3, [pc, #16]	@ (8009be8 <__sinit+0x2c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f5      	bne.n	8009bc8 <__sinit+0xc>
 8009bdc:	f7ff ffc4 	bl	8009b68 <global_stdio_init.part.0>
 8009be0:	e7f2      	b.n	8009bc8 <__sinit+0xc>
 8009be2:	bf00      	nop
 8009be4:	08009b29 	.word	0x08009b29
 8009be8:	200052dc 	.word	0x200052dc

08009bec <_fwalk_sglue>:
 8009bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	4688      	mov	r8, r1
 8009bf4:	4614      	mov	r4, r2
 8009bf6:	2600      	movs	r6, #0
 8009bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8009c00:	d505      	bpl.n	8009c0e <_fwalk_sglue+0x22>
 8009c02:	6824      	ldr	r4, [r4, #0]
 8009c04:	2c00      	cmp	r4, #0
 8009c06:	d1f7      	bne.n	8009bf8 <_fwalk_sglue+0xc>
 8009c08:	4630      	mov	r0, r6
 8009c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0e:	89ab      	ldrh	r3, [r5, #12]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d907      	bls.n	8009c24 <_fwalk_sglue+0x38>
 8009c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	d003      	beq.n	8009c24 <_fwalk_sglue+0x38>
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	4638      	mov	r0, r7
 8009c20:	47c0      	blx	r8
 8009c22:	4306      	orrs	r6, r0
 8009c24:	3568      	adds	r5, #104	@ 0x68
 8009c26:	e7e9      	b.n	8009bfc <_fwalk_sglue+0x10>

08009c28 <iprintf>:
 8009c28:	b40f      	push	{r0, r1, r2, r3}
 8009c2a:	b507      	push	{r0, r1, r2, lr}
 8009c2c:	4906      	ldr	r1, [pc, #24]	@ (8009c48 <iprintf+0x20>)
 8009c2e:	ab04      	add	r3, sp, #16
 8009c30:	6808      	ldr	r0, [r1, #0]
 8009c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c36:	6881      	ldr	r1, [r0, #8]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	f003 f811 	bl	800cc60 <_vfiprintf_r>
 8009c3e:	b003      	add	sp, #12
 8009c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c44:	b004      	add	sp, #16
 8009c46:	4770      	bx	lr
 8009c48:	2000001c 	.word	0x2000001c

08009c4c <_puts_r>:
 8009c4c:	6a03      	ldr	r3, [r0, #32]
 8009c4e:	b570      	push	{r4, r5, r6, lr}
 8009c50:	6884      	ldr	r4, [r0, #8]
 8009c52:	4605      	mov	r5, r0
 8009c54:	460e      	mov	r6, r1
 8009c56:	b90b      	cbnz	r3, 8009c5c <_puts_r+0x10>
 8009c58:	f7ff ffb0 	bl	8009bbc <__sinit>
 8009c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c5e:	07db      	lsls	r3, r3, #31
 8009c60:	d405      	bmi.n	8009c6e <_puts_r+0x22>
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	0598      	lsls	r0, r3, #22
 8009c66:	d402      	bmi.n	8009c6e <_puts_r+0x22>
 8009c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c6a:	f000 fa22 	bl	800a0b2 <__retarget_lock_acquire_recursive>
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	0719      	lsls	r1, r3, #28
 8009c72:	d502      	bpl.n	8009c7a <_puts_r+0x2e>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d135      	bne.n	8009ce6 <_puts_r+0x9a>
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f000 f945 	bl	8009f0c <__swsetup_r>
 8009c82:	b380      	cbz	r0, 8009ce6 <_puts_r+0x9a>
 8009c84:	f04f 35ff 	mov.w	r5, #4294967295
 8009c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c8a:	07da      	lsls	r2, r3, #31
 8009c8c:	d405      	bmi.n	8009c9a <_puts_r+0x4e>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	059b      	lsls	r3, r3, #22
 8009c92:	d402      	bmi.n	8009c9a <_puts_r+0x4e>
 8009c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c96:	f000 fa0d 	bl	800a0b4 <__retarget_lock_release_recursive>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	bd70      	pop	{r4, r5, r6, pc}
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	da04      	bge.n	8009cac <_puts_r+0x60>
 8009ca2:	69a2      	ldr	r2, [r4, #24]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	dc17      	bgt.n	8009cd8 <_puts_r+0x8c>
 8009ca8:	290a      	cmp	r1, #10
 8009caa:	d015      	beq.n	8009cd8 <_puts_r+0x8c>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	6022      	str	r2, [r4, #0]
 8009cb2:	7019      	strb	r1, [r3, #0]
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d1ed      	bne.n	8009c9e <_puts_r+0x52>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da11      	bge.n	8009cea <_puts_r+0x9e>
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	210a      	movs	r1, #10
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f8df 	bl	8009e8e <__swbuf_r>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d0d7      	beq.n	8009c84 <_puts_r+0x38>
 8009cd4:	250a      	movs	r5, #10
 8009cd6:	e7d7      	b.n	8009c88 <_puts_r+0x3c>
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 f8d7 	bl	8009e8e <__swbuf_r>
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d1e7      	bne.n	8009cb4 <_puts_r+0x68>
 8009ce4:	e7ce      	b.n	8009c84 <_puts_r+0x38>
 8009ce6:	3e01      	subs	r6, #1
 8009ce8:	e7e4      	b.n	8009cb4 <_puts_r+0x68>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	6022      	str	r2, [r4, #0]
 8009cf0:	220a      	movs	r2, #10
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	e7ee      	b.n	8009cd4 <_puts_r+0x88>
	...

08009cf8 <puts>:
 8009cf8:	4b02      	ldr	r3, [pc, #8]	@ (8009d04 <puts+0xc>)
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	f7ff bfa5 	b.w	8009c4c <_puts_r>
 8009d02:	bf00      	nop
 8009d04:	2000001c 	.word	0x2000001c

08009d08 <sniprintf>:
 8009d08:	b40c      	push	{r2, r3}
 8009d0a:	b530      	push	{r4, r5, lr}
 8009d0c:	4b17      	ldr	r3, [pc, #92]	@ (8009d6c <sniprintf+0x64>)
 8009d0e:	1e0c      	subs	r4, r1, #0
 8009d10:	681d      	ldr	r5, [r3, #0]
 8009d12:	b09d      	sub	sp, #116	@ 0x74
 8009d14:	da08      	bge.n	8009d28 <sniprintf+0x20>
 8009d16:	238b      	movs	r3, #139	@ 0x8b
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1e:	b01d      	add	sp, #116	@ 0x74
 8009d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d24:	b002      	add	sp, #8
 8009d26:	4770      	bx	lr
 8009d28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d30:	bf14      	ite	ne
 8009d32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d36:	4623      	moveq	r3, r4
 8009d38:	9304      	str	r3, [sp, #16]
 8009d3a:	9307      	str	r3, [sp, #28]
 8009d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d40:	9002      	str	r0, [sp, #8]
 8009d42:	9006      	str	r0, [sp, #24]
 8009d44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d4a:	ab21      	add	r3, sp, #132	@ 0x84
 8009d4c:	a902      	add	r1, sp, #8
 8009d4e:	4628      	mov	r0, r5
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	f002 fc93 	bl	800c67c <_svfiprintf_r>
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	bfbc      	itt	lt
 8009d5a:	238b      	movlt	r3, #139	@ 0x8b
 8009d5c:	602b      	strlt	r3, [r5, #0]
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	d0dd      	beq.n	8009d1e <sniprintf+0x16>
 8009d62:	9b02      	ldr	r3, [sp, #8]
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	e7d9      	b.n	8009d1e <sniprintf+0x16>
 8009d6a:	bf00      	nop
 8009d6c:	2000001c 	.word	0x2000001c

08009d70 <siprintf>:
 8009d70:	b40e      	push	{r1, r2, r3}
 8009d72:	b500      	push	{lr}
 8009d74:	b09c      	sub	sp, #112	@ 0x70
 8009d76:	ab1d      	add	r3, sp, #116	@ 0x74
 8009d78:	9002      	str	r0, [sp, #8]
 8009d7a:	9006      	str	r0, [sp, #24]
 8009d7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d80:	4809      	ldr	r0, [pc, #36]	@ (8009da8 <siprintf+0x38>)
 8009d82:	9107      	str	r1, [sp, #28]
 8009d84:	9104      	str	r1, [sp, #16]
 8009d86:	4909      	ldr	r1, [pc, #36]	@ (8009dac <siprintf+0x3c>)
 8009d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8c:	9105      	str	r1, [sp, #20]
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	a902      	add	r1, sp, #8
 8009d94:	f002 fc72 	bl	800c67c <_svfiprintf_r>
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	b01c      	add	sp, #112	@ 0x70
 8009da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da4:	b003      	add	sp, #12
 8009da6:	4770      	bx	lr
 8009da8:	2000001c 	.word	0x2000001c
 8009dac:	ffff0208 	.word	0xffff0208

08009db0 <siscanf>:
 8009db0:	b40e      	push	{r1, r2, r3}
 8009db2:	b530      	push	{r4, r5, lr}
 8009db4:	b09c      	sub	sp, #112	@ 0x70
 8009db6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009db8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009dbc:	f854 5b04 	ldr.w	r5, [r4], #4
 8009dc0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009dc4:	9002      	str	r0, [sp, #8]
 8009dc6:	9006      	str	r0, [sp, #24]
 8009dc8:	f7f6 fa62 	bl	8000290 <strlen>
 8009dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8009dfc <siscanf+0x4c>)
 8009dce:	9003      	str	r0, [sp, #12]
 8009dd0:	9007      	str	r0, [sp, #28]
 8009dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dd4:	480a      	ldr	r0, [pc, #40]	@ (8009e00 <siscanf+0x50>)
 8009dd6:	9401      	str	r4, [sp, #4]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ddc:	9314      	str	r3, [sp, #80]	@ 0x50
 8009dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009de2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009de6:	462a      	mov	r2, r5
 8009de8:	4623      	mov	r3, r4
 8009dea:	a902      	add	r1, sp, #8
 8009dec:	6800      	ldr	r0, [r0, #0]
 8009dee:	f002 fd99 	bl	800c924 <__ssvfiscanf_r>
 8009df2:	b01c      	add	sp, #112	@ 0x70
 8009df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009df8:	b003      	add	sp, #12
 8009dfa:	4770      	bx	lr
 8009dfc:	08009e27 	.word	0x08009e27
 8009e00:	2000001c 	.word	0x2000001c

08009e04 <__sread>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	460c      	mov	r4, r1
 8009e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0c:	f000 f902 	bl	800a014 <_read_r>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	bfab      	itete	ge
 8009e14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e16:	89a3      	ldrhlt	r3, [r4, #12]
 8009e18:	181b      	addge	r3, r3, r0
 8009e1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e1e:	bfac      	ite	ge
 8009e20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e22:	81a3      	strhlt	r3, [r4, #12]
 8009e24:	bd10      	pop	{r4, pc}

08009e26 <__seofread>:
 8009e26:	2000      	movs	r0, #0
 8009e28:	4770      	bx	lr

08009e2a <__swrite>:
 8009e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	461f      	mov	r7, r3
 8009e30:	898b      	ldrh	r3, [r1, #12]
 8009e32:	05db      	lsls	r3, r3, #23
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	4616      	mov	r6, r2
 8009e3a:	d505      	bpl.n	8009e48 <__swrite+0x1e>
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	2302      	movs	r3, #2
 8009e42:	2200      	movs	r2, #0
 8009e44:	f000 f8d4 	bl	8009ff0 <_lseek_r>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e52:	81a3      	strh	r3, [r4, #12]
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	f000 b8eb 	b.w	800a038 <_write_r>

08009e62 <__sseek>:
 8009e62:	b510      	push	{r4, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6a:	f000 f8c1 	bl	8009ff0 <_lseek_r>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	bf15      	itete	ne
 8009e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e7e:	81a3      	strheq	r3, [r4, #12]
 8009e80:	bf18      	it	ne
 8009e82:	81a3      	strhne	r3, [r4, #12]
 8009e84:	bd10      	pop	{r4, pc}

08009e86 <__sclose>:
 8009e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8a:	f000 b8a1 	b.w	8009fd0 <_close_r>

08009e8e <__swbuf_r>:
 8009e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e90:	460e      	mov	r6, r1
 8009e92:	4614      	mov	r4, r2
 8009e94:	4605      	mov	r5, r0
 8009e96:	b118      	cbz	r0, 8009ea0 <__swbuf_r+0x12>
 8009e98:	6a03      	ldr	r3, [r0, #32]
 8009e9a:	b90b      	cbnz	r3, 8009ea0 <__swbuf_r+0x12>
 8009e9c:	f7ff fe8e 	bl	8009bbc <__sinit>
 8009ea0:	69a3      	ldr	r3, [r4, #24]
 8009ea2:	60a3      	str	r3, [r4, #8]
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	071a      	lsls	r2, r3, #28
 8009ea8:	d501      	bpl.n	8009eae <__swbuf_r+0x20>
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	b943      	cbnz	r3, 8009ec0 <__swbuf_r+0x32>
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f000 f82b 	bl	8009f0c <__swsetup_r>
 8009eb6:	b118      	cbz	r0, 8009ec0 <__swbuf_r+0x32>
 8009eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	6922      	ldr	r2, [r4, #16]
 8009ec4:	1a98      	subs	r0, r3, r2
 8009ec6:	6963      	ldr	r3, [r4, #20]
 8009ec8:	b2f6      	uxtb	r6, r6
 8009eca:	4283      	cmp	r3, r0
 8009ecc:	4637      	mov	r7, r6
 8009ece:	dc05      	bgt.n	8009edc <__swbuf_r+0x4e>
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f003 f9ae 	bl	800d234 <_fflush_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d1ed      	bne.n	8009eb8 <__swbuf_r+0x2a>
 8009edc:	68a3      	ldr	r3, [r4, #8]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	60a3      	str	r3, [r4, #8]
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	6022      	str	r2, [r4, #0]
 8009ee8:	701e      	strb	r6, [r3, #0]
 8009eea:	6962      	ldr	r2, [r4, #20]
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d004      	beq.n	8009efc <__swbuf_r+0x6e>
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	07db      	lsls	r3, r3, #31
 8009ef6:	d5e1      	bpl.n	8009ebc <__swbuf_r+0x2e>
 8009ef8:	2e0a      	cmp	r6, #10
 8009efa:	d1df      	bne.n	8009ebc <__swbuf_r+0x2e>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f003 f998 	bl	800d234 <_fflush_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d0d9      	beq.n	8009ebc <__swbuf_r+0x2e>
 8009f08:	e7d6      	b.n	8009eb8 <__swbuf_r+0x2a>
	...

08009f0c <__swsetup_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4b29      	ldr	r3, [pc, #164]	@ (8009fb4 <__swsetup_r+0xa8>)
 8009f10:	4605      	mov	r5, r0
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	460c      	mov	r4, r1
 8009f16:	b118      	cbz	r0, 8009f20 <__swsetup_r+0x14>
 8009f18:	6a03      	ldr	r3, [r0, #32]
 8009f1a:	b90b      	cbnz	r3, 8009f20 <__swsetup_r+0x14>
 8009f1c:	f7ff fe4e 	bl	8009bbc <__sinit>
 8009f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f24:	0719      	lsls	r1, r3, #28
 8009f26:	d422      	bmi.n	8009f6e <__swsetup_r+0x62>
 8009f28:	06da      	lsls	r2, r3, #27
 8009f2a:	d407      	bmi.n	8009f3c <__swsetup_r+0x30>
 8009f2c:	2209      	movs	r2, #9
 8009f2e:	602a      	str	r2, [r5, #0]
 8009f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3a:	e033      	b.n	8009fa4 <__swsetup_r+0x98>
 8009f3c:	0758      	lsls	r0, r3, #29
 8009f3e:	d512      	bpl.n	8009f66 <__swsetup_r+0x5a>
 8009f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f42:	b141      	cbz	r1, 8009f56 <__swsetup_r+0x4a>
 8009f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d002      	beq.n	8009f52 <__swsetup_r+0x46>
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f000 ff13 	bl	800ad78 <_free_r>
 8009f52:	2300      	movs	r3, #0
 8009f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0308 	orr.w	r3, r3, #8
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	b94b      	cbnz	r3, 8009f86 <__swsetup_r+0x7a>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f7c:	d003      	beq.n	8009f86 <__swsetup_r+0x7a>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f003 f9a5 	bl	800d2d0 <__smakebuf_r>
 8009f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8a:	f013 0201 	ands.w	r2, r3, #1
 8009f8e:	d00a      	beq.n	8009fa6 <__swsetup_r+0x9a>
 8009f90:	2200      	movs	r2, #0
 8009f92:	60a2      	str	r2, [r4, #8]
 8009f94:	6962      	ldr	r2, [r4, #20]
 8009f96:	4252      	negs	r2, r2
 8009f98:	61a2      	str	r2, [r4, #24]
 8009f9a:	6922      	ldr	r2, [r4, #16]
 8009f9c:	b942      	cbnz	r2, 8009fb0 <__swsetup_r+0xa4>
 8009f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fa2:	d1c5      	bne.n	8009f30 <__swsetup_r+0x24>
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	0799      	lsls	r1, r3, #30
 8009fa8:	bf58      	it	pl
 8009faa:	6962      	ldrpl	r2, [r4, #20]
 8009fac:	60a2      	str	r2, [r4, #8]
 8009fae:	e7f4      	b.n	8009f9a <__swsetup_r+0x8e>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7f7      	b.n	8009fa4 <__swsetup_r+0x98>
 8009fb4:	2000001c 	.word	0x2000001c

08009fb8 <memset>:
 8009fb8:	4402      	add	r2, r0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d100      	bne.n	8009fc2 <memset+0xa>
 8009fc0:	4770      	bx	lr
 8009fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc6:	e7f9      	b.n	8009fbc <memset+0x4>

08009fc8 <_localeconv_r>:
 8009fc8:	4800      	ldr	r0, [pc, #0]	@ (8009fcc <_localeconv_r+0x4>)
 8009fca:	4770      	bx	lr
 8009fcc:	2000015c 	.word	0x2000015c

08009fd0 <_close_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d06      	ldr	r5, [pc, #24]	@ (8009fec <_close_r+0x1c>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7f7 fe7c 	bl	8001cd8 <_close>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_close_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_close_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	200052e0 	.word	0x200052e0

08009ff0 <_lseek_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	@ (800a010 <_lseek_r+0x20>)
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	602a      	str	r2, [r5, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f7f7 fe91 	bl	8001d26 <_lseek>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_lseek_r+0x1e>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_lseek_r+0x1e>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	200052e0 	.word	0x200052e0

0800a014 <_read_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d07      	ldr	r5, [pc, #28]	@ (800a034 <_read_r+0x20>)
 800a018:	4604      	mov	r4, r0
 800a01a:	4608      	mov	r0, r1
 800a01c:	4611      	mov	r1, r2
 800a01e:	2200      	movs	r2, #0
 800a020:	602a      	str	r2, [r5, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	f7f7 fe1f 	bl	8001c66 <_read>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_read_r+0x1e>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_read_r+0x1e>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	200052e0 	.word	0x200052e0

0800a038 <_write_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	@ (800a058 <_write_r+0x20>)
 800a03c:	4604      	mov	r4, r0
 800a03e:	4608      	mov	r0, r1
 800a040:	4611      	mov	r1, r2
 800a042:	2200      	movs	r2, #0
 800a044:	602a      	str	r2, [r5, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	f7f7 fe2a 	bl	8001ca0 <_write>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_write_r+0x1e>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_write_r+0x1e>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	200052e0 	.word	0x200052e0

0800a05c <__errno>:
 800a05c:	4b01      	ldr	r3, [pc, #4]	@ (800a064 <__errno+0x8>)
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	2000001c 	.word	0x2000001c

0800a068 <__libc_init_array>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	4d0d      	ldr	r5, [pc, #52]	@ (800a0a0 <__libc_init_array+0x38>)
 800a06c:	4c0d      	ldr	r4, [pc, #52]	@ (800a0a4 <__libc_init_array+0x3c>)
 800a06e:	1b64      	subs	r4, r4, r5
 800a070:	10a4      	asrs	r4, r4, #2
 800a072:	2600      	movs	r6, #0
 800a074:	42a6      	cmp	r6, r4
 800a076:	d109      	bne.n	800a08c <__libc_init_array+0x24>
 800a078:	4d0b      	ldr	r5, [pc, #44]	@ (800a0a8 <__libc_init_array+0x40>)
 800a07a:	4c0c      	ldr	r4, [pc, #48]	@ (800a0ac <__libc_init_array+0x44>)
 800a07c:	f003 fecc 	bl	800de18 <_init>
 800a080:	1b64      	subs	r4, r4, r5
 800a082:	10a4      	asrs	r4, r4, #2
 800a084:	2600      	movs	r6, #0
 800a086:	42a6      	cmp	r6, r4
 800a088:	d105      	bne.n	800a096 <__libc_init_array+0x2e>
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a090:	4798      	blx	r3
 800a092:	3601      	adds	r6, #1
 800a094:	e7ee      	b.n	800a074 <__libc_init_array+0xc>
 800a096:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09a:	4798      	blx	r3
 800a09c:	3601      	adds	r6, #1
 800a09e:	e7f2      	b.n	800a086 <__libc_init_array+0x1e>
 800a0a0:	0801044c 	.word	0x0801044c
 800a0a4:	0801044c 	.word	0x0801044c
 800a0a8:	0801044c 	.word	0x0801044c
 800a0ac:	08010450 	.word	0x08010450

0800a0b0 <__retarget_lock_init_recursive>:
 800a0b0:	4770      	bx	lr

0800a0b2 <__retarget_lock_acquire_recursive>:
 800a0b2:	4770      	bx	lr

0800a0b4 <__retarget_lock_release_recursive>:
 800a0b4:	4770      	bx	lr

0800a0b6 <memcpy>:
 800a0b6:	440a      	add	r2, r1
 800a0b8:	4291      	cmp	r1, r2
 800a0ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0be:	d100      	bne.n	800a0c2 <memcpy+0xc>
 800a0c0:	4770      	bx	lr
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0cc:	4291      	cmp	r1, r2
 800a0ce:	d1f9      	bne.n	800a0c4 <memcpy+0xe>
 800a0d0:	bd10      	pop	{r4, pc}
	...

0800a0d4 <nanf>:
 800a0d4:	4800      	ldr	r0, [pc, #0]	@ (800a0d8 <nanf+0x4>)
 800a0d6:	4770      	bx	lr
 800a0d8:	7fc00000 	.word	0x7fc00000

0800a0dc <quorem>:
 800a0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	6903      	ldr	r3, [r0, #16]
 800a0e2:	690c      	ldr	r4, [r1, #16]
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	db7e      	blt.n	800a1e8 <quorem+0x10c>
 800a0ea:	3c01      	subs	r4, #1
 800a0ec:	f101 0814 	add.w	r8, r1, #20
 800a0f0:	00a3      	lsls	r3, r4, #2
 800a0f2:	f100 0514 	add.w	r5, r0, #20
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a106:	3301      	adds	r3, #1
 800a108:	429a      	cmp	r2, r3
 800a10a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a10e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a112:	d32e      	bcc.n	800a172 <quorem+0x96>
 800a114:	f04f 0a00 	mov.w	sl, #0
 800a118:	46c4      	mov	ip, r8
 800a11a:	46ae      	mov	lr, r5
 800a11c:	46d3      	mov	fp, sl
 800a11e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a122:	b298      	uxth	r0, r3
 800a124:	fb06 a000 	mla	r0, r6, r0, sl
 800a128:	0c02      	lsrs	r2, r0, #16
 800a12a:	0c1b      	lsrs	r3, r3, #16
 800a12c:	fb06 2303 	mla	r3, r6, r3, r2
 800a130:	f8de 2000 	ldr.w	r2, [lr]
 800a134:	b280      	uxth	r0, r0
 800a136:	b292      	uxth	r2, r2
 800a138:	1a12      	subs	r2, r2, r0
 800a13a:	445a      	add	r2, fp
 800a13c:	f8de 0000 	ldr.w	r0, [lr]
 800a140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a144:	b29b      	uxth	r3, r3
 800a146:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a14a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a14e:	b292      	uxth	r2, r2
 800a150:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a154:	45e1      	cmp	r9, ip
 800a156:	f84e 2b04 	str.w	r2, [lr], #4
 800a15a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a15e:	d2de      	bcs.n	800a11e <quorem+0x42>
 800a160:	9b00      	ldr	r3, [sp, #0]
 800a162:	58eb      	ldr	r3, [r5, r3]
 800a164:	b92b      	cbnz	r3, 800a172 <quorem+0x96>
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	3b04      	subs	r3, #4
 800a16a:	429d      	cmp	r5, r3
 800a16c:	461a      	mov	r2, r3
 800a16e:	d32f      	bcc.n	800a1d0 <quorem+0xf4>
 800a170:	613c      	str	r4, [r7, #16]
 800a172:	4638      	mov	r0, r7
 800a174:	f001 f9c4 	bl	800b500 <__mcmp>
 800a178:	2800      	cmp	r0, #0
 800a17a:	db25      	blt.n	800a1c8 <quorem+0xec>
 800a17c:	4629      	mov	r1, r5
 800a17e:	2000      	movs	r0, #0
 800a180:	f858 2b04 	ldr.w	r2, [r8], #4
 800a184:	f8d1 c000 	ldr.w	ip, [r1]
 800a188:	fa1f fe82 	uxth.w	lr, r2
 800a18c:	fa1f f38c 	uxth.w	r3, ip
 800a190:	eba3 030e 	sub.w	r3, r3, lr
 800a194:	4403      	add	r3, r0
 800a196:	0c12      	lsrs	r2, r2, #16
 800a198:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a19c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1a6:	45c1      	cmp	r9, r8
 800a1a8:	f841 3b04 	str.w	r3, [r1], #4
 800a1ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a1b0:	d2e6      	bcs.n	800a180 <quorem+0xa4>
 800a1b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1ba:	b922      	cbnz	r2, 800a1c6 <quorem+0xea>
 800a1bc:	3b04      	subs	r3, #4
 800a1be:	429d      	cmp	r5, r3
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	d30b      	bcc.n	800a1dc <quorem+0x100>
 800a1c4:	613c      	str	r4, [r7, #16]
 800a1c6:	3601      	adds	r6, #1
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	b003      	add	sp, #12
 800a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d0:	6812      	ldr	r2, [r2, #0]
 800a1d2:	3b04      	subs	r3, #4
 800a1d4:	2a00      	cmp	r2, #0
 800a1d6:	d1cb      	bne.n	800a170 <quorem+0x94>
 800a1d8:	3c01      	subs	r4, #1
 800a1da:	e7c6      	b.n	800a16a <quorem+0x8e>
 800a1dc:	6812      	ldr	r2, [r2, #0]
 800a1de:	3b04      	subs	r3, #4
 800a1e0:	2a00      	cmp	r2, #0
 800a1e2:	d1ef      	bne.n	800a1c4 <quorem+0xe8>
 800a1e4:	3c01      	subs	r4, #1
 800a1e6:	e7ea      	b.n	800a1be <quorem+0xe2>
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	e7ee      	b.n	800a1ca <quorem+0xee>
 800a1ec:	0000      	movs	r0, r0
	...

0800a1f0 <_dtoa_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	69c7      	ldr	r7, [r0, #28]
 800a1f6:	b097      	sub	sp, #92	@ 0x5c
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	461d      	mov	r5, r3
 800a1fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a200:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a202:	4683      	mov	fp, r0
 800a204:	b97f      	cbnz	r7, 800a226 <_dtoa_r+0x36>
 800a206:	2010      	movs	r0, #16
 800a208:	f000 fe00 	bl	800ae0c <malloc>
 800a20c:	4602      	mov	r2, r0
 800a20e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a212:	b920      	cbnz	r0, 800a21e <_dtoa_r+0x2e>
 800a214:	4ba8      	ldr	r3, [pc, #672]	@ (800a4b8 <_dtoa_r+0x2c8>)
 800a216:	21ef      	movs	r1, #239	@ 0xef
 800a218:	48a8      	ldr	r0, [pc, #672]	@ (800a4bc <_dtoa_r+0x2cc>)
 800a21a:	f003 f96d 	bl	800d4f8 <__assert_func>
 800a21e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a222:	6007      	str	r7, [r0, #0]
 800a224:	60c7      	str	r7, [r0, #12]
 800a226:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a22a:	6819      	ldr	r1, [r3, #0]
 800a22c:	b159      	cbz	r1, 800a246 <_dtoa_r+0x56>
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	604a      	str	r2, [r1, #4]
 800a232:	2301      	movs	r3, #1
 800a234:	4093      	lsls	r3, r2
 800a236:	608b      	str	r3, [r1, #8]
 800a238:	4658      	mov	r0, fp
 800a23a:	f000 fedd 	bl	800aff8 <_Bfree>
 800a23e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a242:	2200      	movs	r2, #0
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	1e2b      	subs	r3, r5, #0
 800a248:	bfb9      	ittee	lt
 800a24a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a24e:	9305      	strlt	r3, [sp, #20]
 800a250:	2300      	movge	r3, #0
 800a252:	6033      	strge	r3, [r6, #0]
 800a254:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a258:	4b99      	ldr	r3, [pc, #612]	@ (800a4c0 <_dtoa_r+0x2d0>)
 800a25a:	bfbc      	itt	lt
 800a25c:	2201      	movlt	r2, #1
 800a25e:	6032      	strlt	r2, [r6, #0]
 800a260:	ea33 0308 	bics.w	r3, r3, r8
 800a264:	d112      	bne.n	800a28c <_dtoa_r+0x9c>
 800a266:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a268:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a272:	4323      	orrs	r3, r4
 800a274:	f000 854e 	beq.w	800ad14 <_dtoa_r+0xb24>
 800a278:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a27a:	f8df a258 	ldr.w	sl, [pc, #600]	@ 800a4d4 <_dtoa_r+0x2e4>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f000 8550 	beq.w	800ad24 <_dtoa_r+0xb34>
 800a284:	f10a 0303 	add.w	r3, sl, #3
 800a288:	f000 bd4a 	b.w	800ad20 <_dtoa_r+0xb30>
 800a28c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a290:	2200      	movs	r2, #0
 800a292:	ec51 0b17 	vmov	r0, r1, d7
 800a296:	2300      	movs	r3, #0
 800a298:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a29c:	f7f6 fc24 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	b158      	cbz	r0, 800a2bc <_dtoa_r+0xcc>
 800a2a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a2ac:	b113      	cbz	r3, 800a2b4 <_dtoa_r+0xc4>
 800a2ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a2b0:	4b84      	ldr	r3, [pc, #528]	@ (800a4c4 <_dtoa_r+0x2d4>)
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a4d8 <_dtoa_r+0x2e8>
 800a2b8:	f000 bd34 	b.w	800ad24 <_dtoa_r+0xb34>
 800a2bc:	ab14      	add	r3, sp, #80	@ 0x50
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	ab15      	add	r3, sp, #84	@ 0x54
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	4658      	mov	r0, fp
 800a2c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a2ca:	f001 fa33 	bl	800b734 <__d2b>
 800a2ce:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a2d2:	4681      	mov	r9, r0
 800a2d4:	2e00      	cmp	r6, #0
 800a2d6:	d076      	beq.n	800a3c6 <_dtoa_r+0x1d6>
 800a2d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2da:	9712      	str	r7, [sp, #72]	@ 0x48
 800a2dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a2ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4b74      	ldr	r3, [pc, #464]	@ (800a4c8 <_dtoa_r+0x2d8>)
 800a2f6:	f7f5 ffd7 	bl	80002a8 <__aeabi_dsub>
 800a2fa:	a369      	add	r3, pc, #420	@ (adr r3, 800a4a0 <_dtoa_r+0x2b0>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f7f6 f98a 	bl	8000618 <__aeabi_dmul>
 800a304:	a368      	add	r3, pc, #416	@ (adr r3, 800a4a8 <_dtoa_r+0x2b8>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ffcf 	bl	80002ac <__adddf3>
 800a30e:	4604      	mov	r4, r0
 800a310:	4630      	mov	r0, r6
 800a312:	460d      	mov	r5, r1
 800a314:	f7f6 f916 	bl	8000544 <__aeabi_i2d>
 800a318:	a365      	add	r3, pc, #404	@ (adr r3, 800a4b0 <_dtoa_r+0x2c0>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f6 f97b 	bl	8000618 <__aeabi_dmul>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4620      	mov	r0, r4
 800a328:	4629      	mov	r1, r5
 800a32a:	f7f5 ffbf 	bl	80002ac <__adddf3>
 800a32e:	4604      	mov	r4, r0
 800a330:	460d      	mov	r5, r1
 800a332:	f7f6 fc21 	bl	8000b78 <__aeabi_d2iz>
 800a336:	2200      	movs	r2, #0
 800a338:	4607      	mov	r7, r0
 800a33a:	2300      	movs	r3, #0
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7f6 fbdc 	bl	8000afc <__aeabi_dcmplt>
 800a344:	b140      	cbz	r0, 800a358 <_dtoa_r+0x168>
 800a346:	4638      	mov	r0, r7
 800a348:	f7f6 f8fc 	bl	8000544 <__aeabi_i2d>
 800a34c:	4622      	mov	r2, r4
 800a34e:	462b      	mov	r3, r5
 800a350:	f7f6 fbca 	bl	8000ae8 <__aeabi_dcmpeq>
 800a354:	b900      	cbnz	r0, 800a358 <_dtoa_r+0x168>
 800a356:	3f01      	subs	r7, #1
 800a358:	2f16      	cmp	r7, #22
 800a35a:	d852      	bhi.n	800a402 <_dtoa_r+0x212>
 800a35c:	4b5b      	ldr	r3, [pc, #364]	@ (800a4cc <_dtoa_r+0x2dc>)
 800a35e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a36a:	f7f6 fbc7 	bl	8000afc <__aeabi_dcmplt>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d049      	beq.n	800a406 <_dtoa_r+0x216>
 800a372:	3f01      	subs	r7, #1
 800a374:	2300      	movs	r3, #0
 800a376:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a378:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a37a:	1b9b      	subs	r3, r3, r6
 800a37c:	1e5a      	subs	r2, r3, #1
 800a37e:	bf44      	itt	mi
 800a380:	f1c3 0801 	rsbmi	r8, r3, #1
 800a384:	2300      	movmi	r3, #0
 800a386:	9209      	str	r2, [sp, #36]	@ 0x24
 800a388:	bf54      	ite	pl
 800a38a:	f04f 0800 	movpl.w	r8, #0
 800a38e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a390:	2f00      	cmp	r7, #0
 800a392:	db3a      	blt.n	800a40a <_dtoa_r+0x21a>
 800a394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a396:	970e      	str	r7, [sp, #56]	@ 0x38
 800a398:	443b      	add	r3, r7
 800a39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a39c:	2300      	movs	r3, #0
 800a39e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3a2:	2b09      	cmp	r3, #9
 800a3a4:	d865      	bhi.n	800a472 <_dtoa_r+0x282>
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	bfc4      	itt	gt
 800a3aa:	3b04      	subgt	r3, #4
 800a3ac:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a3ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3b0:	f1a3 0302 	sub.w	r3, r3, #2
 800a3b4:	bfcc      	ite	gt
 800a3b6:	2400      	movgt	r4, #0
 800a3b8:	2401      	movle	r4, #1
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d864      	bhi.n	800a488 <_dtoa_r+0x298>
 800a3be:	e8df f003 	tbb	[pc, r3]
 800a3c2:	382b      	.short	0x382b
 800a3c4:	5636      	.short	0x5636
 800a3c6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a3ca:	441e      	add	r6, r3
 800a3cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	bfc1      	itttt	gt
 800a3d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a3d8:	fa08 f803 	lslgt.w	r8, r8, r3
 800a3dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a3e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a3e4:	bfd6      	itet	le
 800a3e6:	f1c3 0320 	rsble	r3, r3, #32
 800a3ea:	ea48 0003 	orrgt.w	r0, r8, r3
 800a3ee:	fa04 f003 	lslle.w	r0, r4, r3
 800a3f2:	f7f6 f897 	bl	8000524 <__aeabi_ui2d>
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a3fc:	3e01      	subs	r6, #1
 800a3fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800a400:	e776      	b.n	800a2f0 <_dtoa_r+0x100>
 800a402:	2301      	movs	r3, #1
 800a404:	e7b7      	b.n	800a376 <_dtoa_r+0x186>
 800a406:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a408:	e7b6      	b.n	800a378 <_dtoa_r+0x188>
 800a40a:	427b      	negs	r3, r7
 800a40c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a40e:	2300      	movs	r3, #0
 800a410:	eba8 0807 	sub.w	r8, r8, r7
 800a414:	930e      	str	r3, [sp, #56]	@ 0x38
 800a416:	e7c3      	b.n	800a3a0 <_dtoa_r+0x1b0>
 800a418:	2300      	movs	r3, #0
 800a41a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a41c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a41e:	2b00      	cmp	r3, #0
 800a420:	dc35      	bgt.n	800a48e <_dtoa_r+0x29e>
 800a422:	2301      	movs	r3, #1
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	9308      	str	r3, [sp, #32]
 800a428:	461a      	mov	r2, r3
 800a42a:	9221      	str	r2, [sp, #132]	@ 0x84
 800a42c:	e00b      	b.n	800a446 <_dtoa_r+0x256>
 800a42e:	2301      	movs	r3, #1
 800a430:	e7f3      	b.n	800a41a <_dtoa_r+0x22a>
 800a432:	2300      	movs	r3, #0
 800a434:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a436:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a438:	18fb      	adds	r3, r7, r3
 800a43a:	9302      	str	r3, [sp, #8]
 800a43c:	3301      	adds	r3, #1
 800a43e:	2b01      	cmp	r3, #1
 800a440:	9308      	str	r3, [sp, #32]
 800a442:	bfb8      	it	lt
 800a444:	2301      	movlt	r3, #1
 800a446:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a44a:	2100      	movs	r1, #0
 800a44c:	2204      	movs	r2, #4
 800a44e:	f102 0514 	add.w	r5, r2, #20
 800a452:	429d      	cmp	r5, r3
 800a454:	d91f      	bls.n	800a496 <_dtoa_r+0x2a6>
 800a456:	6041      	str	r1, [r0, #4]
 800a458:	4658      	mov	r0, fp
 800a45a:	f000 fd8d 	bl	800af78 <_Balloc>
 800a45e:	4682      	mov	sl, r0
 800a460:	2800      	cmp	r0, #0
 800a462:	d13b      	bne.n	800a4dc <_dtoa_r+0x2ec>
 800a464:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d0 <_dtoa_r+0x2e0>)
 800a466:	4602      	mov	r2, r0
 800a468:	f240 11af 	movw	r1, #431	@ 0x1af
 800a46c:	e6d4      	b.n	800a218 <_dtoa_r+0x28>
 800a46e:	2301      	movs	r3, #1
 800a470:	e7e0      	b.n	800a434 <_dtoa_r+0x244>
 800a472:	2401      	movs	r4, #1
 800a474:	2300      	movs	r3, #0
 800a476:	9320      	str	r3, [sp, #128]	@ 0x80
 800a478:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a47a:	f04f 33ff 	mov.w	r3, #4294967295
 800a47e:	9302      	str	r3, [sp, #8]
 800a480:	9308      	str	r3, [sp, #32]
 800a482:	2200      	movs	r2, #0
 800a484:	2312      	movs	r3, #18
 800a486:	e7d0      	b.n	800a42a <_dtoa_r+0x23a>
 800a488:	2301      	movs	r3, #1
 800a48a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a48c:	e7f5      	b.n	800a47a <_dtoa_r+0x28a>
 800a48e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a490:	9302      	str	r3, [sp, #8]
 800a492:	9308      	str	r3, [sp, #32]
 800a494:	e7d7      	b.n	800a446 <_dtoa_r+0x256>
 800a496:	3101      	adds	r1, #1
 800a498:	0052      	lsls	r2, r2, #1
 800a49a:	e7d8      	b.n	800a44e <_dtoa_r+0x25e>
 800a49c:	f3af 8000 	nop.w
 800a4a0:	636f4361 	.word	0x636f4361
 800a4a4:	3fd287a7 	.word	0x3fd287a7
 800a4a8:	8b60c8b3 	.word	0x8b60c8b3
 800a4ac:	3fc68a28 	.word	0x3fc68a28
 800a4b0:	509f79fb 	.word	0x509f79fb
 800a4b4:	3fd34413 	.word	0x3fd34413
 800a4b8:	08010040 	.word	0x08010040
 800a4bc:	08010057 	.word	0x08010057
 800a4c0:	7ff00000 	.word	0x7ff00000
 800a4c4:	08010399 	.word	0x08010399
 800a4c8:	3ff80000 	.word	0x3ff80000
 800a4cc:	08010150 	.word	0x08010150
 800a4d0:	080100af 	.word	0x080100af
 800a4d4:	0801003c 	.word	0x0801003c
 800a4d8:	08010398 	.word	0x08010398
 800a4dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4e0:	6018      	str	r0, [r3, #0]
 800a4e2:	9b08      	ldr	r3, [sp, #32]
 800a4e4:	2b0e      	cmp	r3, #14
 800a4e6:	f200 80a4 	bhi.w	800a632 <_dtoa_r+0x442>
 800a4ea:	2c00      	cmp	r4, #0
 800a4ec:	f000 80a1 	beq.w	800a632 <_dtoa_r+0x442>
 800a4f0:	2f00      	cmp	r7, #0
 800a4f2:	dd33      	ble.n	800a55c <_dtoa_r+0x36c>
 800a4f4:	4bad      	ldr	r3, [pc, #692]	@ (800a7ac <_dtoa_r+0x5bc>)
 800a4f6:	f007 020f 	and.w	r2, r7, #15
 800a4fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4fe:	ed93 7b00 	vldr	d7, [r3]
 800a502:	05f8      	lsls	r0, r7, #23
 800a504:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a508:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a50c:	d516      	bpl.n	800a53c <_dtoa_r+0x34c>
 800a50e:	4ba8      	ldr	r3, [pc, #672]	@ (800a7b0 <_dtoa_r+0x5c0>)
 800a510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a518:	f7f6 f9a8 	bl	800086c <__aeabi_ddiv>
 800a51c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a520:	f004 040f 	and.w	r4, r4, #15
 800a524:	2603      	movs	r6, #3
 800a526:	4da2      	ldr	r5, [pc, #648]	@ (800a7b0 <_dtoa_r+0x5c0>)
 800a528:	b954      	cbnz	r4, 800a540 <_dtoa_r+0x350>
 800a52a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a52e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a532:	f7f6 f99b 	bl	800086c <__aeabi_ddiv>
 800a536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a53a:	e028      	b.n	800a58e <_dtoa_r+0x39e>
 800a53c:	2602      	movs	r6, #2
 800a53e:	e7f2      	b.n	800a526 <_dtoa_r+0x336>
 800a540:	07e1      	lsls	r1, r4, #31
 800a542:	d508      	bpl.n	800a556 <_dtoa_r+0x366>
 800a544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a548:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a54c:	f7f6 f864 	bl	8000618 <__aeabi_dmul>
 800a550:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a554:	3601      	adds	r6, #1
 800a556:	1064      	asrs	r4, r4, #1
 800a558:	3508      	adds	r5, #8
 800a55a:	e7e5      	b.n	800a528 <_dtoa_r+0x338>
 800a55c:	f000 80d2 	beq.w	800a704 <_dtoa_r+0x514>
 800a560:	427c      	negs	r4, r7
 800a562:	4b92      	ldr	r3, [pc, #584]	@ (800a7ac <_dtoa_r+0x5bc>)
 800a564:	4d92      	ldr	r5, [pc, #584]	@ (800a7b0 <_dtoa_r+0x5c0>)
 800a566:	f004 020f 	and.w	r2, r4, #15
 800a56a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a576:	f7f6 f84f 	bl	8000618 <__aeabi_dmul>
 800a57a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a57e:	1124      	asrs	r4, r4, #4
 800a580:	2300      	movs	r3, #0
 800a582:	2602      	movs	r6, #2
 800a584:	2c00      	cmp	r4, #0
 800a586:	f040 80b2 	bne.w	800a6ee <_dtoa_r+0x4fe>
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1d3      	bne.n	800a536 <_dtoa_r+0x346>
 800a58e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a590:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80b7 	beq.w	800a708 <_dtoa_r+0x518>
 800a59a:	4b86      	ldr	r3, [pc, #536]	@ (800a7b4 <_dtoa_r+0x5c4>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	4620      	mov	r0, r4
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f7f6 faab 	bl	8000afc <__aeabi_dcmplt>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f000 80ae 	beq.w	800a708 <_dtoa_r+0x518>
 800a5ac:	9b08      	ldr	r3, [sp, #32]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 80aa 	beq.w	800a708 <_dtoa_r+0x518>
 800a5b4:	9b02      	ldr	r3, [sp, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dd37      	ble.n	800a62a <_dtoa_r+0x43a>
 800a5ba:	1e7b      	subs	r3, r7, #1
 800a5bc:	9306      	str	r3, [sp, #24]
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4b7d      	ldr	r3, [pc, #500]	@ (800a7b8 <_dtoa_r+0x5c8>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	f7f6 f827 	bl	8000618 <__aeabi_dmul>
 800a5ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ce:	9c02      	ldr	r4, [sp, #8]
 800a5d0:	3601      	adds	r6, #1
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7f5 ffb6 	bl	8000544 <__aeabi_i2d>
 800a5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5dc:	f7f6 f81c 	bl	8000618 <__aeabi_dmul>
 800a5e0:	4b76      	ldr	r3, [pc, #472]	@ (800a7bc <_dtoa_r+0x5cc>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f7f5 fe62 	bl	80002ac <__adddf3>
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a5ee:	2c00      	cmp	r4, #0
 800a5f0:	f040 808d 	bne.w	800a70e <_dtoa_r+0x51e>
 800a5f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5f8:	4b71      	ldr	r3, [pc, #452]	@ (800a7c0 <_dtoa_r+0x5d0>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f7f5 fe54 	bl	80002a8 <__aeabi_dsub>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a608:	462a      	mov	r2, r5
 800a60a:	4633      	mov	r3, r6
 800a60c:	f7f6 fa94 	bl	8000b38 <__aeabi_dcmpgt>
 800a610:	2800      	cmp	r0, #0
 800a612:	f040 828b 	bne.w	800ab2c <_dtoa_r+0x93c>
 800a616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a61a:	462a      	mov	r2, r5
 800a61c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a620:	f7f6 fa6c 	bl	8000afc <__aeabi_dcmplt>
 800a624:	2800      	cmp	r0, #0
 800a626:	f040 8128 	bne.w	800a87a <_dtoa_r+0x68a>
 800a62a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a62e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a632:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a634:	2b00      	cmp	r3, #0
 800a636:	f2c0 815a 	blt.w	800a8ee <_dtoa_r+0x6fe>
 800a63a:	2f0e      	cmp	r7, #14
 800a63c:	f300 8157 	bgt.w	800a8ee <_dtoa_r+0x6fe>
 800a640:	4b5a      	ldr	r3, [pc, #360]	@ (800a7ac <_dtoa_r+0x5bc>)
 800a642:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a646:	ed93 7b00 	vldr	d7, [r3]
 800a64a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a652:	da03      	bge.n	800a65c <_dtoa_r+0x46c>
 800a654:	9b08      	ldr	r3, [sp, #32]
 800a656:	2b00      	cmp	r3, #0
 800a658:	f340 8101 	ble.w	800a85e <_dtoa_r+0x66e>
 800a65c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a660:	4656      	mov	r6, sl
 800a662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f6 f8ff 	bl	800086c <__aeabi_ddiv>
 800a66e:	f7f6 fa83 	bl	8000b78 <__aeabi_d2iz>
 800a672:	4680      	mov	r8, r0
 800a674:	f7f5 ff66 	bl	8000544 <__aeabi_i2d>
 800a678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a67c:	f7f5 ffcc 	bl	8000618 <__aeabi_dmul>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4620      	mov	r0, r4
 800a686:	4629      	mov	r1, r5
 800a688:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a68c:	f7f5 fe0c 	bl	80002a8 <__aeabi_dsub>
 800a690:	f806 4b01 	strb.w	r4, [r6], #1
 800a694:	9d08      	ldr	r5, [sp, #32]
 800a696:	eba6 040a 	sub.w	r4, r6, sl
 800a69a:	42a5      	cmp	r5, r4
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	f040 8117 	bne.w	800a8d2 <_dtoa_r+0x6e2>
 800a6a4:	f7f5 fe02 	bl	80002ac <__adddf3>
 800a6a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	f7f6 fa42 	bl	8000b38 <__aeabi_dcmpgt>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	f040 80f9 	bne.w	800a8ac <_dtoa_r+0x6bc>
 800a6ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6be:	4620      	mov	r0, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f6 fa11 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6c6:	b118      	cbz	r0, 800a6d0 <_dtoa_r+0x4e0>
 800a6c8:	f018 0f01 	tst.w	r8, #1
 800a6cc:	f040 80ee 	bne.w	800a8ac <_dtoa_r+0x6bc>
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4658      	mov	r0, fp
 800a6d4:	f000 fc90 	bl	800aff8 <_Bfree>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	7033      	strb	r3, [r6, #0]
 800a6dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a6de:	3701      	adds	r7, #1
 800a6e0:	601f      	str	r7, [r3, #0]
 800a6e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 831d 	beq.w	800ad24 <_dtoa_r+0xb34>
 800a6ea:	601e      	str	r6, [r3, #0]
 800a6ec:	e31a      	b.n	800ad24 <_dtoa_r+0xb34>
 800a6ee:	07e2      	lsls	r2, r4, #31
 800a6f0:	d505      	bpl.n	800a6fe <_dtoa_r+0x50e>
 800a6f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6f6:	f7f5 ff8f 	bl	8000618 <__aeabi_dmul>
 800a6fa:	3601      	adds	r6, #1
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	1064      	asrs	r4, r4, #1
 800a700:	3508      	adds	r5, #8
 800a702:	e73f      	b.n	800a584 <_dtoa_r+0x394>
 800a704:	2602      	movs	r6, #2
 800a706:	e742      	b.n	800a58e <_dtoa_r+0x39e>
 800a708:	9c08      	ldr	r4, [sp, #32]
 800a70a:	9706      	str	r7, [sp, #24]
 800a70c:	e761      	b.n	800a5d2 <_dtoa_r+0x3e2>
 800a70e:	4b27      	ldr	r3, [pc, #156]	@ (800a7ac <_dtoa_r+0x5bc>)
 800a710:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a712:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a716:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a71a:	4454      	add	r4, sl
 800a71c:	2900      	cmp	r1, #0
 800a71e:	d053      	beq.n	800a7c8 <_dtoa_r+0x5d8>
 800a720:	4928      	ldr	r1, [pc, #160]	@ (800a7c4 <_dtoa_r+0x5d4>)
 800a722:	2000      	movs	r0, #0
 800a724:	f7f6 f8a2 	bl	800086c <__aeabi_ddiv>
 800a728:	4633      	mov	r3, r6
 800a72a:	462a      	mov	r2, r5
 800a72c:	f7f5 fdbc 	bl	80002a8 <__aeabi_dsub>
 800a730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a734:	4656      	mov	r6, sl
 800a736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a73a:	f7f6 fa1d 	bl	8000b78 <__aeabi_d2iz>
 800a73e:	4605      	mov	r5, r0
 800a740:	f7f5 ff00 	bl	8000544 <__aeabi_i2d>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a74c:	f7f5 fdac 	bl	80002a8 <__aeabi_dsub>
 800a750:	3530      	adds	r5, #48	@ 0x30
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a75a:	f806 5b01 	strb.w	r5, [r6], #1
 800a75e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a762:	f7f6 f9cb 	bl	8000afc <__aeabi_dcmplt>
 800a766:	2800      	cmp	r0, #0
 800a768:	d171      	bne.n	800a84e <_dtoa_r+0x65e>
 800a76a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a76e:	4911      	ldr	r1, [pc, #68]	@ (800a7b4 <_dtoa_r+0x5c4>)
 800a770:	2000      	movs	r0, #0
 800a772:	f7f5 fd99 	bl	80002a8 <__aeabi_dsub>
 800a776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a77a:	f7f6 f9bf 	bl	8000afc <__aeabi_dcmplt>
 800a77e:	2800      	cmp	r0, #0
 800a780:	f040 8095 	bne.w	800a8ae <_dtoa_r+0x6be>
 800a784:	42a6      	cmp	r6, r4
 800a786:	f43f af50 	beq.w	800a62a <_dtoa_r+0x43a>
 800a78a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a78e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <_dtoa_r+0x5c8>)
 800a790:	2200      	movs	r2, #0
 800a792:	f7f5 ff41 	bl	8000618 <__aeabi_dmul>
 800a796:	4b08      	ldr	r3, [pc, #32]	@ (800a7b8 <_dtoa_r+0x5c8>)
 800a798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a79c:	2200      	movs	r2, #0
 800a79e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7a2:	f7f5 ff39 	bl	8000618 <__aeabi_dmul>
 800a7a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7aa:	e7c4      	b.n	800a736 <_dtoa_r+0x546>
 800a7ac:	08010150 	.word	0x08010150
 800a7b0:	08010128 	.word	0x08010128
 800a7b4:	3ff00000 	.word	0x3ff00000
 800a7b8:	40240000 	.word	0x40240000
 800a7bc:	401c0000 	.word	0x401c0000
 800a7c0:	40140000 	.word	0x40140000
 800a7c4:	3fe00000 	.word	0x3fe00000
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f7f5 ff24 	bl	8000618 <__aeabi_dmul>
 800a7d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7d4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a7d6:	4656      	mov	r6, sl
 800a7d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7dc:	f7f6 f9cc 	bl	8000b78 <__aeabi_d2iz>
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	f7f5 feaf 	bl	8000544 <__aeabi_i2d>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7ee:	f7f5 fd5b 	bl	80002a8 <__aeabi_dsub>
 800a7f2:	3530      	adds	r5, #48	@ 0x30
 800a7f4:	f806 5b01 	strb.w	r5, [r6], #1
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	42a6      	cmp	r6, r4
 800a7fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a802:	f04f 0200 	mov.w	r2, #0
 800a806:	d124      	bne.n	800a852 <_dtoa_r+0x662>
 800a808:	4bac      	ldr	r3, [pc, #688]	@ (800aabc <_dtoa_r+0x8cc>)
 800a80a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a80e:	f7f5 fd4d 	bl	80002ac <__adddf3>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a81a:	f7f6 f98d 	bl	8000b38 <__aeabi_dcmpgt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d145      	bne.n	800a8ae <_dtoa_r+0x6be>
 800a822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a826:	49a5      	ldr	r1, [pc, #660]	@ (800aabc <_dtoa_r+0x8cc>)
 800a828:	2000      	movs	r0, #0
 800a82a:	f7f5 fd3d 	bl	80002a8 <__aeabi_dsub>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a836:	f7f6 f961 	bl	8000afc <__aeabi_dcmplt>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f43f aef5 	beq.w	800a62a <_dtoa_r+0x43a>
 800a840:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a842:	1e73      	subs	r3, r6, #1
 800a844:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a846:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a84a:	2b30      	cmp	r3, #48	@ 0x30
 800a84c:	d0f8      	beq.n	800a840 <_dtoa_r+0x650>
 800a84e:	9f06      	ldr	r7, [sp, #24]
 800a850:	e73e      	b.n	800a6d0 <_dtoa_r+0x4e0>
 800a852:	4b9b      	ldr	r3, [pc, #620]	@ (800aac0 <_dtoa_r+0x8d0>)
 800a854:	f7f5 fee0 	bl	8000618 <__aeabi_dmul>
 800a858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a85c:	e7bc      	b.n	800a7d8 <_dtoa_r+0x5e8>
 800a85e:	d10c      	bne.n	800a87a <_dtoa_r+0x68a>
 800a860:	4b98      	ldr	r3, [pc, #608]	@ (800aac4 <_dtoa_r+0x8d4>)
 800a862:	2200      	movs	r2, #0
 800a864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a868:	f7f5 fed6 	bl	8000618 <__aeabi_dmul>
 800a86c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a870:	f7f6 f958 	bl	8000b24 <__aeabi_dcmpge>
 800a874:	2800      	cmp	r0, #0
 800a876:	f000 8157 	beq.w	800ab28 <_dtoa_r+0x938>
 800a87a:	2400      	movs	r4, #0
 800a87c:	4625      	mov	r5, r4
 800a87e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a880:	43db      	mvns	r3, r3
 800a882:	9306      	str	r3, [sp, #24]
 800a884:	4656      	mov	r6, sl
 800a886:	2700      	movs	r7, #0
 800a888:	4621      	mov	r1, r4
 800a88a:	4658      	mov	r0, fp
 800a88c:	f000 fbb4 	bl	800aff8 <_Bfree>
 800a890:	2d00      	cmp	r5, #0
 800a892:	d0dc      	beq.n	800a84e <_dtoa_r+0x65e>
 800a894:	b12f      	cbz	r7, 800a8a2 <_dtoa_r+0x6b2>
 800a896:	42af      	cmp	r7, r5
 800a898:	d003      	beq.n	800a8a2 <_dtoa_r+0x6b2>
 800a89a:	4639      	mov	r1, r7
 800a89c:	4658      	mov	r0, fp
 800a89e:	f000 fbab 	bl	800aff8 <_Bfree>
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	f000 fba7 	bl	800aff8 <_Bfree>
 800a8aa:	e7d0      	b.n	800a84e <_dtoa_r+0x65e>
 800a8ac:	9706      	str	r7, [sp, #24]
 800a8ae:	4633      	mov	r3, r6
 800a8b0:	461e      	mov	r6, r3
 800a8b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8b6:	2a39      	cmp	r2, #57	@ 0x39
 800a8b8:	d107      	bne.n	800a8ca <_dtoa_r+0x6da>
 800a8ba:	459a      	cmp	sl, r3
 800a8bc:	d1f8      	bne.n	800a8b0 <_dtoa_r+0x6c0>
 800a8be:	9a06      	ldr	r2, [sp, #24]
 800a8c0:	3201      	adds	r2, #1
 800a8c2:	9206      	str	r2, [sp, #24]
 800a8c4:	2230      	movs	r2, #48	@ 0x30
 800a8c6:	f88a 2000 	strb.w	r2, [sl]
 800a8ca:	781a      	ldrb	r2, [r3, #0]
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	701a      	strb	r2, [r3, #0]
 800a8d0:	e7bd      	b.n	800a84e <_dtoa_r+0x65e>
 800a8d2:	4b7b      	ldr	r3, [pc, #492]	@ (800aac0 <_dtoa_r+0x8d0>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f7f5 fe9f 	bl	8000618 <__aeabi_dmul>
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4604      	mov	r4, r0
 800a8e0:	460d      	mov	r5, r1
 800a8e2:	f7f6 f901 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f43f aebb 	beq.w	800a662 <_dtoa_r+0x472>
 800a8ec:	e6f0      	b.n	800a6d0 <_dtoa_r+0x4e0>
 800a8ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	f000 80db 	beq.w	800aaac <_dtoa_r+0x8bc>
 800a8f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a8f8:	2a01      	cmp	r2, #1
 800a8fa:	f300 80bf 	bgt.w	800aa7c <_dtoa_r+0x88c>
 800a8fe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a900:	2a00      	cmp	r2, #0
 800a902:	f000 80b7 	beq.w	800aa74 <_dtoa_r+0x884>
 800a906:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a90a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a90c:	4646      	mov	r6, r8
 800a90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a910:	2101      	movs	r1, #1
 800a912:	441a      	add	r2, r3
 800a914:	4658      	mov	r0, fp
 800a916:	4498      	add	r8, r3
 800a918:	9209      	str	r2, [sp, #36]	@ 0x24
 800a91a:	f000 fc6b 	bl	800b1f4 <__i2b>
 800a91e:	4605      	mov	r5, r0
 800a920:	b15e      	cbz	r6, 800a93a <_dtoa_r+0x74a>
 800a922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd08      	ble.n	800a93a <_dtoa_r+0x74a>
 800a928:	42b3      	cmp	r3, r6
 800a92a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a92c:	bfa8      	it	ge
 800a92e:	4633      	movge	r3, r6
 800a930:	eba8 0803 	sub.w	r8, r8, r3
 800a934:	1af6      	subs	r6, r6, r3
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	9309      	str	r3, [sp, #36]	@ 0x24
 800a93a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a93c:	b1f3      	cbz	r3, 800a97c <_dtoa_r+0x78c>
 800a93e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 80b7 	beq.w	800aab4 <_dtoa_r+0x8c4>
 800a946:	b18c      	cbz	r4, 800a96c <_dtoa_r+0x77c>
 800a948:	4629      	mov	r1, r5
 800a94a:	4622      	mov	r2, r4
 800a94c:	4658      	mov	r0, fp
 800a94e:	f000 fd11 	bl	800b374 <__pow5mult>
 800a952:	464a      	mov	r2, r9
 800a954:	4601      	mov	r1, r0
 800a956:	4605      	mov	r5, r0
 800a958:	4658      	mov	r0, fp
 800a95a:	f000 fc61 	bl	800b220 <__multiply>
 800a95e:	4649      	mov	r1, r9
 800a960:	9006      	str	r0, [sp, #24]
 800a962:	4658      	mov	r0, fp
 800a964:	f000 fb48 	bl	800aff8 <_Bfree>
 800a968:	9b06      	ldr	r3, [sp, #24]
 800a96a:	4699      	mov	r9, r3
 800a96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a96e:	1b1a      	subs	r2, r3, r4
 800a970:	d004      	beq.n	800a97c <_dtoa_r+0x78c>
 800a972:	4649      	mov	r1, r9
 800a974:	4658      	mov	r0, fp
 800a976:	f000 fcfd 	bl	800b374 <__pow5mult>
 800a97a:	4681      	mov	r9, r0
 800a97c:	2101      	movs	r1, #1
 800a97e:	4658      	mov	r0, fp
 800a980:	f000 fc38 	bl	800b1f4 <__i2b>
 800a984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a986:	4604      	mov	r4, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 81cf 	beq.w	800ad2c <_dtoa_r+0xb3c>
 800a98e:	461a      	mov	r2, r3
 800a990:	4601      	mov	r1, r0
 800a992:	4658      	mov	r0, fp
 800a994:	f000 fcee 	bl	800b374 <__pow5mult>
 800a998:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	4604      	mov	r4, r0
 800a99e:	f300 8095 	bgt.w	800aacc <_dtoa_r+0x8dc>
 800a9a2:	9b04      	ldr	r3, [sp, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 8087 	bne.w	800aab8 <_dtoa_r+0x8c8>
 800a9aa:	9b05      	ldr	r3, [sp, #20]
 800a9ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 8089 	bne.w	800aac8 <_dtoa_r+0x8d8>
 800a9b6:	9b05      	ldr	r3, [sp, #20]
 800a9b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9bc:	0d1b      	lsrs	r3, r3, #20
 800a9be:	051b      	lsls	r3, r3, #20
 800a9c0:	b12b      	cbz	r3, 800a9ce <_dtoa_r+0x7de>
 800a9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c8:	f108 0801 	add.w	r8, r8, #1
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 81b0 	beq.w	800ad38 <_dtoa_r+0xb48>
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9de:	6918      	ldr	r0, [r3, #16]
 800a9e0:	f000 fbbc 	bl	800b15c <__hi0bits>
 800a9e4:	f1c0 0020 	rsb	r0, r0, #32
 800a9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ea:	4418      	add	r0, r3
 800a9ec:	f010 001f 	ands.w	r0, r0, #31
 800a9f0:	d077      	beq.n	800aae2 <_dtoa_r+0x8f2>
 800a9f2:	f1c0 0320 	rsb	r3, r0, #32
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	dd6b      	ble.n	800aad2 <_dtoa_r+0x8e2>
 800a9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9fc:	f1c0 001c 	rsb	r0, r0, #28
 800aa00:	4403      	add	r3, r0
 800aa02:	4480      	add	r8, r0
 800aa04:	4406      	add	r6, r0
 800aa06:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa08:	f1b8 0f00 	cmp.w	r8, #0
 800aa0c:	dd05      	ble.n	800aa1a <_dtoa_r+0x82a>
 800aa0e:	4649      	mov	r1, r9
 800aa10:	4642      	mov	r2, r8
 800aa12:	4658      	mov	r0, fp
 800aa14:	f000 fd08 	bl	800b428 <__lshift>
 800aa18:	4681      	mov	r9, r0
 800aa1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd05      	ble.n	800aa2c <_dtoa_r+0x83c>
 800aa20:	4621      	mov	r1, r4
 800aa22:	461a      	mov	r2, r3
 800aa24:	4658      	mov	r0, fp
 800aa26:	f000 fcff 	bl	800b428 <__lshift>
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d059      	beq.n	800aae6 <_dtoa_r+0x8f6>
 800aa32:	4621      	mov	r1, r4
 800aa34:	4648      	mov	r0, r9
 800aa36:	f000 fd63 	bl	800b500 <__mcmp>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	da53      	bge.n	800aae6 <_dtoa_r+0x8f6>
 800aa3e:	1e7b      	subs	r3, r7, #1
 800aa40:	9306      	str	r3, [sp, #24]
 800aa42:	4649      	mov	r1, r9
 800aa44:	2300      	movs	r3, #0
 800aa46:	220a      	movs	r2, #10
 800aa48:	4658      	mov	r0, fp
 800aa4a:	f000 faf7 	bl	800b03c <__multadd>
 800aa4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa50:	4681      	mov	r9, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 8172 	beq.w	800ad3c <_dtoa_r+0xb4c>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	220a      	movs	r2, #10
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f000 faec 	bl	800b03c <__multadd>
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	4605      	mov	r5, r0
 800aa6a:	dc67      	bgt.n	800ab3c <_dtoa_r+0x94c>
 800aa6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	dc41      	bgt.n	800aaf6 <_dtoa_r+0x906>
 800aa72:	e063      	b.n	800ab3c <_dtoa_r+0x94c>
 800aa74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa7a:	e746      	b.n	800a90a <_dtoa_r+0x71a>
 800aa7c:	9b08      	ldr	r3, [sp, #32]
 800aa7e:	1e5c      	subs	r4, r3, #1
 800aa80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	bfbf      	itttt	lt
 800aa86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa88:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800aa8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa8c:	1ae3      	sublt	r3, r4, r3
 800aa8e:	bfb4      	ite	lt
 800aa90:	18d2      	addlt	r2, r2, r3
 800aa92:	1b1c      	subge	r4, r3, r4
 800aa94:	9b08      	ldr	r3, [sp, #32]
 800aa96:	bfbc      	itt	lt
 800aa98:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800aa9a:	2400      	movlt	r4, #0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bfb5      	itete	lt
 800aaa0:	eba8 0603 	sublt.w	r6, r8, r3
 800aaa4:	9b08      	ldrge	r3, [sp, #32]
 800aaa6:	2300      	movlt	r3, #0
 800aaa8:	4646      	movge	r6, r8
 800aaaa:	e730      	b.n	800a90e <_dtoa_r+0x71e>
 800aaac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aaae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aab0:	4646      	mov	r6, r8
 800aab2:	e735      	b.n	800a920 <_dtoa_r+0x730>
 800aab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aab6:	e75c      	b.n	800a972 <_dtoa_r+0x782>
 800aab8:	2300      	movs	r3, #0
 800aaba:	e788      	b.n	800a9ce <_dtoa_r+0x7de>
 800aabc:	3fe00000 	.word	0x3fe00000
 800aac0:	40240000 	.word	0x40240000
 800aac4:	40140000 	.word	0x40140000
 800aac8:	9b04      	ldr	r3, [sp, #16]
 800aaca:	e780      	b.n	800a9ce <_dtoa_r+0x7de>
 800aacc:	2300      	movs	r3, #0
 800aace:	930a      	str	r3, [sp, #40]	@ 0x28
 800aad0:	e782      	b.n	800a9d8 <_dtoa_r+0x7e8>
 800aad2:	d099      	beq.n	800aa08 <_dtoa_r+0x818>
 800aad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad6:	331c      	adds	r3, #28
 800aad8:	441a      	add	r2, r3
 800aada:	4498      	add	r8, r3
 800aadc:	441e      	add	r6, r3
 800aade:	9209      	str	r2, [sp, #36]	@ 0x24
 800aae0:	e792      	b.n	800aa08 <_dtoa_r+0x818>
 800aae2:	4603      	mov	r3, r0
 800aae4:	e7f6      	b.n	800aad4 <_dtoa_r+0x8e4>
 800aae6:	9b08      	ldr	r3, [sp, #32]
 800aae8:	9706      	str	r7, [sp, #24]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc20      	bgt.n	800ab30 <_dtoa_r+0x940>
 800aaee:	9302      	str	r3, [sp, #8]
 800aaf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	dd1e      	ble.n	800ab34 <_dtoa_r+0x944>
 800aaf6:	9b02      	ldr	r3, [sp, #8]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f47f aec0 	bne.w	800a87e <_dtoa_r+0x68e>
 800aafe:	4621      	mov	r1, r4
 800ab00:	2205      	movs	r2, #5
 800ab02:	4658      	mov	r0, fp
 800ab04:	f000 fa9a 	bl	800b03c <__multadd>
 800ab08:	4601      	mov	r1, r0
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	4648      	mov	r0, r9
 800ab0e:	f000 fcf7 	bl	800b500 <__mcmp>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	f77f aeb3 	ble.w	800a87e <_dtoa_r+0x68e>
 800ab18:	4656      	mov	r6, sl
 800ab1a:	2331      	movs	r3, #49	@ 0x31
 800ab1c:	f806 3b01 	strb.w	r3, [r6], #1
 800ab20:	9b06      	ldr	r3, [sp, #24]
 800ab22:	3301      	adds	r3, #1
 800ab24:	9306      	str	r3, [sp, #24]
 800ab26:	e6ae      	b.n	800a886 <_dtoa_r+0x696>
 800ab28:	9c08      	ldr	r4, [sp, #32]
 800ab2a:	9706      	str	r7, [sp, #24]
 800ab2c:	4625      	mov	r5, r4
 800ab2e:	e7f3      	b.n	800ab18 <_dtoa_r+0x928>
 800ab30:	9b08      	ldr	r3, [sp, #32]
 800ab32:	9302      	str	r3, [sp, #8]
 800ab34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 8104 	beq.w	800ad44 <_dtoa_r+0xb54>
 800ab3c:	2e00      	cmp	r6, #0
 800ab3e:	dd05      	ble.n	800ab4c <_dtoa_r+0x95c>
 800ab40:	4629      	mov	r1, r5
 800ab42:	4632      	mov	r2, r6
 800ab44:	4658      	mov	r0, fp
 800ab46:	f000 fc6f 	bl	800b428 <__lshift>
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d05a      	beq.n	800ac08 <_dtoa_r+0xa18>
 800ab52:	6869      	ldr	r1, [r5, #4]
 800ab54:	4658      	mov	r0, fp
 800ab56:	f000 fa0f 	bl	800af78 <_Balloc>
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	b928      	cbnz	r0, 800ab6a <_dtoa_r+0x97a>
 800ab5e:	4b84      	ldr	r3, [pc, #528]	@ (800ad70 <_dtoa_r+0xb80>)
 800ab60:	4602      	mov	r2, r0
 800ab62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab66:	f7ff bb57 	b.w	800a218 <_dtoa_r+0x28>
 800ab6a:	692a      	ldr	r2, [r5, #16]
 800ab6c:	3202      	adds	r2, #2
 800ab6e:	0092      	lsls	r2, r2, #2
 800ab70:	f105 010c 	add.w	r1, r5, #12
 800ab74:	300c      	adds	r0, #12
 800ab76:	f7ff fa9e 	bl	800a0b6 <memcpy>
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4658      	mov	r0, fp
 800ab80:	f000 fc52 	bl	800b428 <__lshift>
 800ab84:	f10a 0301 	add.w	r3, sl, #1
 800ab88:	9308      	str	r3, [sp, #32]
 800ab8a:	9b02      	ldr	r3, [sp, #8]
 800ab8c:	4453      	add	r3, sl
 800ab8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab90:	9b04      	ldr	r3, [sp, #16]
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	462f      	mov	r7, r5
 800ab98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	4621      	mov	r1, r4
 800aba0:	3b01      	subs	r3, #1
 800aba2:	4648      	mov	r0, r9
 800aba4:	9302      	str	r3, [sp, #8]
 800aba6:	f7ff fa99 	bl	800a0dc <quorem>
 800abaa:	4639      	mov	r1, r7
 800abac:	9004      	str	r0, [sp, #16]
 800abae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800abb2:	4648      	mov	r0, r9
 800abb4:	f000 fca4 	bl	800b500 <__mcmp>
 800abb8:	462a      	mov	r2, r5
 800abba:	9009      	str	r0, [sp, #36]	@ 0x24
 800abbc:	4621      	mov	r1, r4
 800abbe:	4658      	mov	r0, fp
 800abc0:	f000 fcba 	bl	800b538 <__mdiff>
 800abc4:	68c2      	ldr	r2, [r0, #12]
 800abc6:	4606      	mov	r6, r0
 800abc8:	bb02      	cbnz	r2, 800ac0c <_dtoa_r+0xa1c>
 800abca:	4601      	mov	r1, r0
 800abcc:	4648      	mov	r0, r9
 800abce:	f000 fc97 	bl	800b500 <__mcmp>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4631      	mov	r1, r6
 800abd6:	4658      	mov	r0, fp
 800abd8:	920c      	str	r2, [sp, #48]	@ 0x30
 800abda:	f000 fa0d 	bl	800aff8 <_Bfree>
 800abde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800abe2:	9e08      	ldr	r6, [sp, #32]
 800abe4:	ea43 0102 	orr.w	r1, r3, r2
 800abe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abea:	4319      	orrs	r1, r3
 800abec:	d110      	bne.n	800ac10 <_dtoa_r+0xa20>
 800abee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abf2:	d029      	beq.n	800ac48 <_dtoa_r+0xa58>
 800abf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dd02      	ble.n	800ac00 <_dtoa_r+0xa10>
 800abfa:	9b04      	ldr	r3, [sp, #16]
 800abfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac00:	9b02      	ldr	r3, [sp, #8]
 800ac02:	f883 8000 	strb.w	r8, [r3]
 800ac06:	e63f      	b.n	800a888 <_dtoa_r+0x698>
 800ac08:	4628      	mov	r0, r5
 800ac0a:	e7bb      	b.n	800ab84 <_dtoa_r+0x994>
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	e7e1      	b.n	800abd4 <_dtoa_r+0x9e4>
 800ac10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	db04      	blt.n	800ac20 <_dtoa_r+0xa30>
 800ac16:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	d120      	bne.n	800ac62 <_dtoa_r+0xa72>
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	dded      	ble.n	800ac00 <_dtoa_r+0xa10>
 800ac24:	4649      	mov	r1, r9
 800ac26:	2201      	movs	r2, #1
 800ac28:	4658      	mov	r0, fp
 800ac2a:	f000 fbfd 	bl	800b428 <__lshift>
 800ac2e:	4621      	mov	r1, r4
 800ac30:	4681      	mov	r9, r0
 800ac32:	f000 fc65 	bl	800b500 <__mcmp>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	dc03      	bgt.n	800ac42 <_dtoa_r+0xa52>
 800ac3a:	d1e1      	bne.n	800ac00 <_dtoa_r+0xa10>
 800ac3c:	f018 0f01 	tst.w	r8, #1
 800ac40:	d0de      	beq.n	800ac00 <_dtoa_r+0xa10>
 800ac42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac46:	d1d8      	bne.n	800abfa <_dtoa_r+0xa0a>
 800ac48:	9a02      	ldr	r2, [sp, #8]
 800ac4a:	2339      	movs	r3, #57	@ 0x39
 800ac4c:	7013      	strb	r3, [r2, #0]
 800ac4e:	4633      	mov	r3, r6
 800ac50:	461e      	mov	r6, r3
 800ac52:	3b01      	subs	r3, #1
 800ac54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac58:	2a39      	cmp	r2, #57	@ 0x39
 800ac5a:	d052      	beq.n	800ad02 <_dtoa_r+0xb12>
 800ac5c:	3201      	adds	r2, #1
 800ac5e:	701a      	strb	r2, [r3, #0]
 800ac60:	e612      	b.n	800a888 <_dtoa_r+0x698>
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	dd07      	ble.n	800ac76 <_dtoa_r+0xa86>
 800ac66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac6a:	d0ed      	beq.n	800ac48 <_dtoa_r+0xa58>
 800ac6c:	9a02      	ldr	r2, [sp, #8]
 800ac6e:	f108 0301 	add.w	r3, r8, #1
 800ac72:	7013      	strb	r3, [r2, #0]
 800ac74:	e608      	b.n	800a888 <_dtoa_r+0x698>
 800ac76:	9b08      	ldr	r3, [sp, #32]
 800ac78:	9a08      	ldr	r2, [sp, #32]
 800ac7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d028      	beq.n	800acd6 <_dtoa_r+0xae6>
 800ac84:	4649      	mov	r1, r9
 800ac86:	2300      	movs	r3, #0
 800ac88:	220a      	movs	r2, #10
 800ac8a:	4658      	mov	r0, fp
 800ac8c:	f000 f9d6 	bl	800b03c <__multadd>
 800ac90:	42af      	cmp	r7, r5
 800ac92:	4681      	mov	r9, r0
 800ac94:	f04f 0300 	mov.w	r3, #0
 800ac98:	f04f 020a 	mov.w	r2, #10
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4658      	mov	r0, fp
 800aca0:	d107      	bne.n	800acb2 <_dtoa_r+0xac2>
 800aca2:	f000 f9cb 	bl	800b03c <__multadd>
 800aca6:	4607      	mov	r7, r0
 800aca8:	4605      	mov	r5, r0
 800acaa:	9b08      	ldr	r3, [sp, #32]
 800acac:	3301      	adds	r3, #1
 800acae:	9308      	str	r3, [sp, #32]
 800acb0:	e774      	b.n	800ab9c <_dtoa_r+0x9ac>
 800acb2:	f000 f9c3 	bl	800b03c <__multadd>
 800acb6:	4629      	mov	r1, r5
 800acb8:	4607      	mov	r7, r0
 800acba:	2300      	movs	r3, #0
 800acbc:	220a      	movs	r2, #10
 800acbe:	4658      	mov	r0, fp
 800acc0:	f000 f9bc 	bl	800b03c <__multadd>
 800acc4:	4605      	mov	r5, r0
 800acc6:	e7f0      	b.n	800acaa <_dtoa_r+0xaba>
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	bfcc      	ite	gt
 800acce:	461e      	movgt	r6, r3
 800acd0:	2601      	movle	r6, #1
 800acd2:	4456      	add	r6, sl
 800acd4:	2700      	movs	r7, #0
 800acd6:	4649      	mov	r1, r9
 800acd8:	2201      	movs	r2, #1
 800acda:	4658      	mov	r0, fp
 800acdc:	f000 fba4 	bl	800b428 <__lshift>
 800ace0:	4621      	mov	r1, r4
 800ace2:	4681      	mov	r9, r0
 800ace4:	f000 fc0c 	bl	800b500 <__mcmp>
 800ace8:	2800      	cmp	r0, #0
 800acea:	dcb0      	bgt.n	800ac4e <_dtoa_r+0xa5e>
 800acec:	d102      	bne.n	800acf4 <_dtoa_r+0xb04>
 800acee:	f018 0f01 	tst.w	r8, #1
 800acf2:	d1ac      	bne.n	800ac4e <_dtoa_r+0xa5e>
 800acf4:	4633      	mov	r3, r6
 800acf6:	461e      	mov	r6, r3
 800acf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acfc:	2a30      	cmp	r2, #48	@ 0x30
 800acfe:	d0fa      	beq.n	800acf6 <_dtoa_r+0xb06>
 800ad00:	e5c2      	b.n	800a888 <_dtoa_r+0x698>
 800ad02:	459a      	cmp	sl, r3
 800ad04:	d1a4      	bne.n	800ac50 <_dtoa_r+0xa60>
 800ad06:	9b06      	ldr	r3, [sp, #24]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	9306      	str	r3, [sp, #24]
 800ad0c:	2331      	movs	r3, #49	@ 0x31
 800ad0e:	f88a 3000 	strb.w	r3, [sl]
 800ad12:	e5b9      	b.n	800a888 <_dtoa_r+0x698>
 800ad14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad74 <_dtoa_r+0xb84>
 800ad1a:	b11b      	cbz	r3, 800ad24 <_dtoa_r+0xb34>
 800ad1c:	f10a 0308 	add.w	r3, sl, #8
 800ad20:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	4650      	mov	r0, sl
 800ad26:	b017      	add	sp, #92	@ 0x5c
 800ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	f77f ae37 	ble.w	800a9a2 <_dtoa_r+0x7b2>
 800ad34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad38:	2001      	movs	r0, #1
 800ad3a:	e655      	b.n	800a9e8 <_dtoa_r+0x7f8>
 800ad3c:	9b02      	ldr	r3, [sp, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f77f aed6 	ble.w	800aaf0 <_dtoa_r+0x900>
 800ad44:	4656      	mov	r6, sl
 800ad46:	4621      	mov	r1, r4
 800ad48:	4648      	mov	r0, r9
 800ad4a:	f7ff f9c7 	bl	800a0dc <quorem>
 800ad4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad52:	f806 8b01 	strb.w	r8, [r6], #1
 800ad56:	9b02      	ldr	r3, [sp, #8]
 800ad58:	eba6 020a 	sub.w	r2, r6, sl
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	ddb3      	ble.n	800acc8 <_dtoa_r+0xad8>
 800ad60:	4649      	mov	r1, r9
 800ad62:	2300      	movs	r3, #0
 800ad64:	220a      	movs	r2, #10
 800ad66:	4658      	mov	r0, fp
 800ad68:	f000 f968 	bl	800b03c <__multadd>
 800ad6c:	4681      	mov	r9, r0
 800ad6e:	e7ea      	b.n	800ad46 <_dtoa_r+0xb56>
 800ad70:	080100af 	.word	0x080100af
 800ad74:	08010033 	.word	0x08010033

0800ad78 <_free_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	2900      	cmp	r1, #0
 800ad7e:	d041      	beq.n	800ae04 <_free_r+0x8c>
 800ad80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad84:	1f0c      	subs	r4, r1, #4
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	bfb8      	it	lt
 800ad8a:	18e4      	addlt	r4, r4, r3
 800ad8c:	f000 f8e8 	bl	800af60 <__malloc_lock>
 800ad90:	4a1d      	ldr	r2, [pc, #116]	@ (800ae08 <_free_r+0x90>)
 800ad92:	6813      	ldr	r3, [r2, #0]
 800ad94:	b933      	cbnz	r3, 800ada4 <_free_r+0x2c>
 800ad96:	6063      	str	r3, [r4, #4]
 800ad98:	6014      	str	r4, [r2, #0]
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ada0:	f000 b8e4 	b.w	800af6c <__malloc_unlock>
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	d908      	bls.n	800adba <_free_r+0x42>
 800ada8:	6820      	ldr	r0, [r4, #0]
 800adaa:	1821      	adds	r1, r4, r0
 800adac:	428b      	cmp	r3, r1
 800adae:	bf01      	itttt	eq
 800adb0:	6819      	ldreq	r1, [r3, #0]
 800adb2:	685b      	ldreq	r3, [r3, #4]
 800adb4:	1809      	addeq	r1, r1, r0
 800adb6:	6021      	streq	r1, [r4, #0]
 800adb8:	e7ed      	b.n	800ad96 <_free_r+0x1e>
 800adba:	461a      	mov	r2, r3
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	b10b      	cbz	r3, 800adc4 <_free_r+0x4c>
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	d9fa      	bls.n	800adba <_free_r+0x42>
 800adc4:	6811      	ldr	r1, [r2, #0]
 800adc6:	1850      	adds	r0, r2, r1
 800adc8:	42a0      	cmp	r0, r4
 800adca:	d10b      	bne.n	800ade4 <_free_r+0x6c>
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	4401      	add	r1, r0
 800add0:	1850      	adds	r0, r2, r1
 800add2:	4283      	cmp	r3, r0
 800add4:	6011      	str	r1, [r2, #0]
 800add6:	d1e0      	bne.n	800ad9a <_free_r+0x22>
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	6053      	str	r3, [r2, #4]
 800adde:	4408      	add	r0, r1
 800ade0:	6010      	str	r0, [r2, #0]
 800ade2:	e7da      	b.n	800ad9a <_free_r+0x22>
 800ade4:	d902      	bls.n	800adec <_free_r+0x74>
 800ade6:	230c      	movs	r3, #12
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	e7d6      	b.n	800ad9a <_free_r+0x22>
 800adec:	6820      	ldr	r0, [r4, #0]
 800adee:	1821      	adds	r1, r4, r0
 800adf0:	428b      	cmp	r3, r1
 800adf2:	bf04      	itt	eq
 800adf4:	6819      	ldreq	r1, [r3, #0]
 800adf6:	685b      	ldreq	r3, [r3, #4]
 800adf8:	6063      	str	r3, [r4, #4]
 800adfa:	bf04      	itt	eq
 800adfc:	1809      	addeq	r1, r1, r0
 800adfe:	6021      	streq	r1, [r4, #0]
 800ae00:	6054      	str	r4, [r2, #4]
 800ae02:	e7ca      	b.n	800ad9a <_free_r+0x22>
 800ae04:	bd38      	pop	{r3, r4, r5, pc}
 800ae06:	bf00      	nop
 800ae08:	200052ec 	.word	0x200052ec

0800ae0c <malloc>:
 800ae0c:	4b02      	ldr	r3, [pc, #8]	@ (800ae18 <malloc+0xc>)
 800ae0e:	4601      	mov	r1, r0
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	f000 b825 	b.w	800ae60 <_malloc_r>
 800ae16:	bf00      	nop
 800ae18:	2000001c 	.word	0x2000001c

0800ae1c <sbrk_aligned>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ae5c <sbrk_aligned+0x40>)
 800ae20:	460c      	mov	r4, r1
 800ae22:	6831      	ldr	r1, [r6, #0]
 800ae24:	4605      	mov	r5, r0
 800ae26:	b911      	cbnz	r1, 800ae2e <sbrk_aligned+0x12>
 800ae28:	f002 fb50 	bl	800d4cc <_sbrk_r>
 800ae2c:	6030      	str	r0, [r6, #0]
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4628      	mov	r0, r5
 800ae32:	f002 fb4b 	bl	800d4cc <_sbrk_r>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	d103      	bne.n	800ae42 <sbrk_aligned+0x26>
 800ae3a:	f04f 34ff 	mov.w	r4, #4294967295
 800ae3e:	4620      	mov	r0, r4
 800ae40:	bd70      	pop	{r4, r5, r6, pc}
 800ae42:	1cc4      	adds	r4, r0, #3
 800ae44:	f024 0403 	bic.w	r4, r4, #3
 800ae48:	42a0      	cmp	r0, r4
 800ae4a:	d0f8      	beq.n	800ae3e <sbrk_aligned+0x22>
 800ae4c:	1a21      	subs	r1, r4, r0
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f002 fb3c 	bl	800d4cc <_sbrk_r>
 800ae54:	3001      	adds	r0, #1
 800ae56:	d1f2      	bne.n	800ae3e <sbrk_aligned+0x22>
 800ae58:	e7ef      	b.n	800ae3a <sbrk_aligned+0x1e>
 800ae5a:	bf00      	nop
 800ae5c:	200052e8 	.word	0x200052e8

0800ae60 <_malloc_r>:
 800ae60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae64:	1ccd      	adds	r5, r1, #3
 800ae66:	f025 0503 	bic.w	r5, r5, #3
 800ae6a:	3508      	adds	r5, #8
 800ae6c:	2d0c      	cmp	r5, #12
 800ae6e:	bf38      	it	cc
 800ae70:	250c      	movcc	r5, #12
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	4606      	mov	r6, r0
 800ae76:	db01      	blt.n	800ae7c <_malloc_r+0x1c>
 800ae78:	42a9      	cmp	r1, r5
 800ae7a:	d904      	bls.n	800ae86 <_malloc_r+0x26>
 800ae7c:	230c      	movs	r3, #12
 800ae7e:	6033      	str	r3, [r6, #0]
 800ae80:	2000      	movs	r0, #0
 800ae82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af5c <_malloc_r+0xfc>
 800ae8a:	f000 f869 	bl	800af60 <__malloc_lock>
 800ae8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae92:	461c      	mov	r4, r3
 800ae94:	bb44      	cbnz	r4, 800aee8 <_malloc_r+0x88>
 800ae96:	4629      	mov	r1, r5
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff ffbf 	bl	800ae1c <sbrk_aligned>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	4604      	mov	r4, r0
 800aea2:	d158      	bne.n	800af56 <_malloc_r+0xf6>
 800aea4:	f8d8 4000 	ldr.w	r4, [r8]
 800aea8:	4627      	mov	r7, r4
 800aeaa:	2f00      	cmp	r7, #0
 800aeac:	d143      	bne.n	800af36 <_malloc_r+0xd6>
 800aeae:	2c00      	cmp	r4, #0
 800aeb0:	d04b      	beq.n	800af4a <_malloc_r+0xea>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	eb04 0903 	add.w	r9, r4, r3
 800aebc:	f002 fb06 	bl	800d4cc <_sbrk_r>
 800aec0:	4581      	cmp	r9, r0
 800aec2:	d142      	bne.n	800af4a <_malloc_r+0xea>
 800aec4:	6821      	ldr	r1, [r4, #0]
 800aec6:	1a6d      	subs	r5, r5, r1
 800aec8:	4629      	mov	r1, r5
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7ff ffa6 	bl	800ae1c <sbrk_aligned>
 800aed0:	3001      	adds	r0, #1
 800aed2:	d03a      	beq.n	800af4a <_malloc_r+0xea>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	442b      	add	r3, r5
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	f8d8 3000 	ldr.w	r3, [r8]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	bb62      	cbnz	r2, 800af3c <_malloc_r+0xdc>
 800aee2:	f8c8 7000 	str.w	r7, [r8]
 800aee6:	e00f      	b.n	800af08 <_malloc_r+0xa8>
 800aee8:	6822      	ldr	r2, [r4, #0]
 800aeea:	1b52      	subs	r2, r2, r5
 800aeec:	d420      	bmi.n	800af30 <_malloc_r+0xd0>
 800aeee:	2a0b      	cmp	r2, #11
 800aef0:	d917      	bls.n	800af22 <_malloc_r+0xc2>
 800aef2:	1961      	adds	r1, r4, r5
 800aef4:	42a3      	cmp	r3, r4
 800aef6:	6025      	str	r5, [r4, #0]
 800aef8:	bf18      	it	ne
 800aefa:	6059      	strne	r1, [r3, #4]
 800aefc:	6863      	ldr	r3, [r4, #4]
 800aefe:	bf08      	it	eq
 800af00:	f8c8 1000 	streq.w	r1, [r8]
 800af04:	5162      	str	r2, [r4, r5]
 800af06:	604b      	str	r3, [r1, #4]
 800af08:	4630      	mov	r0, r6
 800af0a:	f000 f82f 	bl	800af6c <__malloc_unlock>
 800af0e:	f104 000b 	add.w	r0, r4, #11
 800af12:	1d23      	adds	r3, r4, #4
 800af14:	f020 0007 	bic.w	r0, r0, #7
 800af18:	1ac2      	subs	r2, r0, r3
 800af1a:	bf1c      	itt	ne
 800af1c:	1a1b      	subne	r3, r3, r0
 800af1e:	50a3      	strne	r3, [r4, r2]
 800af20:	e7af      	b.n	800ae82 <_malloc_r+0x22>
 800af22:	6862      	ldr	r2, [r4, #4]
 800af24:	42a3      	cmp	r3, r4
 800af26:	bf0c      	ite	eq
 800af28:	f8c8 2000 	streq.w	r2, [r8]
 800af2c:	605a      	strne	r2, [r3, #4]
 800af2e:	e7eb      	b.n	800af08 <_malloc_r+0xa8>
 800af30:	4623      	mov	r3, r4
 800af32:	6864      	ldr	r4, [r4, #4]
 800af34:	e7ae      	b.n	800ae94 <_malloc_r+0x34>
 800af36:	463c      	mov	r4, r7
 800af38:	687f      	ldr	r7, [r7, #4]
 800af3a:	e7b6      	b.n	800aeaa <_malloc_r+0x4a>
 800af3c:	461a      	mov	r2, r3
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	42a3      	cmp	r3, r4
 800af42:	d1fb      	bne.n	800af3c <_malloc_r+0xdc>
 800af44:	2300      	movs	r3, #0
 800af46:	6053      	str	r3, [r2, #4]
 800af48:	e7de      	b.n	800af08 <_malloc_r+0xa8>
 800af4a:	230c      	movs	r3, #12
 800af4c:	6033      	str	r3, [r6, #0]
 800af4e:	4630      	mov	r0, r6
 800af50:	f000 f80c 	bl	800af6c <__malloc_unlock>
 800af54:	e794      	b.n	800ae80 <_malloc_r+0x20>
 800af56:	6005      	str	r5, [r0, #0]
 800af58:	e7d6      	b.n	800af08 <_malloc_r+0xa8>
 800af5a:	bf00      	nop
 800af5c:	200052ec 	.word	0x200052ec

0800af60 <__malloc_lock>:
 800af60:	4801      	ldr	r0, [pc, #4]	@ (800af68 <__malloc_lock+0x8>)
 800af62:	f7ff b8a6 	b.w	800a0b2 <__retarget_lock_acquire_recursive>
 800af66:	bf00      	nop
 800af68:	200052e4 	.word	0x200052e4

0800af6c <__malloc_unlock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	@ (800af74 <__malloc_unlock+0x8>)
 800af6e:	f7ff b8a1 	b.w	800a0b4 <__retarget_lock_release_recursive>
 800af72:	bf00      	nop
 800af74:	200052e4 	.word	0x200052e4

0800af78 <_Balloc>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	69c6      	ldr	r6, [r0, #28]
 800af7c:	4604      	mov	r4, r0
 800af7e:	460d      	mov	r5, r1
 800af80:	b976      	cbnz	r6, 800afa0 <_Balloc+0x28>
 800af82:	2010      	movs	r0, #16
 800af84:	f7ff ff42 	bl	800ae0c <malloc>
 800af88:	4602      	mov	r2, r0
 800af8a:	61e0      	str	r0, [r4, #28]
 800af8c:	b920      	cbnz	r0, 800af98 <_Balloc+0x20>
 800af8e:	4b18      	ldr	r3, [pc, #96]	@ (800aff0 <_Balloc+0x78>)
 800af90:	4818      	ldr	r0, [pc, #96]	@ (800aff4 <_Balloc+0x7c>)
 800af92:	216b      	movs	r1, #107	@ 0x6b
 800af94:	f002 fab0 	bl	800d4f8 <__assert_func>
 800af98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af9c:	6006      	str	r6, [r0, #0]
 800af9e:	60c6      	str	r6, [r0, #12]
 800afa0:	69e6      	ldr	r6, [r4, #28]
 800afa2:	68f3      	ldr	r3, [r6, #12]
 800afa4:	b183      	cbz	r3, 800afc8 <_Balloc+0x50>
 800afa6:	69e3      	ldr	r3, [r4, #28]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afae:	b9b8      	cbnz	r0, 800afe0 <_Balloc+0x68>
 800afb0:	2101      	movs	r1, #1
 800afb2:	fa01 f605 	lsl.w	r6, r1, r5
 800afb6:	1d72      	adds	r2, r6, #5
 800afb8:	0092      	lsls	r2, r2, #2
 800afba:	4620      	mov	r0, r4
 800afbc:	f002 faba 	bl	800d534 <_calloc_r>
 800afc0:	b160      	cbz	r0, 800afdc <_Balloc+0x64>
 800afc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afc6:	e00e      	b.n	800afe6 <_Balloc+0x6e>
 800afc8:	2221      	movs	r2, #33	@ 0x21
 800afca:	2104      	movs	r1, #4
 800afcc:	4620      	mov	r0, r4
 800afce:	f002 fab1 	bl	800d534 <_calloc_r>
 800afd2:	69e3      	ldr	r3, [r4, #28]
 800afd4:	60f0      	str	r0, [r6, #12]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e4      	bne.n	800afa6 <_Balloc+0x2e>
 800afdc:	2000      	movs	r0, #0
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	6802      	ldr	r2, [r0, #0]
 800afe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afe6:	2300      	movs	r3, #0
 800afe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afec:	e7f7      	b.n	800afde <_Balloc+0x66>
 800afee:	bf00      	nop
 800aff0:	08010040 	.word	0x08010040
 800aff4:	080100c0 	.word	0x080100c0

0800aff8 <_Bfree>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	69c6      	ldr	r6, [r0, #28]
 800affc:	4605      	mov	r5, r0
 800affe:	460c      	mov	r4, r1
 800b000:	b976      	cbnz	r6, 800b020 <_Bfree+0x28>
 800b002:	2010      	movs	r0, #16
 800b004:	f7ff ff02 	bl	800ae0c <malloc>
 800b008:	4602      	mov	r2, r0
 800b00a:	61e8      	str	r0, [r5, #28]
 800b00c:	b920      	cbnz	r0, 800b018 <_Bfree+0x20>
 800b00e:	4b09      	ldr	r3, [pc, #36]	@ (800b034 <_Bfree+0x3c>)
 800b010:	4809      	ldr	r0, [pc, #36]	@ (800b038 <_Bfree+0x40>)
 800b012:	218f      	movs	r1, #143	@ 0x8f
 800b014:	f002 fa70 	bl	800d4f8 <__assert_func>
 800b018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b01c:	6006      	str	r6, [r0, #0]
 800b01e:	60c6      	str	r6, [r0, #12]
 800b020:	b13c      	cbz	r4, 800b032 <_Bfree+0x3a>
 800b022:	69eb      	ldr	r3, [r5, #28]
 800b024:	6862      	ldr	r2, [r4, #4]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b02c:	6021      	str	r1, [r4, #0]
 800b02e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b032:	bd70      	pop	{r4, r5, r6, pc}
 800b034:	08010040 	.word	0x08010040
 800b038:	080100c0 	.word	0x080100c0

0800b03c <__multadd>:
 800b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b040:	690d      	ldr	r5, [r1, #16]
 800b042:	4607      	mov	r7, r0
 800b044:	460c      	mov	r4, r1
 800b046:	461e      	mov	r6, r3
 800b048:	f101 0c14 	add.w	ip, r1, #20
 800b04c:	2000      	movs	r0, #0
 800b04e:	f8dc 3000 	ldr.w	r3, [ip]
 800b052:	b299      	uxth	r1, r3
 800b054:	fb02 6101 	mla	r1, r2, r1, r6
 800b058:	0c1e      	lsrs	r6, r3, #16
 800b05a:	0c0b      	lsrs	r3, r1, #16
 800b05c:	fb02 3306 	mla	r3, r2, r6, r3
 800b060:	b289      	uxth	r1, r1
 800b062:	3001      	adds	r0, #1
 800b064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b068:	4285      	cmp	r5, r0
 800b06a:	f84c 1b04 	str.w	r1, [ip], #4
 800b06e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b072:	dcec      	bgt.n	800b04e <__multadd+0x12>
 800b074:	b30e      	cbz	r6, 800b0ba <__multadd+0x7e>
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	42ab      	cmp	r3, r5
 800b07a:	dc19      	bgt.n	800b0b0 <__multadd+0x74>
 800b07c:	6861      	ldr	r1, [r4, #4]
 800b07e:	4638      	mov	r0, r7
 800b080:	3101      	adds	r1, #1
 800b082:	f7ff ff79 	bl	800af78 <_Balloc>
 800b086:	4680      	mov	r8, r0
 800b088:	b928      	cbnz	r0, 800b096 <__multadd+0x5a>
 800b08a:	4602      	mov	r2, r0
 800b08c:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c0 <__multadd+0x84>)
 800b08e:	480d      	ldr	r0, [pc, #52]	@ (800b0c4 <__multadd+0x88>)
 800b090:	21ba      	movs	r1, #186	@ 0xba
 800b092:	f002 fa31 	bl	800d4f8 <__assert_func>
 800b096:	6922      	ldr	r2, [r4, #16]
 800b098:	3202      	adds	r2, #2
 800b09a:	f104 010c 	add.w	r1, r4, #12
 800b09e:	0092      	lsls	r2, r2, #2
 800b0a0:	300c      	adds	r0, #12
 800b0a2:	f7ff f808 	bl	800a0b6 <memcpy>
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f7ff ffa5 	bl	800aff8 <_Bfree>
 800b0ae:	4644      	mov	r4, r8
 800b0b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0b4:	3501      	adds	r5, #1
 800b0b6:	615e      	str	r6, [r3, #20]
 800b0b8:	6125      	str	r5, [r4, #16]
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c0:	080100af 	.word	0x080100af
 800b0c4:	080100c0 	.word	0x080100c0

0800b0c8 <__s2b>:
 800b0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	4615      	mov	r5, r2
 800b0d0:	461f      	mov	r7, r3
 800b0d2:	2209      	movs	r2, #9
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0dc:	2100      	movs	r1, #0
 800b0de:	2201      	movs	r2, #1
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	db09      	blt.n	800b0f8 <__s2b+0x30>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff ff47 	bl	800af78 <_Balloc>
 800b0ea:	b940      	cbnz	r0, 800b0fe <__s2b+0x36>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	4b19      	ldr	r3, [pc, #100]	@ (800b154 <__s2b+0x8c>)
 800b0f0:	4819      	ldr	r0, [pc, #100]	@ (800b158 <__s2b+0x90>)
 800b0f2:	21d3      	movs	r1, #211	@ 0xd3
 800b0f4:	f002 fa00 	bl	800d4f8 <__assert_func>
 800b0f8:	0052      	lsls	r2, r2, #1
 800b0fa:	3101      	adds	r1, #1
 800b0fc:	e7f0      	b.n	800b0e0 <__s2b+0x18>
 800b0fe:	9b08      	ldr	r3, [sp, #32]
 800b100:	6143      	str	r3, [r0, #20]
 800b102:	2d09      	cmp	r5, #9
 800b104:	f04f 0301 	mov.w	r3, #1
 800b108:	6103      	str	r3, [r0, #16]
 800b10a:	dd16      	ble.n	800b13a <__s2b+0x72>
 800b10c:	f104 0909 	add.w	r9, r4, #9
 800b110:	46c8      	mov	r8, r9
 800b112:	442c      	add	r4, r5
 800b114:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b118:	4601      	mov	r1, r0
 800b11a:	3b30      	subs	r3, #48	@ 0x30
 800b11c:	220a      	movs	r2, #10
 800b11e:	4630      	mov	r0, r6
 800b120:	f7ff ff8c 	bl	800b03c <__multadd>
 800b124:	45a0      	cmp	r8, r4
 800b126:	d1f5      	bne.n	800b114 <__s2b+0x4c>
 800b128:	f1a5 0408 	sub.w	r4, r5, #8
 800b12c:	444c      	add	r4, r9
 800b12e:	1b2d      	subs	r5, r5, r4
 800b130:	1963      	adds	r3, r4, r5
 800b132:	42bb      	cmp	r3, r7
 800b134:	db04      	blt.n	800b140 <__s2b+0x78>
 800b136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13a:	340a      	adds	r4, #10
 800b13c:	2509      	movs	r5, #9
 800b13e:	e7f6      	b.n	800b12e <__s2b+0x66>
 800b140:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b144:	4601      	mov	r1, r0
 800b146:	3b30      	subs	r3, #48	@ 0x30
 800b148:	220a      	movs	r2, #10
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7ff ff76 	bl	800b03c <__multadd>
 800b150:	e7ee      	b.n	800b130 <__s2b+0x68>
 800b152:	bf00      	nop
 800b154:	080100af 	.word	0x080100af
 800b158:	080100c0 	.word	0x080100c0

0800b15c <__hi0bits>:
 800b15c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b160:	4603      	mov	r3, r0
 800b162:	bf36      	itet	cc
 800b164:	0403      	lslcc	r3, r0, #16
 800b166:	2000      	movcs	r0, #0
 800b168:	2010      	movcc	r0, #16
 800b16a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b16e:	bf3c      	itt	cc
 800b170:	021b      	lslcc	r3, r3, #8
 800b172:	3008      	addcc	r0, #8
 800b174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b178:	bf3c      	itt	cc
 800b17a:	011b      	lslcc	r3, r3, #4
 800b17c:	3004      	addcc	r0, #4
 800b17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b182:	bf3c      	itt	cc
 800b184:	009b      	lslcc	r3, r3, #2
 800b186:	3002      	addcc	r0, #2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	db05      	blt.n	800b198 <__hi0bits+0x3c>
 800b18c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b190:	f100 0001 	add.w	r0, r0, #1
 800b194:	bf08      	it	eq
 800b196:	2020      	moveq	r0, #32
 800b198:	4770      	bx	lr

0800b19a <__lo0bits>:
 800b19a:	6803      	ldr	r3, [r0, #0]
 800b19c:	4602      	mov	r2, r0
 800b19e:	f013 0007 	ands.w	r0, r3, #7
 800b1a2:	d00b      	beq.n	800b1bc <__lo0bits+0x22>
 800b1a4:	07d9      	lsls	r1, r3, #31
 800b1a6:	d421      	bmi.n	800b1ec <__lo0bits+0x52>
 800b1a8:	0798      	lsls	r0, r3, #30
 800b1aa:	bf49      	itett	mi
 800b1ac:	085b      	lsrmi	r3, r3, #1
 800b1ae:	089b      	lsrpl	r3, r3, #2
 800b1b0:	2001      	movmi	r0, #1
 800b1b2:	6013      	strmi	r3, [r2, #0]
 800b1b4:	bf5c      	itt	pl
 800b1b6:	6013      	strpl	r3, [r2, #0]
 800b1b8:	2002      	movpl	r0, #2
 800b1ba:	4770      	bx	lr
 800b1bc:	b299      	uxth	r1, r3
 800b1be:	b909      	cbnz	r1, 800b1c4 <__lo0bits+0x2a>
 800b1c0:	0c1b      	lsrs	r3, r3, #16
 800b1c2:	2010      	movs	r0, #16
 800b1c4:	b2d9      	uxtb	r1, r3
 800b1c6:	b909      	cbnz	r1, 800b1cc <__lo0bits+0x32>
 800b1c8:	3008      	adds	r0, #8
 800b1ca:	0a1b      	lsrs	r3, r3, #8
 800b1cc:	0719      	lsls	r1, r3, #28
 800b1ce:	bf04      	itt	eq
 800b1d0:	091b      	lsreq	r3, r3, #4
 800b1d2:	3004      	addeq	r0, #4
 800b1d4:	0799      	lsls	r1, r3, #30
 800b1d6:	bf04      	itt	eq
 800b1d8:	089b      	lsreq	r3, r3, #2
 800b1da:	3002      	addeq	r0, #2
 800b1dc:	07d9      	lsls	r1, r3, #31
 800b1de:	d403      	bmi.n	800b1e8 <__lo0bits+0x4e>
 800b1e0:	085b      	lsrs	r3, r3, #1
 800b1e2:	f100 0001 	add.w	r0, r0, #1
 800b1e6:	d003      	beq.n	800b1f0 <__lo0bits+0x56>
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	4770      	bx	lr
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	4770      	bx	lr
 800b1f0:	2020      	movs	r0, #32
 800b1f2:	4770      	bx	lr

0800b1f4 <__i2b>:
 800b1f4:	b510      	push	{r4, lr}
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	f7ff febd 	bl	800af78 <_Balloc>
 800b1fe:	4602      	mov	r2, r0
 800b200:	b928      	cbnz	r0, 800b20e <__i2b+0x1a>
 800b202:	4b05      	ldr	r3, [pc, #20]	@ (800b218 <__i2b+0x24>)
 800b204:	4805      	ldr	r0, [pc, #20]	@ (800b21c <__i2b+0x28>)
 800b206:	f240 1145 	movw	r1, #325	@ 0x145
 800b20a:	f002 f975 	bl	800d4f8 <__assert_func>
 800b20e:	2301      	movs	r3, #1
 800b210:	6144      	str	r4, [r0, #20]
 800b212:	6103      	str	r3, [r0, #16]
 800b214:	bd10      	pop	{r4, pc}
 800b216:	bf00      	nop
 800b218:	080100af 	.word	0x080100af
 800b21c:	080100c0 	.word	0x080100c0

0800b220 <__multiply>:
 800b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	4614      	mov	r4, r2
 800b226:	690a      	ldr	r2, [r1, #16]
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	bfa8      	it	ge
 800b22e:	4623      	movge	r3, r4
 800b230:	460f      	mov	r7, r1
 800b232:	bfa4      	itt	ge
 800b234:	460c      	movge	r4, r1
 800b236:	461f      	movge	r7, r3
 800b238:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b23c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b240:	68a3      	ldr	r3, [r4, #8]
 800b242:	6861      	ldr	r1, [r4, #4]
 800b244:	eb0a 0609 	add.w	r6, sl, r9
 800b248:	42b3      	cmp	r3, r6
 800b24a:	b085      	sub	sp, #20
 800b24c:	bfb8      	it	lt
 800b24e:	3101      	addlt	r1, #1
 800b250:	f7ff fe92 	bl	800af78 <_Balloc>
 800b254:	b930      	cbnz	r0, 800b264 <__multiply+0x44>
 800b256:	4602      	mov	r2, r0
 800b258:	4b44      	ldr	r3, [pc, #272]	@ (800b36c <__multiply+0x14c>)
 800b25a:	4845      	ldr	r0, [pc, #276]	@ (800b370 <__multiply+0x150>)
 800b25c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b260:	f002 f94a 	bl	800d4f8 <__assert_func>
 800b264:	f100 0514 	add.w	r5, r0, #20
 800b268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b26c:	462b      	mov	r3, r5
 800b26e:	2200      	movs	r2, #0
 800b270:	4543      	cmp	r3, r8
 800b272:	d321      	bcc.n	800b2b8 <__multiply+0x98>
 800b274:	f107 0114 	add.w	r1, r7, #20
 800b278:	f104 0214 	add.w	r2, r4, #20
 800b27c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b280:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b284:	9302      	str	r3, [sp, #8]
 800b286:	1b13      	subs	r3, r2, r4
 800b288:	3b15      	subs	r3, #21
 800b28a:	f023 0303 	bic.w	r3, r3, #3
 800b28e:	3304      	adds	r3, #4
 800b290:	f104 0715 	add.w	r7, r4, #21
 800b294:	42ba      	cmp	r2, r7
 800b296:	bf38      	it	cc
 800b298:	2304      	movcc	r3, #4
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	9b02      	ldr	r3, [sp, #8]
 800b29e:	9103      	str	r1, [sp, #12]
 800b2a0:	428b      	cmp	r3, r1
 800b2a2:	d80c      	bhi.n	800b2be <__multiply+0x9e>
 800b2a4:	2e00      	cmp	r6, #0
 800b2a6:	dd03      	ble.n	800b2b0 <__multiply+0x90>
 800b2a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d05b      	beq.n	800b368 <__multiply+0x148>
 800b2b0:	6106      	str	r6, [r0, #16]
 800b2b2:	b005      	add	sp, #20
 800b2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b8:	f843 2b04 	str.w	r2, [r3], #4
 800b2bc:	e7d8      	b.n	800b270 <__multiply+0x50>
 800b2be:	f8b1 a000 	ldrh.w	sl, [r1]
 800b2c2:	f1ba 0f00 	cmp.w	sl, #0
 800b2c6:	d024      	beq.n	800b312 <__multiply+0xf2>
 800b2c8:	f104 0e14 	add.w	lr, r4, #20
 800b2cc:	46a9      	mov	r9, r5
 800b2ce:	f04f 0c00 	mov.w	ip, #0
 800b2d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2d6:	f8d9 3000 	ldr.w	r3, [r9]
 800b2da:	fa1f fb87 	uxth.w	fp, r7
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b2e8:	f8d9 7000 	ldr.w	r7, [r9]
 800b2ec:	4463      	add	r3, ip
 800b2ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2f2:	fb0a c70b 	mla	r7, sl, fp, ip
 800b2f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b300:	4572      	cmp	r2, lr
 800b302:	f849 3b04 	str.w	r3, [r9], #4
 800b306:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b30a:	d8e2      	bhi.n	800b2d2 <__multiply+0xb2>
 800b30c:	9b01      	ldr	r3, [sp, #4]
 800b30e:	f845 c003 	str.w	ip, [r5, r3]
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b318:	3104      	adds	r1, #4
 800b31a:	f1b9 0f00 	cmp.w	r9, #0
 800b31e:	d021      	beq.n	800b364 <__multiply+0x144>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	f104 0c14 	add.w	ip, r4, #20
 800b326:	46ae      	mov	lr, r5
 800b328:	f04f 0a00 	mov.w	sl, #0
 800b32c:	f8bc b000 	ldrh.w	fp, [ip]
 800b330:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b334:	fb09 770b 	mla	r7, r9, fp, r7
 800b338:	4457      	add	r7, sl
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b340:	f84e 3b04 	str.w	r3, [lr], #4
 800b344:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b348:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b34c:	f8be 3000 	ldrh.w	r3, [lr]
 800b350:	fb09 330a 	mla	r3, r9, sl, r3
 800b354:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b358:	4562      	cmp	r2, ip
 800b35a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b35e:	d8e5      	bhi.n	800b32c <__multiply+0x10c>
 800b360:	9f01      	ldr	r7, [sp, #4]
 800b362:	51eb      	str	r3, [r5, r7]
 800b364:	3504      	adds	r5, #4
 800b366:	e799      	b.n	800b29c <__multiply+0x7c>
 800b368:	3e01      	subs	r6, #1
 800b36a:	e79b      	b.n	800b2a4 <__multiply+0x84>
 800b36c:	080100af 	.word	0x080100af
 800b370:	080100c0 	.word	0x080100c0

0800b374 <__pow5mult>:
 800b374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b378:	4615      	mov	r5, r2
 800b37a:	f012 0203 	ands.w	r2, r2, #3
 800b37e:	4607      	mov	r7, r0
 800b380:	460e      	mov	r6, r1
 800b382:	d007      	beq.n	800b394 <__pow5mult+0x20>
 800b384:	4c25      	ldr	r4, [pc, #148]	@ (800b41c <__pow5mult+0xa8>)
 800b386:	3a01      	subs	r2, #1
 800b388:	2300      	movs	r3, #0
 800b38a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b38e:	f7ff fe55 	bl	800b03c <__multadd>
 800b392:	4606      	mov	r6, r0
 800b394:	10ad      	asrs	r5, r5, #2
 800b396:	d03d      	beq.n	800b414 <__pow5mult+0xa0>
 800b398:	69fc      	ldr	r4, [r7, #28]
 800b39a:	b97c      	cbnz	r4, 800b3bc <__pow5mult+0x48>
 800b39c:	2010      	movs	r0, #16
 800b39e:	f7ff fd35 	bl	800ae0c <malloc>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	61f8      	str	r0, [r7, #28]
 800b3a6:	b928      	cbnz	r0, 800b3b4 <__pow5mult+0x40>
 800b3a8:	4b1d      	ldr	r3, [pc, #116]	@ (800b420 <__pow5mult+0xac>)
 800b3aa:	481e      	ldr	r0, [pc, #120]	@ (800b424 <__pow5mult+0xb0>)
 800b3ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3b0:	f002 f8a2 	bl	800d4f8 <__assert_func>
 800b3b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3b8:	6004      	str	r4, [r0, #0]
 800b3ba:	60c4      	str	r4, [r0, #12]
 800b3bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3c4:	b94c      	cbnz	r4, 800b3da <__pow5mult+0x66>
 800b3c6:	f240 2171 	movw	r1, #625	@ 0x271
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	f7ff ff12 	bl	800b1f4 <__i2b>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	f04f 0900 	mov.w	r9, #0
 800b3de:	07eb      	lsls	r3, r5, #31
 800b3e0:	d50a      	bpl.n	800b3f8 <__pow5mult+0x84>
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ff1a 	bl	800b220 <__multiply>
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4680      	mov	r8, r0
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff fe01 	bl	800aff8 <_Bfree>
 800b3f6:	4646      	mov	r6, r8
 800b3f8:	106d      	asrs	r5, r5, #1
 800b3fa:	d00b      	beq.n	800b414 <__pow5mult+0xa0>
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	b938      	cbnz	r0, 800b410 <__pow5mult+0x9c>
 800b400:	4622      	mov	r2, r4
 800b402:	4621      	mov	r1, r4
 800b404:	4638      	mov	r0, r7
 800b406:	f7ff ff0b 	bl	800b220 <__multiply>
 800b40a:	6020      	str	r0, [r4, #0]
 800b40c:	f8c0 9000 	str.w	r9, [r0]
 800b410:	4604      	mov	r4, r0
 800b412:	e7e4      	b.n	800b3de <__pow5mult+0x6a>
 800b414:	4630      	mov	r0, r6
 800b416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b41a:	bf00      	nop
 800b41c:	0801011c 	.word	0x0801011c
 800b420:	08010040 	.word	0x08010040
 800b424:	080100c0 	.word	0x080100c0

0800b428 <__lshift>:
 800b428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b42c:	460c      	mov	r4, r1
 800b42e:	6849      	ldr	r1, [r1, #4]
 800b430:	6923      	ldr	r3, [r4, #16]
 800b432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	4607      	mov	r7, r0
 800b43a:	4691      	mov	r9, r2
 800b43c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b440:	f108 0601 	add.w	r6, r8, #1
 800b444:	42b3      	cmp	r3, r6
 800b446:	db0b      	blt.n	800b460 <__lshift+0x38>
 800b448:	4638      	mov	r0, r7
 800b44a:	f7ff fd95 	bl	800af78 <_Balloc>
 800b44e:	4605      	mov	r5, r0
 800b450:	b948      	cbnz	r0, 800b466 <__lshift+0x3e>
 800b452:	4602      	mov	r2, r0
 800b454:	4b28      	ldr	r3, [pc, #160]	@ (800b4f8 <__lshift+0xd0>)
 800b456:	4829      	ldr	r0, [pc, #164]	@ (800b4fc <__lshift+0xd4>)
 800b458:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b45c:	f002 f84c 	bl	800d4f8 <__assert_func>
 800b460:	3101      	adds	r1, #1
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	e7ee      	b.n	800b444 <__lshift+0x1c>
 800b466:	2300      	movs	r3, #0
 800b468:	f100 0114 	add.w	r1, r0, #20
 800b46c:	f100 0210 	add.w	r2, r0, #16
 800b470:	4618      	mov	r0, r3
 800b472:	4553      	cmp	r3, sl
 800b474:	db33      	blt.n	800b4de <__lshift+0xb6>
 800b476:	6920      	ldr	r0, [r4, #16]
 800b478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b47c:	f104 0314 	add.w	r3, r4, #20
 800b480:	f019 091f 	ands.w	r9, r9, #31
 800b484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b48c:	d02b      	beq.n	800b4e6 <__lshift+0xbe>
 800b48e:	f1c9 0e20 	rsb	lr, r9, #32
 800b492:	468a      	mov	sl, r1
 800b494:	2200      	movs	r2, #0
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	fa00 f009 	lsl.w	r0, r0, r9
 800b49c:	4310      	orrs	r0, r2
 800b49e:	f84a 0b04 	str.w	r0, [sl], #4
 800b4a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a6:	459c      	cmp	ip, r3
 800b4a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4ac:	d8f3      	bhi.n	800b496 <__lshift+0x6e>
 800b4ae:	ebac 0304 	sub.w	r3, ip, r4
 800b4b2:	3b15      	subs	r3, #21
 800b4b4:	f023 0303 	bic.w	r3, r3, #3
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	f104 0015 	add.w	r0, r4, #21
 800b4be:	4584      	cmp	ip, r0
 800b4c0:	bf38      	it	cc
 800b4c2:	2304      	movcc	r3, #4
 800b4c4:	50ca      	str	r2, [r1, r3]
 800b4c6:	b10a      	cbz	r2, 800b4cc <__lshift+0xa4>
 800b4c8:	f108 0602 	add.w	r6, r8, #2
 800b4cc:	3e01      	subs	r6, #1
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	612e      	str	r6, [r5, #16]
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	f7ff fd90 	bl	800aff8 <_Bfree>
 800b4d8:	4628      	mov	r0, r5
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	e7c5      	b.n	800b472 <__lshift+0x4a>
 800b4e6:	3904      	subs	r1, #4
 800b4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4f0:	459c      	cmp	ip, r3
 800b4f2:	d8f9      	bhi.n	800b4e8 <__lshift+0xc0>
 800b4f4:	e7ea      	b.n	800b4cc <__lshift+0xa4>
 800b4f6:	bf00      	nop
 800b4f8:	080100af 	.word	0x080100af
 800b4fc:	080100c0 	.word	0x080100c0

0800b500 <__mcmp>:
 800b500:	690a      	ldr	r2, [r1, #16]
 800b502:	4603      	mov	r3, r0
 800b504:	6900      	ldr	r0, [r0, #16]
 800b506:	1a80      	subs	r0, r0, r2
 800b508:	b530      	push	{r4, r5, lr}
 800b50a:	d10e      	bne.n	800b52a <__mcmp+0x2a>
 800b50c:	3314      	adds	r3, #20
 800b50e:	3114      	adds	r1, #20
 800b510:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b514:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b51c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b520:	4295      	cmp	r5, r2
 800b522:	d003      	beq.n	800b52c <__mcmp+0x2c>
 800b524:	d205      	bcs.n	800b532 <__mcmp+0x32>
 800b526:	f04f 30ff 	mov.w	r0, #4294967295
 800b52a:	bd30      	pop	{r4, r5, pc}
 800b52c:	42a3      	cmp	r3, r4
 800b52e:	d3f3      	bcc.n	800b518 <__mcmp+0x18>
 800b530:	e7fb      	b.n	800b52a <__mcmp+0x2a>
 800b532:	2001      	movs	r0, #1
 800b534:	e7f9      	b.n	800b52a <__mcmp+0x2a>
	...

0800b538 <__mdiff>:
 800b538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	4689      	mov	r9, r1
 800b53e:	4606      	mov	r6, r0
 800b540:	4611      	mov	r1, r2
 800b542:	4648      	mov	r0, r9
 800b544:	4614      	mov	r4, r2
 800b546:	f7ff ffdb 	bl	800b500 <__mcmp>
 800b54a:	1e05      	subs	r5, r0, #0
 800b54c:	d112      	bne.n	800b574 <__mdiff+0x3c>
 800b54e:	4629      	mov	r1, r5
 800b550:	4630      	mov	r0, r6
 800b552:	f7ff fd11 	bl	800af78 <_Balloc>
 800b556:	4602      	mov	r2, r0
 800b558:	b928      	cbnz	r0, 800b566 <__mdiff+0x2e>
 800b55a:	4b3f      	ldr	r3, [pc, #252]	@ (800b658 <__mdiff+0x120>)
 800b55c:	f240 2137 	movw	r1, #567	@ 0x237
 800b560:	483e      	ldr	r0, [pc, #248]	@ (800b65c <__mdiff+0x124>)
 800b562:	f001 ffc9 	bl	800d4f8 <__assert_func>
 800b566:	2301      	movs	r3, #1
 800b568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b56c:	4610      	mov	r0, r2
 800b56e:	b003      	add	sp, #12
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	bfbc      	itt	lt
 800b576:	464b      	movlt	r3, r9
 800b578:	46a1      	movlt	r9, r4
 800b57a:	4630      	mov	r0, r6
 800b57c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b580:	bfba      	itte	lt
 800b582:	461c      	movlt	r4, r3
 800b584:	2501      	movlt	r5, #1
 800b586:	2500      	movge	r5, #0
 800b588:	f7ff fcf6 	bl	800af78 <_Balloc>
 800b58c:	4602      	mov	r2, r0
 800b58e:	b918      	cbnz	r0, 800b598 <__mdiff+0x60>
 800b590:	4b31      	ldr	r3, [pc, #196]	@ (800b658 <__mdiff+0x120>)
 800b592:	f240 2145 	movw	r1, #581	@ 0x245
 800b596:	e7e3      	b.n	800b560 <__mdiff+0x28>
 800b598:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b59c:	6926      	ldr	r6, [r4, #16]
 800b59e:	60c5      	str	r5, [r0, #12]
 800b5a0:	f109 0310 	add.w	r3, r9, #16
 800b5a4:	f109 0514 	add.w	r5, r9, #20
 800b5a8:	f104 0e14 	add.w	lr, r4, #20
 800b5ac:	f100 0b14 	add.w	fp, r0, #20
 800b5b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	46d9      	mov	r9, fp
 800b5bc:	f04f 0c00 	mov.w	ip, #0
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5ca:	9301      	str	r3, [sp, #4]
 800b5cc:	fa1f f38a 	uxth.w	r3, sl
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	b283      	uxth	r3, r0
 800b5d4:	1acb      	subs	r3, r1, r3
 800b5d6:	0c00      	lsrs	r0, r0, #16
 800b5d8:	4463      	add	r3, ip
 800b5da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5e8:	4576      	cmp	r6, lr
 800b5ea:	f849 3b04 	str.w	r3, [r9], #4
 800b5ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5f2:	d8e5      	bhi.n	800b5c0 <__mdiff+0x88>
 800b5f4:	1b33      	subs	r3, r6, r4
 800b5f6:	3b15      	subs	r3, #21
 800b5f8:	f023 0303 	bic.w	r3, r3, #3
 800b5fc:	3415      	adds	r4, #21
 800b5fe:	3304      	adds	r3, #4
 800b600:	42a6      	cmp	r6, r4
 800b602:	bf38      	it	cc
 800b604:	2304      	movcc	r3, #4
 800b606:	441d      	add	r5, r3
 800b608:	445b      	add	r3, fp
 800b60a:	461e      	mov	r6, r3
 800b60c:	462c      	mov	r4, r5
 800b60e:	4544      	cmp	r4, r8
 800b610:	d30e      	bcc.n	800b630 <__mdiff+0xf8>
 800b612:	f108 0103 	add.w	r1, r8, #3
 800b616:	1b49      	subs	r1, r1, r5
 800b618:	f021 0103 	bic.w	r1, r1, #3
 800b61c:	3d03      	subs	r5, #3
 800b61e:	45a8      	cmp	r8, r5
 800b620:	bf38      	it	cc
 800b622:	2100      	movcc	r1, #0
 800b624:	440b      	add	r3, r1
 800b626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b62a:	b191      	cbz	r1, 800b652 <__mdiff+0x11a>
 800b62c:	6117      	str	r7, [r2, #16]
 800b62e:	e79d      	b.n	800b56c <__mdiff+0x34>
 800b630:	f854 1b04 	ldr.w	r1, [r4], #4
 800b634:	46e6      	mov	lr, ip
 800b636:	0c08      	lsrs	r0, r1, #16
 800b638:	fa1c fc81 	uxtah	ip, ip, r1
 800b63c:	4471      	add	r1, lr
 800b63e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b642:	b289      	uxth	r1, r1
 800b644:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b648:	f846 1b04 	str.w	r1, [r6], #4
 800b64c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b650:	e7dd      	b.n	800b60e <__mdiff+0xd6>
 800b652:	3f01      	subs	r7, #1
 800b654:	e7e7      	b.n	800b626 <__mdiff+0xee>
 800b656:	bf00      	nop
 800b658:	080100af 	.word	0x080100af
 800b65c:	080100c0 	.word	0x080100c0

0800b660 <__ulp>:
 800b660:	4b0e      	ldr	r3, [pc, #56]	@ (800b69c <__ulp+0x3c>)
 800b662:	400b      	ands	r3, r1
 800b664:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dc08      	bgt.n	800b67e <__ulp+0x1e>
 800b66c:	425b      	negs	r3, r3
 800b66e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b672:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b676:	da04      	bge.n	800b682 <__ulp+0x22>
 800b678:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b67c:	4113      	asrs	r3, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	e008      	b.n	800b694 <__ulp+0x34>
 800b682:	f1a2 0314 	sub.w	r3, r2, #20
 800b686:	2b1e      	cmp	r3, #30
 800b688:	bfda      	itte	le
 800b68a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b68e:	40da      	lsrle	r2, r3
 800b690:	2201      	movgt	r2, #1
 800b692:	2300      	movs	r3, #0
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	7ff00000 	.word	0x7ff00000

0800b6a0 <__b2d>:
 800b6a0:	6902      	ldr	r2, [r0, #16]
 800b6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a4:	f100 0614 	add.w	r6, r0, #20
 800b6a8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b6ac:	4f20      	ldr	r7, [pc, #128]	@ (800b730 <__b2d+0x90>)
 800b6ae:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f7ff fd52 	bl	800b15c <__hi0bits>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b0a      	cmp	r3, #10
 800b6bc:	f1c0 0020 	rsb	r0, r0, #32
 800b6c0:	f1a2 0504 	sub.w	r5, r2, #4
 800b6c4:	6008      	str	r0, [r1, #0]
 800b6c6:	dc13      	bgt.n	800b6f0 <__b2d+0x50>
 800b6c8:	42ae      	cmp	r6, r5
 800b6ca:	bf38      	it	cc
 800b6cc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b6d0:	f1c3 0c0b 	rsb	ip, r3, #11
 800b6d4:	bf28      	it	cs
 800b6d6:	2200      	movcs	r2, #0
 800b6d8:	3315      	adds	r3, #21
 800b6da:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b6de:	fa04 f303 	lsl.w	r3, r4, r3
 800b6e2:	fa22 f20c 	lsr.w	r2, r2, ip
 800b6e6:	ea4e 0107 	orr.w	r1, lr, r7
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f0:	42ae      	cmp	r6, r5
 800b6f2:	bf36      	itet	cc
 800b6f4:	f1a2 0508 	subcc.w	r5, r2, #8
 800b6f8:	2200      	movcs	r2, #0
 800b6fa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b6fe:	3b0b      	subs	r3, #11
 800b700:	d012      	beq.n	800b728 <__b2d+0x88>
 800b702:	f1c3 0720 	rsb	r7, r3, #32
 800b706:	fa22 f107 	lsr.w	r1, r2, r7
 800b70a:	409c      	lsls	r4, r3
 800b70c:	430c      	orrs	r4, r1
 800b70e:	42b5      	cmp	r5, r6
 800b710:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b714:	bf8c      	ite	hi
 800b716:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b71a:	2400      	movls	r4, #0
 800b71c:	409a      	lsls	r2, r3
 800b71e:	40fc      	lsrs	r4, r7
 800b720:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b724:	4322      	orrs	r2, r4
 800b726:	e7e1      	b.n	800b6ec <__b2d+0x4c>
 800b728:	ea44 0107 	orr.w	r1, r4, r7
 800b72c:	e7de      	b.n	800b6ec <__b2d+0x4c>
 800b72e:	bf00      	nop
 800b730:	3ff00000 	.word	0x3ff00000

0800b734 <__d2b>:
 800b734:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b738:	2101      	movs	r1, #1
 800b73a:	9e08      	ldr	r6, [sp, #32]
 800b73c:	4690      	mov	r8, r2
 800b73e:	4699      	mov	r9, r3
 800b740:	f7ff fc1a 	bl	800af78 <_Balloc>
 800b744:	4604      	mov	r4, r0
 800b746:	b930      	cbnz	r0, 800b756 <__d2b+0x22>
 800b748:	4602      	mov	r2, r0
 800b74a:	4b24      	ldr	r3, [pc, #144]	@ (800b7dc <__d2b+0xa8>)
 800b74c:	4824      	ldr	r0, [pc, #144]	@ (800b7e0 <__d2b+0xac>)
 800b74e:	f240 310f 	movw	r1, #783	@ 0x30f
 800b752:	f001 fed1 	bl	800d4f8 <__assert_func>
 800b756:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b75a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b75e:	b10d      	cbz	r5, 800b764 <__d2b+0x30>
 800b760:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	f1b8 0300 	subs.w	r3, r8, #0
 800b76a:	d024      	beq.n	800b7b6 <__d2b+0x82>
 800b76c:	4668      	mov	r0, sp
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	f7ff fd13 	bl	800b19a <__lo0bits>
 800b774:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b778:	b1d8      	cbz	r0, 800b7b2 <__d2b+0x7e>
 800b77a:	f1c0 0320 	rsb	r3, r0, #32
 800b77e:	fa02 f303 	lsl.w	r3, r2, r3
 800b782:	430b      	orrs	r3, r1
 800b784:	40c2      	lsrs	r2, r0
 800b786:	6163      	str	r3, [r4, #20]
 800b788:	9201      	str	r2, [sp, #4]
 800b78a:	9b01      	ldr	r3, [sp, #4]
 800b78c:	61a3      	str	r3, [r4, #24]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	bf0c      	ite	eq
 800b792:	2201      	moveq	r2, #1
 800b794:	2202      	movne	r2, #2
 800b796:	6122      	str	r2, [r4, #16]
 800b798:	b1ad      	cbz	r5, 800b7c6 <__d2b+0x92>
 800b79a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b79e:	4405      	add	r5, r0
 800b7a0:	6035      	str	r5, [r6, #0]
 800b7a2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a8:	6018      	str	r0, [r3, #0]
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	b002      	add	sp, #8
 800b7ae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b7b2:	6161      	str	r1, [r4, #20]
 800b7b4:	e7e9      	b.n	800b78a <__d2b+0x56>
 800b7b6:	a801      	add	r0, sp, #4
 800b7b8:	f7ff fcef 	bl	800b19a <__lo0bits>
 800b7bc:	9b01      	ldr	r3, [sp, #4]
 800b7be:	6163      	str	r3, [r4, #20]
 800b7c0:	3020      	adds	r0, #32
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	e7e7      	b.n	800b796 <__d2b+0x62>
 800b7c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b7ce:	6030      	str	r0, [r6, #0]
 800b7d0:	6918      	ldr	r0, [r3, #16]
 800b7d2:	f7ff fcc3 	bl	800b15c <__hi0bits>
 800b7d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7da:	e7e4      	b.n	800b7a6 <__d2b+0x72>
 800b7dc:	080100af 	.word	0x080100af
 800b7e0:	080100c0 	.word	0x080100c0

0800b7e4 <__ratio>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	b085      	sub	sp, #20
 800b7ea:	e9cd 1000 	strd	r1, r0, [sp]
 800b7ee:	a902      	add	r1, sp, #8
 800b7f0:	f7ff ff56 	bl	800b6a0 <__b2d>
 800b7f4:	468b      	mov	fp, r1
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	460f      	mov	r7, r1
 800b7fa:	9800      	ldr	r0, [sp, #0]
 800b7fc:	a903      	add	r1, sp, #12
 800b7fe:	f7ff ff4f 	bl	800b6a0 <__b2d>
 800b802:	9b01      	ldr	r3, [sp, #4]
 800b804:	4689      	mov	r9, r1
 800b806:	460d      	mov	r5, r1
 800b808:	6919      	ldr	r1, [r3, #16]
 800b80a:	9b00      	ldr	r3, [sp, #0]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	1ac9      	subs	r1, r1, r3
 800b810:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bfcd      	iteet	gt
 800b81e:	463a      	movgt	r2, r7
 800b820:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b824:	462a      	movle	r2, r5
 800b826:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b82a:	bfd8      	it	le
 800b82c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b830:	4604      	mov	r4, r0
 800b832:	4622      	mov	r2, r4
 800b834:	464b      	mov	r3, r9
 800b836:	4630      	mov	r0, r6
 800b838:	4659      	mov	r1, fp
 800b83a:	f7f5 f817 	bl	800086c <__aeabi_ddiv>
 800b83e:	b005      	add	sp, #20
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b844 <__copybits>:
 800b844:	3901      	subs	r1, #1
 800b846:	b570      	push	{r4, r5, r6, lr}
 800b848:	1149      	asrs	r1, r1, #5
 800b84a:	6914      	ldr	r4, [r2, #16]
 800b84c:	3101      	adds	r1, #1
 800b84e:	f102 0314 	add.w	r3, r2, #20
 800b852:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b856:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b85a:	1f05      	subs	r5, r0, #4
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	d30c      	bcc.n	800b87a <__copybits+0x36>
 800b860:	1aa3      	subs	r3, r4, r2
 800b862:	3b11      	subs	r3, #17
 800b864:	f023 0303 	bic.w	r3, r3, #3
 800b868:	3211      	adds	r2, #17
 800b86a:	42a2      	cmp	r2, r4
 800b86c:	bf88      	it	hi
 800b86e:	2300      	movhi	r3, #0
 800b870:	4418      	add	r0, r3
 800b872:	2300      	movs	r3, #0
 800b874:	4288      	cmp	r0, r1
 800b876:	d305      	bcc.n	800b884 <__copybits+0x40>
 800b878:	bd70      	pop	{r4, r5, r6, pc}
 800b87a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b87e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b882:	e7eb      	b.n	800b85c <__copybits+0x18>
 800b884:	f840 3b04 	str.w	r3, [r0], #4
 800b888:	e7f4      	b.n	800b874 <__copybits+0x30>

0800b88a <__any_on>:
 800b88a:	f100 0214 	add.w	r2, r0, #20
 800b88e:	6900      	ldr	r0, [r0, #16]
 800b890:	114b      	asrs	r3, r1, #5
 800b892:	4298      	cmp	r0, r3
 800b894:	b510      	push	{r4, lr}
 800b896:	db11      	blt.n	800b8bc <__any_on+0x32>
 800b898:	dd0a      	ble.n	800b8b0 <__any_on+0x26>
 800b89a:	f011 011f 	ands.w	r1, r1, #31
 800b89e:	d007      	beq.n	800b8b0 <__any_on+0x26>
 800b8a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8a4:	fa24 f001 	lsr.w	r0, r4, r1
 800b8a8:	fa00 f101 	lsl.w	r1, r0, r1
 800b8ac:	428c      	cmp	r4, r1
 800b8ae:	d10b      	bne.n	800b8c8 <__any_on+0x3e>
 800b8b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d803      	bhi.n	800b8c0 <__any_on+0x36>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	bd10      	pop	{r4, pc}
 800b8bc:	4603      	mov	r3, r0
 800b8be:	e7f7      	b.n	800b8b0 <__any_on+0x26>
 800b8c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	d0f5      	beq.n	800b8b4 <__any_on+0x2a>
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	e7f6      	b.n	800b8ba <__any_on+0x30>

0800b8cc <sulp>:
 800b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	460f      	mov	r7, r1
 800b8d2:	4690      	mov	r8, r2
 800b8d4:	f7ff fec4 	bl	800b660 <__ulp>
 800b8d8:	4604      	mov	r4, r0
 800b8da:	460d      	mov	r5, r1
 800b8dc:	f1b8 0f00 	cmp.w	r8, #0
 800b8e0:	d011      	beq.n	800b906 <sulp+0x3a>
 800b8e2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b8e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	dd0b      	ble.n	800b906 <sulp+0x3a>
 800b8ee:	051b      	lsls	r3, r3, #20
 800b8f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b8f4:	2400      	movs	r4, #0
 800b8f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	462b      	mov	r3, r5
 800b8fe:	f7f4 fe8b 	bl	8000618 <__aeabi_dmul>
 800b902:	4604      	mov	r4, r0
 800b904:	460d      	mov	r5, r1
 800b906:	4620      	mov	r0, r4
 800b908:	4629      	mov	r1, r5
 800b90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b910 <_strtod_l>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	b09f      	sub	sp, #124	@ 0x7c
 800b916:	460c      	mov	r4, r1
 800b918:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b91a:	2200      	movs	r2, #0
 800b91c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b91e:	9005      	str	r0, [sp, #20]
 800b920:	f04f 0a00 	mov.w	sl, #0
 800b924:	f04f 0b00 	mov.w	fp, #0
 800b928:	460a      	mov	r2, r1
 800b92a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b92c:	7811      	ldrb	r1, [r2, #0]
 800b92e:	292b      	cmp	r1, #43	@ 0x2b
 800b930:	d048      	beq.n	800b9c4 <_strtod_l+0xb4>
 800b932:	d836      	bhi.n	800b9a2 <_strtod_l+0x92>
 800b934:	290d      	cmp	r1, #13
 800b936:	d830      	bhi.n	800b99a <_strtod_l+0x8a>
 800b938:	2908      	cmp	r1, #8
 800b93a:	d830      	bhi.n	800b99e <_strtod_l+0x8e>
 800b93c:	2900      	cmp	r1, #0
 800b93e:	d039      	beq.n	800b9b4 <_strtod_l+0xa4>
 800b940:	2200      	movs	r2, #0
 800b942:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b944:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b946:	782a      	ldrb	r2, [r5, #0]
 800b948:	2a30      	cmp	r2, #48	@ 0x30
 800b94a:	f040 80b1 	bne.w	800bab0 <_strtod_l+0x1a0>
 800b94e:	786a      	ldrb	r2, [r5, #1]
 800b950:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b954:	2a58      	cmp	r2, #88	@ 0x58
 800b956:	d16c      	bne.n	800ba32 <_strtod_l+0x122>
 800b958:	9302      	str	r3, [sp, #8]
 800b95a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	4a8d      	ldr	r2, [pc, #564]	@ (800bb98 <_strtod_l+0x288>)
 800b964:	9805      	ldr	r0, [sp, #20]
 800b966:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b968:	a919      	add	r1, sp, #100	@ 0x64
 800b96a:	f001 fe5f 	bl	800d62c <__gethex>
 800b96e:	f010 060f 	ands.w	r6, r0, #15
 800b972:	4604      	mov	r4, r0
 800b974:	d005      	beq.n	800b982 <_strtod_l+0x72>
 800b976:	2e06      	cmp	r6, #6
 800b978:	d126      	bne.n	800b9c8 <_strtod_l+0xb8>
 800b97a:	3501      	adds	r5, #1
 800b97c:	2300      	movs	r3, #0
 800b97e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b980:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 8584 	bne.w	800c492 <_strtod_l+0xb82>
 800b98a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b98c:	b1bb      	cbz	r3, 800b9be <_strtod_l+0xae>
 800b98e:	4650      	mov	r0, sl
 800b990:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b994:	b01f      	add	sp, #124	@ 0x7c
 800b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99a:	2920      	cmp	r1, #32
 800b99c:	d1d0      	bne.n	800b940 <_strtod_l+0x30>
 800b99e:	3201      	adds	r2, #1
 800b9a0:	e7c3      	b.n	800b92a <_strtod_l+0x1a>
 800b9a2:	292d      	cmp	r1, #45	@ 0x2d
 800b9a4:	d1cc      	bne.n	800b940 <_strtod_l+0x30>
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9aa:	1c51      	adds	r1, r2, #1
 800b9ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9ae:	7852      	ldrb	r2, [r2, #1]
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	d1c7      	bne.n	800b944 <_strtod_l+0x34>
 800b9b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9b6:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f040 8568 	bne.w	800c48e <_strtod_l+0xb7e>
 800b9be:	4650      	mov	r0, sl
 800b9c0:	4659      	mov	r1, fp
 800b9c2:	e7e7      	b.n	800b994 <_strtod_l+0x84>
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	e7ef      	b.n	800b9a8 <_strtod_l+0x98>
 800b9c8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9ca:	b13a      	cbz	r2, 800b9dc <_strtod_l+0xcc>
 800b9cc:	2135      	movs	r1, #53	@ 0x35
 800b9ce:	a81c      	add	r0, sp, #112	@ 0x70
 800b9d0:	f7ff ff38 	bl	800b844 <__copybits>
 800b9d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9d6:	9805      	ldr	r0, [sp, #20]
 800b9d8:	f7ff fb0e 	bl	800aff8 <_Bfree>
 800b9dc:	3e01      	subs	r6, #1
 800b9de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b9e0:	2e04      	cmp	r6, #4
 800b9e2:	d806      	bhi.n	800b9f2 <_strtod_l+0xe2>
 800b9e4:	e8df f006 	tbb	[pc, r6]
 800b9e8:	201d0314 	.word	0x201d0314
 800b9ec:	14          	.byte	0x14
 800b9ed:	00          	.byte	0x00
 800b9ee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b9f2:	05e1      	lsls	r1, r4, #23
 800b9f4:	bf48      	it	mi
 800b9f6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b9fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9fe:	0d1b      	lsrs	r3, r3, #20
 800ba00:	051b      	lsls	r3, r3, #20
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1bd      	bne.n	800b982 <_strtod_l+0x72>
 800ba06:	f7fe fb29 	bl	800a05c <__errno>
 800ba0a:	2322      	movs	r3, #34	@ 0x22
 800ba0c:	6003      	str	r3, [r0, #0]
 800ba0e:	e7b8      	b.n	800b982 <_strtod_l+0x72>
 800ba10:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ba14:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ba18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba1c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba20:	e7e7      	b.n	800b9f2 <_strtod_l+0xe2>
 800ba22:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bba0 <_strtod_l+0x290>
 800ba26:	e7e4      	b.n	800b9f2 <_strtod_l+0xe2>
 800ba28:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ba2c:	f04f 3aff 	mov.w	sl, #4294967295
 800ba30:	e7df      	b.n	800b9f2 <_strtod_l+0xe2>
 800ba32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba38:	785b      	ldrb	r3, [r3, #1]
 800ba3a:	2b30      	cmp	r3, #48	@ 0x30
 800ba3c:	d0f9      	beq.n	800ba32 <_strtod_l+0x122>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d09f      	beq.n	800b982 <_strtod_l+0x72>
 800ba42:	2301      	movs	r3, #1
 800ba44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba48:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	9308      	str	r3, [sp, #32]
 800ba4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba50:	461f      	mov	r7, r3
 800ba52:	220a      	movs	r2, #10
 800ba54:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ba56:	7805      	ldrb	r5, [r0, #0]
 800ba58:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ba5c:	b2d9      	uxtb	r1, r3
 800ba5e:	2909      	cmp	r1, #9
 800ba60:	d928      	bls.n	800bab4 <_strtod_l+0x1a4>
 800ba62:	494e      	ldr	r1, [pc, #312]	@ (800bb9c <_strtod_l+0x28c>)
 800ba64:	2201      	movs	r2, #1
 800ba66:	f001 fcfc 	bl	800d462 <strncmp>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d032      	beq.n	800bad4 <_strtod_l+0x1c4>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	462a      	mov	r2, r5
 800ba72:	4681      	mov	r9, r0
 800ba74:	463d      	mov	r5, r7
 800ba76:	4603      	mov	r3, r0
 800ba78:	2a65      	cmp	r2, #101	@ 0x65
 800ba7a:	d001      	beq.n	800ba80 <_strtod_l+0x170>
 800ba7c:	2a45      	cmp	r2, #69	@ 0x45
 800ba7e:	d114      	bne.n	800baaa <_strtod_l+0x19a>
 800ba80:	b91d      	cbnz	r5, 800ba8a <_strtod_l+0x17a>
 800ba82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba84:	4302      	orrs	r2, r0
 800ba86:	d095      	beq.n	800b9b4 <_strtod_l+0xa4>
 800ba88:	2500      	movs	r5, #0
 800ba8a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ba8c:	1c62      	adds	r2, r4, #1
 800ba8e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba90:	7862      	ldrb	r2, [r4, #1]
 800ba92:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba94:	d077      	beq.n	800bb86 <_strtod_l+0x276>
 800ba96:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba98:	d07b      	beq.n	800bb92 <_strtod_l+0x282>
 800ba9a:	f04f 0c00 	mov.w	ip, #0
 800ba9e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800baa2:	2909      	cmp	r1, #9
 800baa4:	f240 8082 	bls.w	800bbac <_strtod_l+0x29c>
 800baa8:	9419      	str	r4, [sp, #100]	@ 0x64
 800baaa:	f04f 0800 	mov.w	r8, #0
 800baae:	e0a2      	b.n	800bbf6 <_strtod_l+0x2e6>
 800bab0:	2300      	movs	r3, #0
 800bab2:	e7c7      	b.n	800ba44 <_strtod_l+0x134>
 800bab4:	2f08      	cmp	r7, #8
 800bab6:	bfd5      	itete	le
 800bab8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800baba:	9908      	ldrgt	r1, [sp, #32]
 800babc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bac0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bac4:	f100 0001 	add.w	r0, r0, #1
 800bac8:	bfd4      	ite	le
 800baca:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bacc:	9308      	strgt	r3, [sp, #32]
 800bace:	3701      	adds	r7, #1
 800bad0:	9019      	str	r0, [sp, #100]	@ 0x64
 800bad2:	e7bf      	b.n	800ba54 <_strtod_l+0x144>
 800bad4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	9219      	str	r2, [sp, #100]	@ 0x64
 800bada:	785a      	ldrb	r2, [r3, #1]
 800badc:	b37f      	cbz	r7, 800bb3e <_strtod_l+0x22e>
 800bade:	4681      	mov	r9, r0
 800bae0:	463d      	mov	r5, r7
 800bae2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bae6:	2b09      	cmp	r3, #9
 800bae8:	d912      	bls.n	800bb10 <_strtod_l+0x200>
 800baea:	2301      	movs	r3, #1
 800baec:	e7c4      	b.n	800ba78 <_strtod_l+0x168>
 800baee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800baf4:	785a      	ldrb	r2, [r3, #1]
 800baf6:	3001      	adds	r0, #1
 800baf8:	2a30      	cmp	r2, #48	@ 0x30
 800bafa:	d0f8      	beq.n	800baee <_strtod_l+0x1de>
 800bafc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bb00:	2b08      	cmp	r3, #8
 800bb02:	f200 84cb 	bhi.w	800c49c <_strtod_l+0xb8c>
 800bb06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb08:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb0a:	4681      	mov	r9, r0
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	4605      	mov	r5, r0
 800bb10:	3a30      	subs	r2, #48	@ 0x30
 800bb12:	f100 0301 	add.w	r3, r0, #1
 800bb16:	d02a      	beq.n	800bb6e <_strtod_l+0x25e>
 800bb18:	4499      	add	r9, r3
 800bb1a:	eb00 0c05 	add.w	ip, r0, r5
 800bb1e:	462b      	mov	r3, r5
 800bb20:	210a      	movs	r1, #10
 800bb22:	4563      	cmp	r3, ip
 800bb24:	d10d      	bne.n	800bb42 <_strtod_l+0x232>
 800bb26:	1c69      	adds	r1, r5, #1
 800bb28:	4401      	add	r1, r0
 800bb2a:	4428      	add	r0, r5
 800bb2c:	2808      	cmp	r0, #8
 800bb2e:	dc16      	bgt.n	800bb5e <_strtod_l+0x24e>
 800bb30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb32:	230a      	movs	r3, #10
 800bb34:	fb03 2300 	mla	r3, r3, r0, r2
 800bb38:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e018      	b.n	800bb70 <_strtod_l+0x260>
 800bb3e:	4638      	mov	r0, r7
 800bb40:	e7da      	b.n	800baf8 <_strtod_l+0x1e8>
 800bb42:	2b08      	cmp	r3, #8
 800bb44:	f103 0301 	add.w	r3, r3, #1
 800bb48:	dc03      	bgt.n	800bb52 <_strtod_l+0x242>
 800bb4a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bb4c:	434e      	muls	r6, r1
 800bb4e:	960a      	str	r6, [sp, #40]	@ 0x28
 800bb50:	e7e7      	b.n	800bb22 <_strtod_l+0x212>
 800bb52:	2b10      	cmp	r3, #16
 800bb54:	bfde      	ittt	le
 800bb56:	9e08      	ldrle	r6, [sp, #32]
 800bb58:	434e      	mulle	r6, r1
 800bb5a:	9608      	strle	r6, [sp, #32]
 800bb5c:	e7e1      	b.n	800bb22 <_strtod_l+0x212>
 800bb5e:	280f      	cmp	r0, #15
 800bb60:	dceb      	bgt.n	800bb3a <_strtod_l+0x22a>
 800bb62:	9808      	ldr	r0, [sp, #32]
 800bb64:	230a      	movs	r3, #10
 800bb66:	fb03 2300 	mla	r3, r3, r0, r2
 800bb6a:	9308      	str	r3, [sp, #32]
 800bb6c:	e7e5      	b.n	800bb3a <_strtod_l+0x22a>
 800bb6e:	4629      	mov	r1, r5
 800bb70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb72:	1c50      	adds	r0, r2, #1
 800bb74:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb76:	7852      	ldrb	r2, [r2, #1]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	e7b1      	b.n	800bae2 <_strtod_l+0x1d2>
 800bb7e:	f04f 0900 	mov.w	r9, #0
 800bb82:	2301      	movs	r3, #1
 800bb84:	e77d      	b.n	800ba82 <_strtod_l+0x172>
 800bb86:	f04f 0c00 	mov.w	ip, #0
 800bb8a:	1ca2      	adds	r2, r4, #2
 800bb8c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb8e:	78a2      	ldrb	r2, [r4, #2]
 800bb90:	e785      	b.n	800ba9e <_strtod_l+0x18e>
 800bb92:	f04f 0c01 	mov.w	ip, #1
 800bb96:	e7f8      	b.n	800bb8a <_strtod_l+0x27a>
 800bb98:	08010230 	.word	0x08010230
 800bb9c:	08010218 	.word	0x08010218
 800bba0:	7ff00000 	.word	0x7ff00000
 800bba4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bba6:	1c51      	adds	r1, r2, #1
 800bba8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bbaa:	7852      	ldrb	r2, [r2, #1]
 800bbac:	2a30      	cmp	r2, #48	@ 0x30
 800bbae:	d0f9      	beq.n	800bba4 <_strtod_l+0x294>
 800bbb0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bbb4:	2908      	cmp	r1, #8
 800bbb6:	f63f af78 	bhi.w	800baaa <_strtod_l+0x19a>
 800bbba:	3a30      	subs	r2, #48	@ 0x30
 800bbbc:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbc0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bbc2:	f04f 080a 	mov.w	r8, #10
 800bbc6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbc8:	1c56      	adds	r6, r2, #1
 800bbca:	9619      	str	r6, [sp, #100]	@ 0x64
 800bbcc:	7852      	ldrb	r2, [r2, #1]
 800bbce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bbd2:	f1be 0f09 	cmp.w	lr, #9
 800bbd6:	d939      	bls.n	800bc4c <_strtod_l+0x33c>
 800bbd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bbda:	1a76      	subs	r6, r6, r1
 800bbdc:	2e08      	cmp	r6, #8
 800bbde:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bbe2:	dc03      	bgt.n	800bbec <_strtod_l+0x2dc>
 800bbe4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bbe6:	4588      	cmp	r8, r1
 800bbe8:	bfa8      	it	ge
 800bbea:	4688      	movge	r8, r1
 800bbec:	f1bc 0f00 	cmp.w	ip, #0
 800bbf0:	d001      	beq.n	800bbf6 <_strtod_l+0x2e6>
 800bbf2:	f1c8 0800 	rsb	r8, r8, #0
 800bbf6:	2d00      	cmp	r5, #0
 800bbf8:	d14e      	bne.n	800bc98 <_strtod_l+0x388>
 800bbfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbfc:	4308      	orrs	r0, r1
 800bbfe:	f47f aec0 	bne.w	800b982 <_strtod_l+0x72>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f47f aed6 	bne.w	800b9b4 <_strtod_l+0xa4>
 800bc08:	2a69      	cmp	r2, #105	@ 0x69
 800bc0a:	d028      	beq.n	800bc5e <_strtod_l+0x34e>
 800bc0c:	dc25      	bgt.n	800bc5a <_strtod_l+0x34a>
 800bc0e:	2a49      	cmp	r2, #73	@ 0x49
 800bc10:	d025      	beq.n	800bc5e <_strtod_l+0x34e>
 800bc12:	2a4e      	cmp	r2, #78	@ 0x4e
 800bc14:	f47f aece 	bne.w	800b9b4 <_strtod_l+0xa4>
 800bc18:	499a      	ldr	r1, [pc, #616]	@ (800be84 <_strtod_l+0x574>)
 800bc1a:	a819      	add	r0, sp, #100	@ 0x64
 800bc1c:	f001 ff28 	bl	800da70 <__match>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	f43f aec7 	beq.w	800b9b4 <_strtod_l+0xa4>
 800bc26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2b28      	cmp	r3, #40	@ 0x28
 800bc2c:	d12e      	bne.n	800bc8c <_strtod_l+0x37c>
 800bc2e:	4996      	ldr	r1, [pc, #600]	@ (800be88 <_strtod_l+0x578>)
 800bc30:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc32:	a819      	add	r0, sp, #100	@ 0x64
 800bc34:	f001 ff30 	bl	800da98 <__hexnan>
 800bc38:	2805      	cmp	r0, #5
 800bc3a:	d127      	bne.n	800bc8c <_strtod_l+0x37c>
 800bc3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc3e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bc42:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bc46:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bc4a:	e69a      	b.n	800b982 <_strtod_l+0x72>
 800bc4c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc4e:	fb08 2101 	mla	r1, r8, r1, r2
 800bc52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bc56:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc58:	e7b5      	b.n	800bbc6 <_strtod_l+0x2b6>
 800bc5a:	2a6e      	cmp	r2, #110	@ 0x6e
 800bc5c:	e7da      	b.n	800bc14 <_strtod_l+0x304>
 800bc5e:	498b      	ldr	r1, [pc, #556]	@ (800be8c <_strtod_l+0x57c>)
 800bc60:	a819      	add	r0, sp, #100	@ 0x64
 800bc62:	f001 ff05 	bl	800da70 <__match>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f43f aea4 	beq.w	800b9b4 <_strtod_l+0xa4>
 800bc6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc6e:	4988      	ldr	r1, [pc, #544]	@ (800be90 <_strtod_l+0x580>)
 800bc70:	3b01      	subs	r3, #1
 800bc72:	a819      	add	r0, sp, #100	@ 0x64
 800bc74:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc76:	f001 fefb 	bl	800da70 <__match>
 800bc7a:	b910      	cbnz	r0, 800bc82 <_strtod_l+0x372>
 800bc7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc7e:	3301      	adds	r3, #1
 800bc80:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc82:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bea0 <_strtod_l+0x590>
 800bc86:	f04f 0a00 	mov.w	sl, #0
 800bc8a:	e67a      	b.n	800b982 <_strtod_l+0x72>
 800bc8c:	4881      	ldr	r0, [pc, #516]	@ (800be94 <_strtod_l+0x584>)
 800bc8e:	f001 fc2d 	bl	800d4ec <nan>
 800bc92:	4682      	mov	sl, r0
 800bc94:	468b      	mov	fp, r1
 800bc96:	e674      	b.n	800b982 <_strtod_l+0x72>
 800bc98:	eba8 0309 	sub.w	r3, r8, r9
 800bc9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca0:	2f00      	cmp	r7, #0
 800bca2:	bf08      	it	eq
 800bca4:	462f      	moveq	r7, r5
 800bca6:	2d10      	cmp	r5, #16
 800bca8:	462c      	mov	r4, r5
 800bcaa:	bfa8      	it	ge
 800bcac:	2410      	movge	r4, #16
 800bcae:	f7f4 fc39 	bl	8000524 <__aeabi_ui2d>
 800bcb2:	2d09      	cmp	r5, #9
 800bcb4:	4682      	mov	sl, r0
 800bcb6:	468b      	mov	fp, r1
 800bcb8:	dc11      	bgt.n	800bcde <_strtod_l+0x3ce>
 800bcba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f43f ae60 	beq.w	800b982 <_strtod_l+0x72>
 800bcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc4:	dd76      	ble.n	800bdb4 <_strtod_l+0x4a4>
 800bcc6:	2b16      	cmp	r3, #22
 800bcc8:	dc5d      	bgt.n	800bd86 <_strtod_l+0x476>
 800bcca:	4973      	ldr	r1, [pc, #460]	@ (800be98 <_strtod_l+0x588>)
 800bccc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd4:	4652      	mov	r2, sl
 800bcd6:	465b      	mov	r3, fp
 800bcd8:	f7f4 fc9e 	bl	8000618 <__aeabi_dmul>
 800bcdc:	e7d9      	b.n	800bc92 <_strtod_l+0x382>
 800bcde:	4b6e      	ldr	r3, [pc, #440]	@ (800be98 <_strtod_l+0x588>)
 800bce0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bce4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bce8:	f7f4 fc96 	bl	8000618 <__aeabi_dmul>
 800bcec:	4682      	mov	sl, r0
 800bcee:	9808      	ldr	r0, [sp, #32]
 800bcf0:	468b      	mov	fp, r1
 800bcf2:	f7f4 fc17 	bl	8000524 <__aeabi_ui2d>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4650      	mov	r0, sl
 800bcfc:	4659      	mov	r1, fp
 800bcfe:	f7f4 fad5 	bl	80002ac <__adddf3>
 800bd02:	2d0f      	cmp	r5, #15
 800bd04:	4682      	mov	sl, r0
 800bd06:	468b      	mov	fp, r1
 800bd08:	ddd7      	ble.n	800bcba <_strtod_l+0x3aa>
 800bd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0c:	1b2c      	subs	r4, r5, r4
 800bd0e:	441c      	add	r4, r3
 800bd10:	2c00      	cmp	r4, #0
 800bd12:	f340 8096 	ble.w	800be42 <_strtod_l+0x532>
 800bd16:	f014 030f 	ands.w	r3, r4, #15
 800bd1a:	d00a      	beq.n	800bd32 <_strtod_l+0x422>
 800bd1c:	495e      	ldr	r1, [pc, #376]	@ (800be98 <_strtod_l+0x588>)
 800bd1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd22:	4652      	mov	r2, sl
 800bd24:	465b      	mov	r3, fp
 800bd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd2a:	f7f4 fc75 	bl	8000618 <__aeabi_dmul>
 800bd2e:	4682      	mov	sl, r0
 800bd30:	468b      	mov	fp, r1
 800bd32:	f034 040f 	bics.w	r4, r4, #15
 800bd36:	d073      	beq.n	800be20 <_strtod_l+0x510>
 800bd38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bd3c:	dd48      	ble.n	800bdd0 <_strtod_l+0x4c0>
 800bd3e:	2400      	movs	r4, #0
 800bd40:	46a0      	mov	r8, r4
 800bd42:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd44:	46a1      	mov	r9, r4
 800bd46:	9a05      	ldr	r2, [sp, #20]
 800bd48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bea0 <_strtod_l+0x590>
 800bd4c:	2322      	movs	r3, #34	@ 0x22
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	f04f 0a00 	mov.w	sl, #0
 800bd54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f43f ae13 	beq.w	800b982 <_strtod_l+0x72>
 800bd5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd5e:	9805      	ldr	r0, [sp, #20]
 800bd60:	f7ff f94a 	bl	800aff8 <_Bfree>
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	4649      	mov	r1, r9
 800bd68:	f7ff f946 	bl	800aff8 <_Bfree>
 800bd6c:	9805      	ldr	r0, [sp, #20]
 800bd6e:	4641      	mov	r1, r8
 800bd70:	f7ff f942 	bl	800aff8 <_Bfree>
 800bd74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd76:	9805      	ldr	r0, [sp, #20]
 800bd78:	f7ff f93e 	bl	800aff8 <_Bfree>
 800bd7c:	9805      	ldr	r0, [sp, #20]
 800bd7e:	4621      	mov	r1, r4
 800bd80:	f7ff f93a 	bl	800aff8 <_Bfree>
 800bd84:	e5fd      	b.n	800b982 <_strtod_l+0x72>
 800bd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	dbbc      	blt.n	800bd0a <_strtod_l+0x3fa>
 800bd90:	4c41      	ldr	r4, [pc, #260]	@ (800be98 <_strtod_l+0x588>)
 800bd92:	f1c5 050f 	rsb	r5, r5, #15
 800bd96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	465b      	mov	r3, fp
 800bd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda2:	f7f4 fc39 	bl	8000618 <__aeabi_dmul>
 800bda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda8:	1b5d      	subs	r5, r3, r5
 800bdaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bdae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bdb2:	e791      	b.n	800bcd8 <_strtod_l+0x3c8>
 800bdb4:	3316      	adds	r3, #22
 800bdb6:	dba8      	blt.n	800bd0a <_strtod_l+0x3fa>
 800bdb8:	4b37      	ldr	r3, [pc, #220]	@ (800be98 <_strtod_l+0x588>)
 800bdba:	eba9 0808 	sub.w	r8, r9, r8
 800bdbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bdc2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	4659      	mov	r1, fp
 800bdca:	f7f4 fd4f 	bl	800086c <__aeabi_ddiv>
 800bdce:	e760      	b.n	800bc92 <_strtod_l+0x382>
 800bdd0:	4b32      	ldr	r3, [pc, #200]	@ (800be9c <_strtod_l+0x58c>)
 800bdd2:	9308      	str	r3, [sp, #32]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	1124      	asrs	r4, r4, #4
 800bdd8:	4650      	mov	r0, sl
 800bdda:	4659      	mov	r1, fp
 800bddc:	461e      	mov	r6, r3
 800bdde:	2c01      	cmp	r4, #1
 800bde0:	dc21      	bgt.n	800be26 <_strtod_l+0x516>
 800bde2:	b10b      	cbz	r3, 800bde8 <_strtod_l+0x4d8>
 800bde4:	4682      	mov	sl, r0
 800bde6:	468b      	mov	fp, r1
 800bde8:	492c      	ldr	r1, [pc, #176]	@ (800be9c <_strtod_l+0x58c>)
 800bdea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bdee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bdf2:	4652      	mov	r2, sl
 800bdf4:	465b      	mov	r3, fp
 800bdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdfa:	f7f4 fc0d 	bl	8000618 <__aeabi_dmul>
 800bdfe:	4b28      	ldr	r3, [pc, #160]	@ (800bea0 <_strtod_l+0x590>)
 800be00:	460a      	mov	r2, r1
 800be02:	400b      	ands	r3, r1
 800be04:	4927      	ldr	r1, [pc, #156]	@ (800bea4 <_strtod_l+0x594>)
 800be06:	428b      	cmp	r3, r1
 800be08:	4682      	mov	sl, r0
 800be0a:	d898      	bhi.n	800bd3e <_strtod_l+0x42e>
 800be0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800be10:	428b      	cmp	r3, r1
 800be12:	bf86      	itte	hi
 800be14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bea8 <_strtod_l+0x598>
 800be18:	f04f 3aff 	movhi.w	sl, #4294967295
 800be1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800be20:	2300      	movs	r3, #0
 800be22:	9308      	str	r3, [sp, #32]
 800be24:	e07a      	b.n	800bf1c <_strtod_l+0x60c>
 800be26:	07e2      	lsls	r2, r4, #31
 800be28:	d505      	bpl.n	800be36 <_strtod_l+0x526>
 800be2a:	9b08      	ldr	r3, [sp, #32]
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	f7f4 fbf2 	bl	8000618 <__aeabi_dmul>
 800be34:	2301      	movs	r3, #1
 800be36:	9a08      	ldr	r2, [sp, #32]
 800be38:	3208      	adds	r2, #8
 800be3a:	3601      	adds	r6, #1
 800be3c:	1064      	asrs	r4, r4, #1
 800be3e:	9208      	str	r2, [sp, #32]
 800be40:	e7cd      	b.n	800bdde <_strtod_l+0x4ce>
 800be42:	d0ed      	beq.n	800be20 <_strtod_l+0x510>
 800be44:	4264      	negs	r4, r4
 800be46:	f014 020f 	ands.w	r2, r4, #15
 800be4a:	d00a      	beq.n	800be62 <_strtod_l+0x552>
 800be4c:	4b12      	ldr	r3, [pc, #72]	@ (800be98 <_strtod_l+0x588>)
 800be4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be52:	4650      	mov	r0, sl
 800be54:	4659      	mov	r1, fp
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	f7f4 fd07 	bl	800086c <__aeabi_ddiv>
 800be5e:	4682      	mov	sl, r0
 800be60:	468b      	mov	fp, r1
 800be62:	1124      	asrs	r4, r4, #4
 800be64:	d0dc      	beq.n	800be20 <_strtod_l+0x510>
 800be66:	2c1f      	cmp	r4, #31
 800be68:	dd20      	ble.n	800beac <_strtod_l+0x59c>
 800be6a:	2400      	movs	r4, #0
 800be6c:	46a0      	mov	r8, r4
 800be6e:	940a      	str	r4, [sp, #40]	@ 0x28
 800be70:	46a1      	mov	r9, r4
 800be72:	9a05      	ldr	r2, [sp, #20]
 800be74:	2322      	movs	r3, #34	@ 0x22
 800be76:	f04f 0a00 	mov.w	sl, #0
 800be7a:	f04f 0b00 	mov.w	fp, #0
 800be7e:	6013      	str	r3, [r2, #0]
 800be80:	e768      	b.n	800bd54 <_strtod_l+0x444>
 800be82:	bf00      	nop
 800be84:	08010009 	.word	0x08010009
 800be88:	0801021c 	.word	0x0801021c
 800be8c:	08010001 	.word	0x08010001
 800be90:	08010036 	.word	0x08010036
 800be94:	080103e0 	.word	0x080103e0
 800be98:	08010150 	.word	0x08010150
 800be9c:	08010128 	.word	0x08010128
 800bea0:	7ff00000 	.word	0x7ff00000
 800bea4:	7ca00000 	.word	0x7ca00000
 800bea8:	7fefffff 	.word	0x7fefffff
 800beac:	f014 0310 	ands.w	r3, r4, #16
 800beb0:	bf18      	it	ne
 800beb2:	236a      	movne	r3, #106	@ 0x6a
 800beb4:	4e77      	ldr	r6, [pc, #476]	@ (800c094 <_strtod_l+0x784>)
 800beb6:	9308      	str	r3, [sp, #32]
 800beb8:	4650      	mov	r0, sl
 800beba:	4659      	mov	r1, fp
 800bebc:	2300      	movs	r3, #0
 800bebe:	07e2      	lsls	r2, r4, #31
 800bec0:	d504      	bpl.n	800becc <_strtod_l+0x5bc>
 800bec2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bec6:	f7f4 fba7 	bl	8000618 <__aeabi_dmul>
 800beca:	2301      	movs	r3, #1
 800becc:	1064      	asrs	r4, r4, #1
 800bece:	f106 0608 	add.w	r6, r6, #8
 800bed2:	d1f4      	bne.n	800bebe <_strtod_l+0x5ae>
 800bed4:	b10b      	cbz	r3, 800beda <_strtod_l+0x5ca>
 800bed6:	4682      	mov	sl, r0
 800bed8:	468b      	mov	fp, r1
 800beda:	9b08      	ldr	r3, [sp, #32]
 800bedc:	b1b3      	cbz	r3, 800bf0c <_strtod_l+0x5fc>
 800bede:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bee2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	4659      	mov	r1, fp
 800beea:	dd0f      	ble.n	800bf0c <_strtod_l+0x5fc>
 800beec:	2b1f      	cmp	r3, #31
 800beee:	dd57      	ble.n	800bfa0 <_strtod_l+0x690>
 800bef0:	2b34      	cmp	r3, #52	@ 0x34
 800bef2:	bfde      	ittt	le
 800bef4:	f04f 33ff 	movle.w	r3, #4294967295
 800bef8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800befc:	4093      	lslle	r3, r2
 800befe:	f04f 0a00 	mov.w	sl, #0
 800bf02:	bfcc      	ite	gt
 800bf04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bf08:	ea03 0b01 	andle.w	fp, r3, r1
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4650      	mov	r0, sl
 800bf12:	4659      	mov	r1, fp
 800bf14:	f7f4 fde8 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d1a6      	bne.n	800be6a <_strtod_l+0x55a>
 800bf1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf22:	9805      	ldr	r0, [sp, #20]
 800bf24:	462b      	mov	r3, r5
 800bf26:	463a      	mov	r2, r7
 800bf28:	f7ff f8ce 	bl	800b0c8 <__s2b>
 800bf2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	f43f af05 	beq.w	800bd3e <_strtod_l+0x42e>
 800bf34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf36:	2a00      	cmp	r2, #0
 800bf38:	eba9 0308 	sub.w	r3, r9, r8
 800bf3c:	bfa8      	it	ge
 800bf3e:	2300      	movge	r3, #0
 800bf40:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf42:	2400      	movs	r4, #0
 800bf44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf48:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf4a:	46a0      	mov	r8, r4
 800bf4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf4e:	9805      	ldr	r0, [sp, #20]
 800bf50:	6859      	ldr	r1, [r3, #4]
 800bf52:	f7ff f811 	bl	800af78 <_Balloc>
 800bf56:	4681      	mov	r9, r0
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	f43f aef4 	beq.w	800bd46 <_strtod_l+0x436>
 800bf5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf60:	691a      	ldr	r2, [r3, #16]
 800bf62:	3202      	adds	r2, #2
 800bf64:	f103 010c 	add.w	r1, r3, #12
 800bf68:	0092      	lsls	r2, r2, #2
 800bf6a:	300c      	adds	r0, #12
 800bf6c:	f7fe f8a3 	bl	800a0b6 <memcpy>
 800bf70:	ab1c      	add	r3, sp, #112	@ 0x70
 800bf72:	9301      	str	r3, [sp, #4]
 800bf74:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	9805      	ldr	r0, [sp, #20]
 800bf7a:	4652      	mov	r2, sl
 800bf7c:	465b      	mov	r3, fp
 800bf7e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bf82:	f7ff fbd7 	bl	800b734 <__d2b>
 800bf86:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	f43f aedc 	beq.w	800bd46 <_strtod_l+0x436>
 800bf8e:	9805      	ldr	r0, [sp, #20]
 800bf90:	2101      	movs	r1, #1
 800bf92:	f7ff f92f 	bl	800b1f4 <__i2b>
 800bf96:	4680      	mov	r8, r0
 800bf98:	b948      	cbnz	r0, 800bfae <_strtod_l+0x69e>
 800bf9a:	f04f 0800 	mov.w	r8, #0
 800bf9e:	e6d2      	b.n	800bd46 <_strtod_l+0x436>
 800bfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa8:	ea03 0a0a 	and.w	sl, r3, sl
 800bfac:	e7ae      	b.n	800bf0c <_strtod_l+0x5fc>
 800bfae:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bfb0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	bfab      	itete	ge
 800bfb6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bfb8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bfba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bfbc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bfbe:	bfac      	ite	ge
 800bfc0:	18ef      	addge	r7, r5, r3
 800bfc2:	1b5e      	sublt	r6, r3, r5
 800bfc4:	9b08      	ldr	r3, [sp, #32]
 800bfc6:	1aed      	subs	r5, r5, r3
 800bfc8:	4415      	add	r5, r2
 800bfca:	4b33      	ldr	r3, [pc, #204]	@ (800c098 <_strtod_l+0x788>)
 800bfcc:	3d01      	subs	r5, #1
 800bfce:	429d      	cmp	r5, r3
 800bfd0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bfd4:	da50      	bge.n	800c078 <_strtod_l+0x768>
 800bfd6:	1b5b      	subs	r3, r3, r5
 800bfd8:	2b1f      	cmp	r3, #31
 800bfda:	eba2 0203 	sub.w	r2, r2, r3
 800bfde:	f04f 0101 	mov.w	r1, #1
 800bfe2:	dc3d      	bgt.n	800c060 <_strtod_l+0x750>
 800bfe4:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfea:	2300      	movs	r3, #0
 800bfec:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfee:	18bd      	adds	r5, r7, r2
 800bff0:	9b08      	ldr	r3, [sp, #32]
 800bff2:	42af      	cmp	r7, r5
 800bff4:	4416      	add	r6, r2
 800bff6:	441e      	add	r6, r3
 800bff8:	463b      	mov	r3, r7
 800bffa:	bfa8      	it	ge
 800bffc:	462b      	movge	r3, r5
 800bffe:	42b3      	cmp	r3, r6
 800c000:	bfa8      	it	ge
 800c002:	4633      	movge	r3, r6
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfc2      	ittt	gt
 800c008:	1aed      	subgt	r5, r5, r3
 800c00a:	1af6      	subgt	r6, r6, r3
 800c00c:	1aff      	subgt	r7, r7, r3
 800c00e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c010:	2b00      	cmp	r3, #0
 800c012:	dd16      	ble.n	800c042 <_strtod_l+0x732>
 800c014:	4641      	mov	r1, r8
 800c016:	9805      	ldr	r0, [sp, #20]
 800c018:	461a      	mov	r2, r3
 800c01a:	f7ff f9ab 	bl	800b374 <__pow5mult>
 800c01e:	4680      	mov	r8, r0
 800c020:	2800      	cmp	r0, #0
 800c022:	d0ba      	beq.n	800bf9a <_strtod_l+0x68a>
 800c024:	4601      	mov	r1, r0
 800c026:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c028:	9805      	ldr	r0, [sp, #20]
 800c02a:	f7ff f8f9 	bl	800b220 <__multiply>
 800c02e:	900e      	str	r0, [sp, #56]	@ 0x38
 800c030:	2800      	cmp	r0, #0
 800c032:	f43f ae88 	beq.w	800bd46 <_strtod_l+0x436>
 800c036:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c038:	9805      	ldr	r0, [sp, #20]
 800c03a:	f7fe ffdd 	bl	800aff8 <_Bfree>
 800c03e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c040:	931a      	str	r3, [sp, #104]	@ 0x68
 800c042:	2d00      	cmp	r5, #0
 800c044:	dc1d      	bgt.n	800c082 <_strtod_l+0x772>
 800c046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dd27      	ble.n	800c09c <_strtod_l+0x78c>
 800c04c:	4649      	mov	r1, r9
 800c04e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c050:	9805      	ldr	r0, [sp, #20]
 800c052:	f7ff f98f 	bl	800b374 <__pow5mult>
 800c056:	4681      	mov	r9, r0
 800c058:	bb00      	cbnz	r0, 800c09c <_strtod_l+0x78c>
 800c05a:	f04f 0900 	mov.w	r9, #0
 800c05e:	e672      	b.n	800bd46 <_strtod_l+0x436>
 800c060:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c064:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c068:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c06c:	35e2      	adds	r5, #226	@ 0xe2
 800c06e:	fa01 f305 	lsl.w	r3, r1, r5
 800c072:	9310      	str	r3, [sp, #64]	@ 0x40
 800c074:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c076:	e7ba      	b.n	800bfee <_strtod_l+0x6de>
 800c078:	2300      	movs	r3, #0
 800c07a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c07c:	2301      	movs	r3, #1
 800c07e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c080:	e7b5      	b.n	800bfee <_strtod_l+0x6de>
 800c082:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c084:	9805      	ldr	r0, [sp, #20]
 800c086:	462a      	mov	r2, r5
 800c088:	f7ff f9ce 	bl	800b428 <__lshift>
 800c08c:	901a      	str	r0, [sp, #104]	@ 0x68
 800c08e:	2800      	cmp	r0, #0
 800c090:	d1d9      	bne.n	800c046 <_strtod_l+0x736>
 800c092:	e658      	b.n	800bd46 <_strtod_l+0x436>
 800c094:	08010248 	.word	0x08010248
 800c098:	fffffc02 	.word	0xfffffc02
 800c09c:	2e00      	cmp	r6, #0
 800c09e:	dd07      	ble.n	800c0b0 <_strtod_l+0x7a0>
 800c0a0:	4649      	mov	r1, r9
 800c0a2:	9805      	ldr	r0, [sp, #20]
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	f7ff f9bf 	bl	800b428 <__lshift>
 800c0aa:	4681      	mov	r9, r0
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d0d4      	beq.n	800c05a <_strtod_l+0x74a>
 800c0b0:	2f00      	cmp	r7, #0
 800c0b2:	dd08      	ble.n	800c0c6 <_strtod_l+0x7b6>
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	9805      	ldr	r0, [sp, #20]
 800c0b8:	463a      	mov	r2, r7
 800c0ba:	f7ff f9b5 	bl	800b428 <__lshift>
 800c0be:	4680      	mov	r8, r0
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	f43f ae40 	beq.w	800bd46 <_strtod_l+0x436>
 800c0c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0c8:	9805      	ldr	r0, [sp, #20]
 800c0ca:	464a      	mov	r2, r9
 800c0cc:	f7ff fa34 	bl	800b538 <__mdiff>
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f43f ae37 	beq.w	800bd46 <_strtod_l+0x436>
 800c0d8:	68c3      	ldr	r3, [r0, #12]
 800c0da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60c3      	str	r3, [r0, #12]
 800c0e0:	4641      	mov	r1, r8
 800c0e2:	f7ff fa0d 	bl	800b500 <__mcmp>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	da3d      	bge.n	800c166 <_strtod_l+0x856>
 800c0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ec:	ea53 030a 	orrs.w	r3, r3, sl
 800c0f0:	d163      	bne.n	800c1ba <_strtod_l+0x8aa>
 800c0f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d15f      	bne.n	800c1ba <_strtod_l+0x8aa>
 800c0fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0fe:	0d1b      	lsrs	r3, r3, #20
 800c100:	051b      	lsls	r3, r3, #20
 800c102:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c106:	d958      	bls.n	800c1ba <_strtod_l+0x8aa>
 800c108:	6963      	ldr	r3, [r4, #20]
 800c10a:	b913      	cbnz	r3, 800c112 <_strtod_l+0x802>
 800c10c:	6923      	ldr	r3, [r4, #16]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	dd53      	ble.n	800c1ba <_strtod_l+0x8aa>
 800c112:	4621      	mov	r1, r4
 800c114:	2201      	movs	r2, #1
 800c116:	9805      	ldr	r0, [sp, #20]
 800c118:	f7ff f986 	bl	800b428 <__lshift>
 800c11c:	4641      	mov	r1, r8
 800c11e:	4604      	mov	r4, r0
 800c120:	f7ff f9ee 	bl	800b500 <__mcmp>
 800c124:	2800      	cmp	r0, #0
 800c126:	dd48      	ble.n	800c1ba <_strtod_l+0x8aa>
 800c128:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c12c:	9a08      	ldr	r2, [sp, #32]
 800c12e:	0d1b      	lsrs	r3, r3, #20
 800c130:	051b      	lsls	r3, r3, #20
 800c132:	2a00      	cmp	r2, #0
 800c134:	d062      	beq.n	800c1fc <_strtod_l+0x8ec>
 800c136:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c13a:	d85f      	bhi.n	800c1fc <_strtod_l+0x8ec>
 800c13c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c140:	f67f ae97 	bls.w	800be72 <_strtod_l+0x562>
 800c144:	4ba8      	ldr	r3, [pc, #672]	@ (800c3e8 <_strtod_l+0xad8>)
 800c146:	4650      	mov	r0, sl
 800c148:	4659      	mov	r1, fp
 800c14a:	2200      	movs	r2, #0
 800c14c:	f7f4 fa64 	bl	8000618 <__aeabi_dmul>
 800c150:	4ba6      	ldr	r3, [pc, #664]	@ (800c3ec <_strtod_l+0xadc>)
 800c152:	400b      	ands	r3, r1
 800c154:	4682      	mov	sl, r0
 800c156:	468b      	mov	fp, r1
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f47f adff 	bne.w	800bd5c <_strtod_l+0x44c>
 800c15e:	9a05      	ldr	r2, [sp, #20]
 800c160:	2322      	movs	r3, #34	@ 0x22
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	e5fa      	b.n	800bd5c <_strtod_l+0x44c>
 800c166:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c16a:	d165      	bne.n	800c238 <_strtod_l+0x928>
 800c16c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c16e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c172:	b35a      	cbz	r2, 800c1cc <_strtod_l+0x8bc>
 800c174:	4a9e      	ldr	r2, [pc, #632]	@ (800c3f0 <_strtod_l+0xae0>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d12b      	bne.n	800c1d2 <_strtod_l+0x8c2>
 800c17a:	9b08      	ldr	r3, [sp, #32]
 800c17c:	4651      	mov	r1, sl
 800c17e:	b303      	cbz	r3, 800c1c2 <_strtod_l+0x8b2>
 800c180:	4b9a      	ldr	r3, [pc, #616]	@ (800c3ec <_strtod_l+0xadc>)
 800c182:	465a      	mov	r2, fp
 800c184:	4013      	ands	r3, r2
 800c186:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c18a:	f04f 32ff 	mov.w	r2, #4294967295
 800c18e:	d81b      	bhi.n	800c1c8 <_strtod_l+0x8b8>
 800c190:	0d1b      	lsrs	r3, r3, #20
 800c192:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c196:	fa02 f303 	lsl.w	r3, r2, r3
 800c19a:	4299      	cmp	r1, r3
 800c19c:	d119      	bne.n	800c1d2 <_strtod_l+0x8c2>
 800c19e:	4b95      	ldr	r3, [pc, #596]	@ (800c3f4 <_strtod_l+0xae4>)
 800c1a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d102      	bne.n	800c1ac <_strtod_l+0x89c>
 800c1a6:	3101      	adds	r1, #1
 800c1a8:	f43f adcd 	beq.w	800bd46 <_strtod_l+0x436>
 800c1ac:	4b8f      	ldr	r3, [pc, #572]	@ (800c3ec <_strtod_l+0xadc>)
 800c1ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1b0:	401a      	ands	r2, r3
 800c1b2:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c1b6:	f04f 0a00 	mov.w	sl, #0
 800c1ba:	9b08      	ldr	r3, [sp, #32]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1c1      	bne.n	800c144 <_strtod_l+0x834>
 800c1c0:	e5cc      	b.n	800bd5c <_strtod_l+0x44c>
 800c1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c6:	e7e8      	b.n	800c19a <_strtod_l+0x88a>
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	e7e6      	b.n	800c19a <_strtod_l+0x88a>
 800c1cc:	ea53 030a 	orrs.w	r3, r3, sl
 800c1d0:	d0aa      	beq.n	800c128 <_strtod_l+0x818>
 800c1d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1d4:	b1db      	cbz	r3, 800c20e <_strtod_l+0x8fe>
 800c1d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1d8:	4213      	tst	r3, r2
 800c1da:	d0ee      	beq.n	800c1ba <_strtod_l+0x8aa>
 800c1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1de:	9a08      	ldr	r2, [sp, #32]
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	4659      	mov	r1, fp
 800c1e4:	b1bb      	cbz	r3, 800c216 <_strtod_l+0x906>
 800c1e6:	f7ff fb71 	bl	800b8cc <sulp>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1f2:	f7f4 f85b 	bl	80002ac <__adddf3>
 800c1f6:	4682      	mov	sl, r0
 800c1f8:	468b      	mov	fp, r1
 800c1fa:	e7de      	b.n	800c1ba <_strtod_l+0x8aa>
 800c1fc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c200:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c204:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c208:	f04f 3aff 	mov.w	sl, #4294967295
 800c20c:	e7d5      	b.n	800c1ba <_strtod_l+0x8aa>
 800c20e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c210:	ea13 0f0a 	tst.w	r3, sl
 800c214:	e7e1      	b.n	800c1da <_strtod_l+0x8ca>
 800c216:	f7ff fb59 	bl	800b8cc <sulp>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c222:	f7f4 f841 	bl	80002a8 <__aeabi_dsub>
 800c226:	2200      	movs	r2, #0
 800c228:	2300      	movs	r3, #0
 800c22a:	4682      	mov	sl, r0
 800c22c:	468b      	mov	fp, r1
 800c22e:	f7f4 fc5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800c232:	2800      	cmp	r0, #0
 800c234:	d0c1      	beq.n	800c1ba <_strtod_l+0x8aa>
 800c236:	e61c      	b.n	800be72 <_strtod_l+0x562>
 800c238:	4641      	mov	r1, r8
 800c23a:	4620      	mov	r0, r4
 800c23c:	f7ff fad2 	bl	800b7e4 <__ratio>
 800c240:	2200      	movs	r2, #0
 800c242:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	f7f4 fc61 	bl	8000b10 <__aeabi_dcmple>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d06d      	beq.n	800c32e <_strtod_l+0xa1e>
 800c252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d178      	bne.n	800c34a <_strtod_l+0xa3a>
 800c258:	f1ba 0f00 	cmp.w	sl, #0
 800c25c:	d156      	bne.n	800c30c <_strtod_l+0x9fc>
 800c25e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c264:	2b00      	cmp	r3, #0
 800c266:	d158      	bne.n	800c31a <_strtod_l+0xa0a>
 800c268:	4b63      	ldr	r3, [pc, #396]	@ (800c3f8 <_strtod_l+0xae8>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	4630      	mov	r0, r6
 800c26e:	4639      	mov	r1, r7
 800c270:	f7f4 fc44 	bl	8000afc <__aeabi_dcmplt>
 800c274:	2800      	cmp	r0, #0
 800c276:	d157      	bne.n	800c328 <_strtod_l+0xa18>
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	4b5f      	ldr	r3, [pc, #380]	@ (800c3fc <_strtod_l+0xaec>)
 800c27e:	2200      	movs	r2, #0
 800c280:	f7f4 f9ca 	bl	8000618 <__aeabi_dmul>
 800c284:	4606      	mov	r6, r0
 800c286:	460f      	mov	r7, r1
 800c288:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c28c:	9606      	str	r6, [sp, #24]
 800c28e:	9307      	str	r3, [sp, #28]
 800c290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c294:	4d55      	ldr	r5, [pc, #340]	@ (800c3ec <_strtod_l+0xadc>)
 800c296:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c29a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c29c:	401d      	ands	r5, r3
 800c29e:	4b58      	ldr	r3, [pc, #352]	@ (800c400 <_strtod_l+0xaf0>)
 800c2a0:	429d      	cmp	r5, r3
 800c2a2:	f040 80b1 	bne.w	800c408 <_strtod_l+0xaf8>
 800c2a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2a8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c2ac:	4650      	mov	r0, sl
 800c2ae:	4659      	mov	r1, fp
 800c2b0:	f7ff f9d6 	bl	800b660 <__ulp>
 800c2b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2b8:	f7f4 f9ae 	bl	8000618 <__aeabi_dmul>
 800c2bc:	4652      	mov	r2, sl
 800c2be:	465b      	mov	r3, fp
 800c2c0:	f7f3 fff4 	bl	80002ac <__adddf3>
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4949      	ldr	r1, [pc, #292]	@ (800c3ec <_strtod_l+0xadc>)
 800c2c8:	4a4e      	ldr	r2, [pc, #312]	@ (800c404 <_strtod_l+0xaf4>)
 800c2ca:	4019      	ands	r1, r3
 800c2cc:	4291      	cmp	r1, r2
 800c2ce:	4682      	mov	sl, r0
 800c2d0:	d942      	bls.n	800c358 <_strtod_l+0xa48>
 800c2d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2d4:	4b47      	ldr	r3, [pc, #284]	@ (800c3f4 <_strtod_l+0xae4>)
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d103      	bne.n	800c2e2 <_strtod_l+0x9d2>
 800c2da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2dc:	3301      	adds	r3, #1
 800c2de:	f43f ad32 	beq.w	800bd46 <_strtod_l+0x436>
 800c2e2:	f8df b110 	ldr.w	fp, [pc, #272]	@ 800c3f4 <_strtod_l+0xae4>
 800c2e6:	f04f 3aff 	mov.w	sl, #4294967295
 800c2ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2ec:	9805      	ldr	r0, [sp, #20]
 800c2ee:	f7fe fe83 	bl	800aff8 <_Bfree>
 800c2f2:	9805      	ldr	r0, [sp, #20]
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7fe fe7f 	bl	800aff8 <_Bfree>
 800c2fa:	9805      	ldr	r0, [sp, #20]
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	f7fe fe7b 	bl	800aff8 <_Bfree>
 800c302:	9805      	ldr	r0, [sp, #20]
 800c304:	4621      	mov	r1, r4
 800c306:	f7fe fe77 	bl	800aff8 <_Bfree>
 800c30a:	e61f      	b.n	800bf4c <_strtod_l+0x63c>
 800c30c:	f1ba 0f01 	cmp.w	sl, #1
 800c310:	d103      	bne.n	800c31a <_strtod_l+0xa0a>
 800c312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c314:	2b00      	cmp	r3, #0
 800c316:	f43f adac 	beq.w	800be72 <_strtod_l+0x562>
 800c31a:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c3c8 <_strtod_l+0xab8>
 800c31e:	4f36      	ldr	r7, [pc, #216]	@ (800c3f8 <_strtod_l+0xae8>)
 800c320:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c324:	2600      	movs	r6, #0
 800c326:	e7b3      	b.n	800c290 <_strtod_l+0x980>
 800c328:	4f34      	ldr	r7, [pc, #208]	@ (800c3fc <_strtod_l+0xaec>)
 800c32a:	2600      	movs	r6, #0
 800c32c:	e7ac      	b.n	800c288 <_strtod_l+0x978>
 800c32e:	4b33      	ldr	r3, [pc, #204]	@ (800c3fc <_strtod_l+0xaec>)
 800c330:	4630      	mov	r0, r6
 800c332:	4639      	mov	r1, r7
 800c334:	2200      	movs	r2, #0
 800c336:	f7f4 f96f 	bl	8000618 <__aeabi_dmul>
 800c33a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c33c:	4606      	mov	r6, r0
 800c33e:	460f      	mov	r7, r1
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0a1      	beq.n	800c288 <_strtod_l+0x978>
 800c344:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c348:	e7a2      	b.n	800c290 <_strtod_l+0x980>
 800c34a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c3d0 <_strtod_l+0xac0>
 800c34e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c352:	ec57 6b17 	vmov	r6, r7, d7
 800c356:	e79b      	b.n	800c290 <_strtod_l+0x980>
 800c358:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c35c:	9b08      	ldr	r3, [sp, #32]
 800c35e:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1c1      	bne.n	800c2ea <_strtod_l+0x9da>
 800c366:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c36a:	0d1b      	lsrs	r3, r3, #20
 800c36c:	051b      	lsls	r3, r3, #20
 800c36e:	429d      	cmp	r5, r3
 800c370:	d1bb      	bne.n	800c2ea <_strtod_l+0x9da>
 800c372:	4630      	mov	r0, r6
 800c374:	4639      	mov	r1, r7
 800c376:	f7f4 fcaf 	bl	8000cd8 <__aeabi_d2lz>
 800c37a:	f7f4 f91f 	bl	80005bc <__aeabi_l2d>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f3 ff8f 	bl	80002a8 <__aeabi_dsub>
 800c38a:	460b      	mov	r3, r1
 800c38c:	4602      	mov	r2, r0
 800c38e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c392:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c398:	ea46 060a 	orr.w	r6, r6, sl
 800c39c:	431e      	orrs	r6, r3
 800c39e:	d070      	beq.n	800c482 <_strtod_l+0xb72>
 800c3a0:	a30d      	add	r3, pc, #52	@ (adr r3, 800c3d8 <_strtod_l+0xac8>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f7f4 fba9 	bl	8000afc <__aeabi_dcmplt>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	f47f acd6 	bne.w	800bd5c <_strtod_l+0x44c>
 800c3b0:	a30b      	add	r3, pc, #44	@ (adr r3, 800c3e0 <_strtod_l+0xad0>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3ba:	f7f4 fbbd 	bl	8000b38 <__aeabi_dcmpgt>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d093      	beq.n	800c2ea <_strtod_l+0x9da>
 800c3c2:	e4cb      	b.n	800bd5c <_strtod_l+0x44c>
 800c3c4:	f3af 8000 	nop.w
 800c3c8:	00000000 	.word	0x00000000
 800c3cc:	bff00000 	.word	0xbff00000
 800c3d0:	00000000 	.word	0x00000000
 800c3d4:	3ff00000 	.word	0x3ff00000
 800c3d8:	94a03595 	.word	0x94a03595
 800c3dc:	3fdfffff 	.word	0x3fdfffff
 800c3e0:	35afe535 	.word	0x35afe535
 800c3e4:	3fe00000 	.word	0x3fe00000
 800c3e8:	39500000 	.word	0x39500000
 800c3ec:	7ff00000 	.word	0x7ff00000
 800c3f0:	000fffff 	.word	0x000fffff
 800c3f4:	7fefffff 	.word	0x7fefffff
 800c3f8:	3ff00000 	.word	0x3ff00000
 800c3fc:	3fe00000 	.word	0x3fe00000
 800c400:	7fe00000 	.word	0x7fe00000
 800c404:	7c9fffff 	.word	0x7c9fffff
 800c408:	9b08      	ldr	r3, [sp, #32]
 800c40a:	b323      	cbz	r3, 800c456 <_strtod_l+0xb46>
 800c40c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c410:	d821      	bhi.n	800c456 <_strtod_l+0xb46>
 800c412:	a327      	add	r3, pc, #156	@ (adr r3, 800c4b0 <_strtod_l+0xba0>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	4630      	mov	r0, r6
 800c41a:	4639      	mov	r1, r7
 800c41c:	f7f4 fb78 	bl	8000b10 <__aeabi_dcmple>
 800c420:	b1a0      	cbz	r0, 800c44c <_strtod_l+0xb3c>
 800c422:	4639      	mov	r1, r7
 800c424:	4630      	mov	r0, r6
 800c426:	f7f4 fbcf 	bl	8000bc8 <__aeabi_d2uiz>
 800c42a:	2801      	cmp	r0, #1
 800c42c:	bf38      	it	cc
 800c42e:	2001      	movcc	r0, #1
 800c430:	f7f4 f878 	bl	8000524 <__aeabi_ui2d>
 800c434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	b9fb      	cbnz	r3, 800c47c <_strtod_l+0xb6c>
 800c43c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c440:	9014      	str	r0, [sp, #80]	@ 0x50
 800c442:	9315      	str	r3, [sp, #84]	@ 0x54
 800c444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c448:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c44c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c44e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c452:	1b5b      	subs	r3, r3, r5
 800c454:	9311      	str	r3, [sp, #68]	@ 0x44
 800c456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c45a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c45e:	f7ff f8ff 	bl	800b660 <__ulp>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4650      	mov	r0, sl
 800c468:	4659      	mov	r1, fp
 800c46a:	f7f4 f8d5 	bl	8000618 <__aeabi_dmul>
 800c46e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c472:	f7f3 ff1b 	bl	80002ac <__adddf3>
 800c476:	4682      	mov	sl, r0
 800c478:	468b      	mov	fp, r1
 800c47a:	e76f      	b.n	800c35c <_strtod_l+0xa4c>
 800c47c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c480:	e7e0      	b.n	800c444 <_strtod_l+0xb34>
 800c482:	a30d      	add	r3, pc, #52	@ (adr r3, 800c4b8 <_strtod_l+0xba8>)
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f7f4 fb38 	bl	8000afc <__aeabi_dcmplt>
 800c48c:	e797      	b.n	800c3be <_strtod_l+0xaae>
 800c48e:	2300      	movs	r3, #0
 800c490:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c492:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c494:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	f7ff ba77 	b.w	800b98a <_strtod_l+0x7a>
 800c49c:	2a65      	cmp	r2, #101	@ 0x65
 800c49e:	f43f ab6e 	beq.w	800bb7e <_strtod_l+0x26e>
 800c4a2:	2a45      	cmp	r2, #69	@ 0x45
 800c4a4:	f43f ab6b 	beq.w	800bb7e <_strtod_l+0x26e>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	f7ff bba6 	b.w	800bbfa <_strtod_l+0x2ea>
 800c4ae:	bf00      	nop
 800c4b0:	ffc00000 	.word	0xffc00000
 800c4b4:	41dfffff 	.word	0x41dfffff
 800c4b8:	94a03595 	.word	0x94a03595
 800c4bc:	3fcfffff 	.word	0x3fcfffff

0800c4c0 <_strtod_r>:
 800c4c0:	4b01      	ldr	r3, [pc, #4]	@ (800c4c8 <_strtod_r+0x8>)
 800c4c2:	f7ff ba25 	b.w	800b910 <_strtod_l>
 800c4c6:	bf00      	nop
 800c4c8:	2000006c 	.word	0x2000006c

0800c4cc <_strtol_l.constprop.0>:
 800c4cc:	2b24      	cmp	r3, #36	@ 0x24
 800c4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d2:	4686      	mov	lr, r0
 800c4d4:	4690      	mov	r8, r2
 800c4d6:	d801      	bhi.n	800c4dc <_strtol_l.constprop.0+0x10>
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d106      	bne.n	800c4ea <_strtol_l.constprop.0+0x1e>
 800c4dc:	f7fd fdbe 	bl	800a05c <__errno>
 800c4e0:	2316      	movs	r3, #22
 800c4e2:	6003      	str	r3, [r0, #0]
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ea:	4834      	ldr	r0, [pc, #208]	@ (800c5bc <_strtol_l.constprop.0+0xf0>)
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4f4:	5d06      	ldrb	r6, [r0, r4]
 800c4f6:	f016 0608 	ands.w	r6, r6, #8
 800c4fa:	d1f8      	bne.n	800c4ee <_strtol_l.constprop.0+0x22>
 800c4fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c4fe:	d12d      	bne.n	800c55c <_strtol_l.constprop.0+0x90>
 800c500:	782c      	ldrb	r4, [r5, #0]
 800c502:	2601      	movs	r6, #1
 800c504:	1c95      	adds	r5, r2, #2
 800c506:	f033 0210 	bics.w	r2, r3, #16
 800c50a:	d109      	bne.n	800c520 <_strtol_l.constprop.0+0x54>
 800c50c:	2c30      	cmp	r4, #48	@ 0x30
 800c50e:	d12a      	bne.n	800c566 <_strtol_l.constprop.0+0x9a>
 800c510:	782a      	ldrb	r2, [r5, #0]
 800c512:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c516:	2a58      	cmp	r2, #88	@ 0x58
 800c518:	d125      	bne.n	800c566 <_strtol_l.constprop.0+0x9a>
 800c51a:	786c      	ldrb	r4, [r5, #1]
 800c51c:	2310      	movs	r3, #16
 800c51e:	3502      	adds	r5, #2
 800c520:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c524:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c528:	2200      	movs	r2, #0
 800c52a:	fbbc f9f3 	udiv	r9, ip, r3
 800c52e:	4610      	mov	r0, r2
 800c530:	fb03 ca19 	mls	sl, r3, r9, ip
 800c534:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c538:	2f09      	cmp	r7, #9
 800c53a:	d81b      	bhi.n	800c574 <_strtol_l.constprop.0+0xa8>
 800c53c:	463c      	mov	r4, r7
 800c53e:	42a3      	cmp	r3, r4
 800c540:	dd27      	ble.n	800c592 <_strtol_l.constprop.0+0xc6>
 800c542:	1c57      	adds	r7, r2, #1
 800c544:	d007      	beq.n	800c556 <_strtol_l.constprop.0+0x8a>
 800c546:	4581      	cmp	r9, r0
 800c548:	d320      	bcc.n	800c58c <_strtol_l.constprop.0+0xc0>
 800c54a:	d101      	bne.n	800c550 <_strtol_l.constprop.0+0x84>
 800c54c:	45a2      	cmp	sl, r4
 800c54e:	db1d      	blt.n	800c58c <_strtol_l.constprop.0+0xc0>
 800c550:	fb00 4003 	mla	r0, r0, r3, r4
 800c554:	2201      	movs	r2, #1
 800c556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c55a:	e7eb      	b.n	800c534 <_strtol_l.constprop.0+0x68>
 800c55c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c55e:	bf04      	itt	eq
 800c560:	782c      	ldrbeq	r4, [r5, #0]
 800c562:	1c95      	addeq	r5, r2, #2
 800c564:	e7cf      	b.n	800c506 <_strtol_l.constprop.0+0x3a>
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1da      	bne.n	800c520 <_strtol_l.constprop.0+0x54>
 800c56a:	2c30      	cmp	r4, #48	@ 0x30
 800c56c:	bf0c      	ite	eq
 800c56e:	2308      	moveq	r3, #8
 800c570:	230a      	movne	r3, #10
 800c572:	e7d5      	b.n	800c520 <_strtol_l.constprop.0+0x54>
 800c574:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c578:	2f19      	cmp	r7, #25
 800c57a:	d801      	bhi.n	800c580 <_strtol_l.constprop.0+0xb4>
 800c57c:	3c37      	subs	r4, #55	@ 0x37
 800c57e:	e7de      	b.n	800c53e <_strtol_l.constprop.0+0x72>
 800c580:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c584:	2f19      	cmp	r7, #25
 800c586:	d804      	bhi.n	800c592 <_strtol_l.constprop.0+0xc6>
 800c588:	3c57      	subs	r4, #87	@ 0x57
 800c58a:	e7d8      	b.n	800c53e <_strtol_l.constprop.0+0x72>
 800c58c:	f04f 32ff 	mov.w	r2, #4294967295
 800c590:	e7e1      	b.n	800c556 <_strtol_l.constprop.0+0x8a>
 800c592:	1c53      	adds	r3, r2, #1
 800c594:	d108      	bne.n	800c5a8 <_strtol_l.constprop.0+0xdc>
 800c596:	2322      	movs	r3, #34	@ 0x22
 800c598:	f8ce 3000 	str.w	r3, [lr]
 800c59c:	4660      	mov	r0, ip
 800c59e:	f1b8 0f00 	cmp.w	r8, #0
 800c5a2:	d0a0      	beq.n	800c4e6 <_strtol_l.constprop.0+0x1a>
 800c5a4:	1e69      	subs	r1, r5, #1
 800c5a6:	e006      	b.n	800c5b6 <_strtol_l.constprop.0+0xea>
 800c5a8:	b106      	cbz	r6, 800c5ac <_strtol_l.constprop.0+0xe0>
 800c5aa:	4240      	negs	r0, r0
 800c5ac:	f1b8 0f00 	cmp.w	r8, #0
 800c5b0:	d099      	beq.n	800c4e6 <_strtol_l.constprop.0+0x1a>
 800c5b2:	2a00      	cmp	r2, #0
 800c5b4:	d1f6      	bne.n	800c5a4 <_strtol_l.constprop.0+0xd8>
 800c5b6:	f8c8 1000 	str.w	r1, [r8]
 800c5ba:	e794      	b.n	800c4e6 <_strtol_l.constprop.0+0x1a>
 800c5bc:	08010271 	.word	0x08010271

0800c5c0 <_strtol_r>:
 800c5c0:	f7ff bf84 	b.w	800c4cc <_strtol_l.constprop.0>

0800c5c4 <__ssputs_r>:
 800c5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c8:	688e      	ldr	r6, [r1, #8]
 800c5ca:	461f      	mov	r7, r3
 800c5cc:	42be      	cmp	r6, r7
 800c5ce:	680b      	ldr	r3, [r1, #0]
 800c5d0:	4682      	mov	sl, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4690      	mov	r8, r2
 800c5d6:	d82d      	bhi.n	800c634 <__ssputs_r+0x70>
 800c5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5e0:	d026      	beq.n	800c630 <__ssputs_r+0x6c>
 800c5e2:	6965      	ldr	r5, [r4, #20]
 800c5e4:	6909      	ldr	r1, [r1, #16]
 800c5e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5ea:	eba3 0901 	sub.w	r9, r3, r1
 800c5ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5f2:	1c7b      	adds	r3, r7, #1
 800c5f4:	444b      	add	r3, r9
 800c5f6:	106d      	asrs	r5, r5, #1
 800c5f8:	429d      	cmp	r5, r3
 800c5fa:	bf38      	it	cc
 800c5fc:	461d      	movcc	r5, r3
 800c5fe:	0553      	lsls	r3, r2, #21
 800c600:	d527      	bpl.n	800c652 <__ssputs_r+0x8e>
 800c602:	4629      	mov	r1, r5
 800c604:	f7fe fc2c 	bl	800ae60 <_malloc_r>
 800c608:	4606      	mov	r6, r0
 800c60a:	b360      	cbz	r0, 800c666 <__ssputs_r+0xa2>
 800c60c:	6921      	ldr	r1, [r4, #16]
 800c60e:	464a      	mov	r2, r9
 800c610:	f7fd fd51 	bl	800a0b6 <memcpy>
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c61e:	81a3      	strh	r3, [r4, #12]
 800c620:	6126      	str	r6, [r4, #16]
 800c622:	6165      	str	r5, [r4, #20]
 800c624:	444e      	add	r6, r9
 800c626:	eba5 0509 	sub.w	r5, r5, r9
 800c62a:	6026      	str	r6, [r4, #0]
 800c62c:	60a5      	str	r5, [r4, #8]
 800c62e:	463e      	mov	r6, r7
 800c630:	42be      	cmp	r6, r7
 800c632:	d900      	bls.n	800c636 <__ssputs_r+0x72>
 800c634:	463e      	mov	r6, r7
 800c636:	6820      	ldr	r0, [r4, #0]
 800c638:	4632      	mov	r2, r6
 800c63a:	4641      	mov	r1, r8
 800c63c:	f000 fef7 	bl	800d42e <memmove>
 800c640:	68a3      	ldr	r3, [r4, #8]
 800c642:	1b9b      	subs	r3, r3, r6
 800c644:	60a3      	str	r3, [r4, #8]
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	4433      	add	r3, r6
 800c64a:	6023      	str	r3, [r4, #0]
 800c64c:	2000      	movs	r0, #0
 800c64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c652:	462a      	mov	r2, r5
 800c654:	f001 facd 	bl	800dbf2 <_realloc_r>
 800c658:	4606      	mov	r6, r0
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d1e0      	bne.n	800c620 <__ssputs_r+0x5c>
 800c65e:	6921      	ldr	r1, [r4, #16]
 800c660:	4650      	mov	r0, sl
 800c662:	f7fe fb89 	bl	800ad78 <_free_r>
 800c666:	230c      	movs	r3, #12
 800c668:	f8ca 3000 	str.w	r3, [sl]
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	e7e9      	b.n	800c64e <__ssputs_r+0x8a>
	...

0800c67c <_svfiprintf_r>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	4698      	mov	r8, r3
 800c682:	898b      	ldrh	r3, [r1, #12]
 800c684:	061b      	lsls	r3, r3, #24
 800c686:	b09d      	sub	sp, #116	@ 0x74
 800c688:	4607      	mov	r7, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	4614      	mov	r4, r2
 800c68e:	d510      	bpl.n	800c6b2 <_svfiprintf_r+0x36>
 800c690:	690b      	ldr	r3, [r1, #16]
 800c692:	b973      	cbnz	r3, 800c6b2 <_svfiprintf_r+0x36>
 800c694:	2140      	movs	r1, #64	@ 0x40
 800c696:	f7fe fbe3 	bl	800ae60 <_malloc_r>
 800c69a:	6028      	str	r0, [r5, #0]
 800c69c:	6128      	str	r0, [r5, #16]
 800c69e:	b930      	cbnz	r0, 800c6ae <_svfiprintf_r+0x32>
 800c6a0:	230c      	movs	r3, #12
 800c6a2:	603b      	str	r3, [r7, #0]
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	b01d      	add	sp, #116	@ 0x74
 800c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ae:	2340      	movs	r3, #64	@ 0x40
 800c6b0:	616b      	str	r3, [r5, #20]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c0:	2330      	movs	r3, #48	@ 0x30
 800c6c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c860 <_svfiprintf_r+0x1e4>
 800c6c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6ca:	f04f 0901 	mov.w	r9, #1
 800c6ce:	4623      	mov	r3, r4
 800c6d0:	469a      	mov	sl, r3
 800c6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d6:	b10a      	cbz	r2, 800c6dc <_svfiprintf_r+0x60>
 800c6d8:	2a25      	cmp	r2, #37	@ 0x25
 800c6da:	d1f9      	bne.n	800c6d0 <_svfiprintf_r+0x54>
 800c6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e0:	d00b      	beq.n	800c6fa <_svfiprintf_r+0x7e>
 800c6e2:	465b      	mov	r3, fp
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7ff ff6b 	bl	800c5c4 <__ssputs_r>
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f000 80a7 	beq.w	800c842 <_svfiprintf_r+0x1c6>
 800c6f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6f6:	445a      	add	r2, fp
 800c6f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 809f 	beq.w	800c842 <_svfiprintf_r+0x1c6>
 800c704:	2300      	movs	r3, #0
 800c706:	f04f 32ff 	mov.w	r2, #4294967295
 800c70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c70e:	f10a 0a01 	add.w	sl, sl, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c71a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c71c:	4654      	mov	r4, sl
 800c71e:	2205      	movs	r2, #5
 800c720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c724:	484e      	ldr	r0, [pc, #312]	@ (800c860 <_svfiprintf_r+0x1e4>)
 800c726:	f7f3 fd63 	bl	80001f0 <memchr>
 800c72a:	9a04      	ldr	r2, [sp, #16]
 800c72c:	b9d8      	cbnz	r0, 800c766 <_svfiprintf_r+0xea>
 800c72e:	06d0      	lsls	r0, r2, #27
 800c730:	bf44      	itt	mi
 800c732:	2320      	movmi	r3, #32
 800c734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c738:	0711      	lsls	r1, r2, #28
 800c73a:	bf44      	itt	mi
 800c73c:	232b      	movmi	r3, #43	@ 0x2b
 800c73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b2a      	cmp	r3, #42	@ 0x2a
 800c748:	d015      	beq.n	800c776 <_svfiprintf_r+0xfa>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	4654      	mov	r4, sl
 800c74e:	2000      	movs	r0, #0
 800c750:	f04f 0c0a 	mov.w	ip, #10
 800c754:	4621      	mov	r1, r4
 800c756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c75a:	3b30      	subs	r3, #48	@ 0x30
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	d94b      	bls.n	800c7f8 <_svfiprintf_r+0x17c>
 800c760:	b1b0      	cbz	r0, 800c790 <_svfiprintf_r+0x114>
 800c762:	9207      	str	r2, [sp, #28]
 800c764:	e014      	b.n	800c790 <_svfiprintf_r+0x114>
 800c766:	eba0 0308 	sub.w	r3, r0, r8
 800c76a:	fa09 f303 	lsl.w	r3, r9, r3
 800c76e:	4313      	orrs	r3, r2
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	46a2      	mov	sl, r4
 800c774:	e7d2      	b.n	800c71c <_svfiprintf_r+0xa0>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	1d19      	adds	r1, r3, #4
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	9103      	str	r1, [sp, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	bfbb      	ittet	lt
 800c782:	425b      	neglt	r3, r3
 800c784:	f042 0202 	orrlt.w	r2, r2, #2
 800c788:	9307      	strge	r3, [sp, #28]
 800c78a:	9307      	strlt	r3, [sp, #28]
 800c78c:	bfb8      	it	lt
 800c78e:	9204      	strlt	r2, [sp, #16]
 800c790:	7823      	ldrb	r3, [r4, #0]
 800c792:	2b2e      	cmp	r3, #46	@ 0x2e
 800c794:	d10a      	bne.n	800c7ac <_svfiprintf_r+0x130>
 800c796:	7863      	ldrb	r3, [r4, #1]
 800c798:	2b2a      	cmp	r3, #42	@ 0x2a
 800c79a:	d132      	bne.n	800c802 <_svfiprintf_r+0x186>
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	9203      	str	r2, [sp, #12]
 800c7a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7a8:	3402      	adds	r4, #2
 800c7aa:	9305      	str	r3, [sp, #20]
 800c7ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c870 <_svfiprintf_r+0x1f4>
 800c7b0:	7821      	ldrb	r1, [r4, #0]
 800c7b2:	2203      	movs	r2, #3
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	f7f3 fd1b 	bl	80001f0 <memchr>
 800c7ba:	b138      	cbz	r0, 800c7cc <_svfiprintf_r+0x150>
 800c7bc:	9b04      	ldr	r3, [sp, #16]
 800c7be:	eba0 000a 	sub.w	r0, r0, sl
 800c7c2:	2240      	movs	r2, #64	@ 0x40
 800c7c4:	4082      	lsls	r2, r0
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	3401      	adds	r4, #1
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d0:	4824      	ldr	r0, [pc, #144]	@ (800c864 <_svfiprintf_r+0x1e8>)
 800c7d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7d6:	2206      	movs	r2, #6
 800c7d8:	f7f3 fd0a 	bl	80001f0 <memchr>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d036      	beq.n	800c84e <_svfiprintf_r+0x1d2>
 800c7e0:	4b21      	ldr	r3, [pc, #132]	@ (800c868 <_svfiprintf_r+0x1ec>)
 800c7e2:	bb1b      	cbnz	r3, 800c82c <_svfiprintf_r+0x1b0>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	3307      	adds	r3, #7
 800c7e8:	f023 0307 	bic.w	r3, r3, #7
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	9303      	str	r3, [sp, #12]
 800c7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f2:	4433      	add	r3, r6
 800c7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7f6:	e76a      	b.n	800c6ce <_svfiprintf_r+0x52>
 800c7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	2001      	movs	r0, #1
 800c800:	e7a8      	b.n	800c754 <_svfiprintf_r+0xd8>
 800c802:	2300      	movs	r3, #0
 800c804:	3401      	adds	r4, #1
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	4619      	mov	r1, r3
 800c80a:	f04f 0c0a 	mov.w	ip, #10
 800c80e:	4620      	mov	r0, r4
 800c810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c814:	3a30      	subs	r2, #48	@ 0x30
 800c816:	2a09      	cmp	r2, #9
 800c818:	d903      	bls.n	800c822 <_svfiprintf_r+0x1a6>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c6      	beq.n	800c7ac <_svfiprintf_r+0x130>
 800c81e:	9105      	str	r1, [sp, #20]
 800c820:	e7c4      	b.n	800c7ac <_svfiprintf_r+0x130>
 800c822:	fb0c 2101 	mla	r1, ip, r1, r2
 800c826:	4604      	mov	r4, r0
 800c828:	2301      	movs	r3, #1
 800c82a:	e7f0      	b.n	800c80e <_svfiprintf_r+0x192>
 800c82c:	ab03      	add	r3, sp, #12
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	462a      	mov	r2, r5
 800c832:	4b0e      	ldr	r3, [pc, #56]	@ (800c86c <_svfiprintf_r+0x1f0>)
 800c834:	a904      	add	r1, sp, #16
 800c836:	4638      	mov	r0, r7
 800c838:	f7fc fb6c 	bl	8008f14 <_printf_float>
 800c83c:	1c42      	adds	r2, r0, #1
 800c83e:	4606      	mov	r6, r0
 800c840:	d1d6      	bne.n	800c7f0 <_svfiprintf_r+0x174>
 800c842:	89ab      	ldrh	r3, [r5, #12]
 800c844:	065b      	lsls	r3, r3, #25
 800c846:	f53f af2d 	bmi.w	800c6a4 <_svfiprintf_r+0x28>
 800c84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c84c:	e72c      	b.n	800c6a8 <_svfiprintf_r+0x2c>
 800c84e:	ab03      	add	r3, sp, #12
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	462a      	mov	r2, r5
 800c854:	4b05      	ldr	r3, [pc, #20]	@ (800c86c <_svfiprintf_r+0x1f0>)
 800c856:	a904      	add	r1, sp, #16
 800c858:	4638      	mov	r0, r7
 800c85a:	f7fc fdf5 	bl	8009448 <_printf_i>
 800c85e:	e7ed      	b.n	800c83c <_svfiprintf_r+0x1c0>
 800c860:	08010371 	.word	0x08010371
 800c864:	0801037b 	.word	0x0801037b
 800c868:	08008f15 	.word	0x08008f15
 800c86c:	0800c5c5 	.word	0x0800c5c5
 800c870:	08010377 	.word	0x08010377

0800c874 <_sungetc_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	1c4b      	adds	r3, r1, #1
 800c878:	4614      	mov	r4, r2
 800c87a:	d103      	bne.n	800c884 <_sungetc_r+0x10>
 800c87c:	f04f 35ff 	mov.w	r5, #4294967295
 800c880:	4628      	mov	r0, r5
 800c882:	bd38      	pop	{r3, r4, r5, pc}
 800c884:	8993      	ldrh	r3, [r2, #12]
 800c886:	f023 0320 	bic.w	r3, r3, #32
 800c88a:	8193      	strh	r3, [r2, #12]
 800c88c:	6853      	ldr	r3, [r2, #4]
 800c88e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c890:	b2cd      	uxtb	r5, r1
 800c892:	b18a      	cbz	r2, 800c8b8 <_sungetc_r+0x44>
 800c894:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c896:	429a      	cmp	r2, r3
 800c898:	dd08      	ble.n	800c8ac <_sungetc_r+0x38>
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	1e5a      	subs	r2, r3, #1
 800c89e:	6022      	str	r2, [r4, #0]
 800c8a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	6063      	str	r3, [r4, #4]
 800c8aa:	e7e9      	b.n	800c880 <_sungetc_r+0xc>
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	f000 fd84 	bl	800d3ba <__submore>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d0f1      	beq.n	800c89a <_sungetc_r+0x26>
 800c8b6:	e7e1      	b.n	800c87c <_sungetc_r+0x8>
 800c8b8:	6921      	ldr	r1, [r4, #16]
 800c8ba:	6822      	ldr	r2, [r4, #0]
 800c8bc:	b141      	cbz	r1, 800c8d0 <_sungetc_r+0x5c>
 800c8be:	4291      	cmp	r1, r2
 800c8c0:	d206      	bcs.n	800c8d0 <_sungetc_r+0x5c>
 800c8c2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c8c6:	42a9      	cmp	r1, r5
 800c8c8:	d102      	bne.n	800c8d0 <_sungetc_r+0x5c>
 800c8ca:	3a01      	subs	r2, #1
 800c8cc:	6022      	str	r2, [r4, #0]
 800c8ce:	e7ea      	b.n	800c8a6 <_sungetc_r+0x32>
 800c8d0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c8d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8da:	2303      	movs	r3, #3
 800c8dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c8de:	4623      	mov	r3, r4
 800c8e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e7de      	b.n	800c8a8 <_sungetc_r+0x34>

0800c8ea <__ssrefill_r>:
 800c8ea:	b510      	push	{r4, lr}
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c8f0:	b169      	cbz	r1, 800c90e <__ssrefill_r+0x24>
 800c8f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8f6:	4299      	cmp	r1, r3
 800c8f8:	d001      	beq.n	800c8fe <__ssrefill_r+0x14>
 800c8fa:	f7fe fa3d 	bl	800ad78 <_free_r>
 800c8fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c900:	6063      	str	r3, [r4, #4]
 800c902:	2000      	movs	r0, #0
 800c904:	6360      	str	r0, [r4, #52]	@ 0x34
 800c906:	b113      	cbz	r3, 800c90e <__ssrefill_r+0x24>
 800c908:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c90a:	6023      	str	r3, [r4, #0]
 800c90c:	bd10      	pop	{r4, pc}
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	2300      	movs	r3, #0
 800c914:	6063      	str	r3, [r4, #4]
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f043 0320 	orr.w	r3, r3, #32
 800c91c:	81a3      	strh	r3, [r4, #12]
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	e7f3      	b.n	800c90c <__ssrefill_r+0x22>

0800c924 <__ssvfiscanf_r>:
 800c924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c928:	460c      	mov	r4, r1
 800c92a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c92e:	2100      	movs	r1, #0
 800c930:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c934:	49a5      	ldr	r1, [pc, #660]	@ (800cbcc <__ssvfiscanf_r+0x2a8>)
 800c936:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c938:	f10d 0804 	add.w	r8, sp, #4
 800c93c:	49a4      	ldr	r1, [pc, #656]	@ (800cbd0 <__ssvfiscanf_r+0x2ac>)
 800c93e:	4fa5      	ldr	r7, [pc, #660]	@ (800cbd4 <__ssvfiscanf_r+0x2b0>)
 800c940:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c944:	4606      	mov	r6, r0
 800c946:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	7813      	ldrb	r3, [r2, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8158 	beq.w	800cc02 <__ssvfiscanf_r+0x2de>
 800c952:	5cf9      	ldrb	r1, [r7, r3]
 800c954:	f011 0108 	ands.w	r1, r1, #8
 800c958:	f102 0501 	add.w	r5, r2, #1
 800c95c:	d019      	beq.n	800c992 <__ssvfiscanf_r+0x6e>
 800c95e:	6863      	ldr	r3, [r4, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	dd0f      	ble.n	800c984 <__ssvfiscanf_r+0x60>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	781a      	ldrb	r2, [r3, #0]
 800c968:	5cba      	ldrb	r2, [r7, r2]
 800c96a:	0712      	lsls	r2, r2, #28
 800c96c:	d401      	bmi.n	800c972 <__ssvfiscanf_r+0x4e>
 800c96e:	462a      	mov	r2, r5
 800c970:	e7eb      	b.n	800c94a <__ssvfiscanf_r+0x26>
 800c972:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c974:	3201      	adds	r2, #1
 800c976:	9245      	str	r2, [sp, #276]	@ 0x114
 800c978:	6862      	ldr	r2, [r4, #4]
 800c97a:	3301      	adds	r3, #1
 800c97c:	3a01      	subs	r2, #1
 800c97e:	6062      	str	r2, [r4, #4]
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	e7ec      	b.n	800c95e <__ssvfiscanf_r+0x3a>
 800c984:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c986:	4621      	mov	r1, r4
 800c988:	4630      	mov	r0, r6
 800c98a:	4798      	blx	r3
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d0e9      	beq.n	800c964 <__ssvfiscanf_r+0x40>
 800c990:	e7ed      	b.n	800c96e <__ssvfiscanf_r+0x4a>
 800c992:	2b25      	cmp	r3, #37	@ 0x25
 800c994:	d012      	beq.n	800c9bc <__ssvfiscanf_r+0x98>
 800c996:	4699      	mov	r9, r3
 800c998:	6863      	ldr	r3, [r4, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f340 8093 	ble.w	800cac6 <__ssvfiscanf_r+0x1a2>
 800c9a0:	6822      	ldr	r2, [r4, #0]
 800c9a2:	7813      	ldrb	r3, [r2, #0]
 800c9a4:	454b      	cmp	r3, r9
 800c9a6:	f040 812c 	bne.w	800cc02 <__ssvfiscanf_r+0x2de>
 800c9aa:	6863      	ldr	r3, [r4, #4]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	6063      	str	r3, [r4, #4]
 800c9b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c9b2:	3201      	adds	r2, #1
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	6022      	str	r2, [r4, #0]
 800c9b8:	9345      	str	r3, [sp, #276]	@ 0x114
 800c9ba:	e7d8      	b.n	800c96e <__ssvfiscanf_r+0x4a>
 800c9bc:	9141      	str	r1, [sp, #260]	@ 0x104
 800c9be:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c9c0:	7853      	ldrb	r3, [r2, #1]
 800c9c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9c4:	bf02      	ittt	eq
 800c9c6:	2310      	moveq	r3, #16
 800c9c8:	1c95      	addeq	r5, r2, #2
 800c9ca:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c9cc:	220a      	movs	r2, #10
 800c9ce:	46a9      	mov	r9, r5
 800c9d0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c9d4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c9d8:	2b09      	cmp	r3, #9
 800c9da:	d91e      	bls.n	800ca1a <__ssvfiscanf_r+0xf6>
 800c9dc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800cbd8 <__ssvfiscanf_r+0x2b4>
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	4650      	mov	r0, sl
 800c9e4:	f7f3 fc04 	bl	80001f0 <memchr>
 800c9e8:	b138      	cbz	r0, 800c9fa <__ssvfiscanf_r+0xd6>
 800c9ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c9ec:	eba0 000a 	sub.w	r0, r0, sl
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	4083      	lsls	r3, r0
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	9341      	str	r3, [sp, #260]	@ 0x104
 800c9f8:	464d      	mov	r5, r9
 800c9fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c9fe:	2b78      	cmp	r3, #120	@ 0x78
 800ca00:	d806      	bhi.n	800ca10 <__ssvfiscanf_r+0xec>
 800ca02:	2b57      	cmp	r3, #87	@ 0x57
 800ca04:	d810      	bhi.n	800ca28 <__ssvfiscanf_r+0x104>
 800ca06:	2b25      	cmp	r3, #37	@ 0x25
 800ca08:	d0c5      	beq.n	800c996 <__ssvfiscanf_r+0x72>
 800ca0a:	d857      	bhi.n	800cabc <__ssvfiscanf_r+0x198>
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d065      	beq.n	800cadc <__ssvfiscanf_r+0x1b8>
 800ca10:	2303      	movs	r3, #3
 800ca12:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ca14:	230a      	movs	r3, #10
 800ca16:	9342      	str	r3, [sp, #264]	@ 0x108
 800ca18:	e078      	b.n	800cb0c <__ssvfiscanf_r+0x1e8>
 800ca1a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ca1c:	fb02 1103 	mla	r1, r2, r3, r1
 800ca20:	3930      	subs	r1, #48	@ 0x30
 800ca22:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ca24:	464d      	mov	r5, r9
 800ca26:	e7d2      	b.n	800c9ce <__ssvfiscanf_r+0xaa>
 800ca28:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ca2c:	2a20      	cmp	r2, #32
 800ca2e:	d8ef      	bhi.n	800ca10 <__ssvfiscanf_r+0xec>
 800ca30:	a101      	add	r1, pc, #4	@ (adr r1, 800ca38 <__ssvfiscanf_r+0x114>)
 800ca32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800caeb 	.word	0x0800caeb
 800ca3c:	0800ca11 	.word	0x0800ca11
 800ca40:	0800ca11 	.word	0x0800ca11
 800ca44:	0800cb45 	.word	0x0800cb45
 800ca48:	0800ca11 	.word	0x0800ca11
 800ca4c:	0800ca11 	.word	0x0800ca11
 800ca50:	0800ca11 	.word	0x0800ca11
 800ca54:	0800ca11 	.word	0x0800ca11
 800ca58:	0800ca11 	.word	0x0800ca11
 800ca5c:	0800ca11 	.word	0x0800ca11
 800ca60:	0800ca11 	.word	0x0800ca11
 800ca64:	0800cb5b 	.word	0x0800cb5b
 800ca68:	0800cb41 	.word	0x0800cb41
 800ca6c:	0800cac3 	.word	0x0800cac3
 800ca70:	0800cac3 	.word	0x0800cac3
 800ca74:	0800cac3 	.word	0x0800cac3
 800ca78:	0800ca11 	.word	0x0800ca11
 800ca7c:	0800cafd 	.word	0x0800cafd
 800ca80:	0800ca11 	.word	0x0800ca11
 800ca84:	0800ca11 	.word	0x0800ca11
 800ca88:	0800ca11 	.word	0x0800ca11
 800ca8c:	0800ca11 	.word	0x0800ca11
 800ca90:	0800cb6b 	.word	0x0800cb6b
 800ca94:	0800cb05 	.word	0x0800cb05
 800ca98:	0800cae3 	.word	0x0800cae3
 800ca9c:	0800ca11 	.word	0x0800ca11
 800caa0:	0800ca11 	.word	0x0800ca11
 800caa4:	0800cb67 	.word	0x0800cb67
 800caa8:	0800ca11 	.word	0x0800ca11
 800caac:	0800cb41 	.word	0x0800cb41
 800cab0:	0800ca11 	.word	0x0800ca11
 800cab4:	0800ca11 	.word	0x0800ca11
 800cab8:	0800caeb 	.word	0x0800caeb
 800cabc:	3b45      	subs	r3, #69	@ 0x45
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d8a6      	bhi.n	800ca10 <__ssvfiscanf_r+0xec>
 800cac2:	2305      	movs	r3, #5
 800cac4:	e021      	b.n	800cb0a <__ssvfiscanf_r+0x1e6>
 800cac6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cac8:	4621      	mov	r1, r4
 800caca:	4630      	mov	r0, r6
 800cacc:	4798      	blx	r3
 800cace:	2800      	cmp	r0, #0
 800cad0:	f43f af66 	beq.w	800c9a0 <__ssvfiscanf_r+0x7c>
 800cad4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f040 808b 	bne.w	800cbf2 <__ssvfiscanf_r+0x2ce>
 800cadc:	f04f 30ff 	mov.w	r0, #4294967295
 800cae0:	e08b      	b.n	800cbfa <__ssvfiscanf_r+0x2d6>
 800cae2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cae4:	f042 0220 	orr.w	r2, r2, #32
 800cae8:	9241      	str	r2, [sp, #260]	@ 0x104
 800caea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800caec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800caf0:	9241      	str	r2, [sp, #260]	@ 0x104
 800caf2:	2210      	movs	r2, #16
 800caf4:	2b6e      	cmp	r3, #110	@ 0x6e
 800caf6:	9242      	str	r2, [sp, #264]	@ 0x108
 800caf8:	d902      	bls.n	800cb00 <__ssvfiscanf_r+0x1dc>
 800cafa:	e005      	b.n	800cb08 <__ssvfiscanf_r+0x1e4>
 800cafc:	2300      	movs	r3, #0
 800cafe:	9342      	str	r3, [sp, #264]	@ 0x108
 800cb00:	2303      	movs	r3, #3
 800cb02:	e002      	b.n	800cb0a <__ssvfiscanf_r+0x1e6>
 800cb04:	2308      	movs	r3, #8
 800cb06:	9342      	str	r3, [sp, #264]	@ 0x108
 800cb08:	2304      	movs	r3, #4
 800cb0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cb0c:	6863      	ldr	r3, [r4, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dd39      	ble.n	800cb86 <__ssvfiscanf_r+0x262>
 800cb12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cb14:	0659      	lsls	r1, r3, #25
 800cb16:	d404      	bmi.n	800cb22 <__ssvfiscanf_r+0x1fe>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	781a      	ldrb	r2, [r3, #0]
 800cb1c:	5cba      	ldrb	r2, [r7, r2]
 800cb1e:	0712      	lsls	r2, r2, #28
 800cb20:	d438      	bmi.n	800cb94 <__ssvfiscanf_r+0x270>
 800cb22:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	dc47      	bgt.n	800cbb8 <__ssvfiscanf_r+0x294>
 800cb28:	466b      	mov	r3, sp
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	a941      	add	r1, sp, #260	@ 0x104
 800cb2e:	4630      	mov	r0, r6
 800cb30:	f000 f9ae 	bl	800ce90 <_scanf_chars>
 800cb34:	2801      	cmp	r0, #1
 800cb36:	d064      	beq.n	800cc02 <__ssvfiscanf_r+0x2de>
 800cb38:	2802      	cmp	r0, #2
 800cb3a:	f47f af18 	bne.w	800c96e <__ssvfiscanf_r+0x4a>
 800cb3e:	e7c9      	b.n	800cad4 <__ssvfiscanf_r+0x1b0>
 800cb40:	220a      	movs	r2, #10
 800cb42:	e7d7      	b.n	800caf4 <__ssvfiscanf_r+0x1d0>
 800cb44:	4629      	mov	r1, r5
 800cb46:	4640      	mov	r0, r8
 800cb48:	f000 fbfe 	bl	800d348 <__sccl>
 800cb4c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cb4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb52:	9341      	str	r3, [sp, #260]	@ 0x104
 800cb54:	4605      	mov	r5, r0
 800cb56:	2301      	movs	r3, #1
 800cb58:	e7d7      	b.n	800cb0a <__ssvfiscanf_r+0x1e6>
 800cb5a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cb5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb60:	9341      	str	r3, [sp, #260]	@ 0x104
 800cb62:	2300      	movs	r3, #0
 800cb64:	e7d1      	b.n	800cb0a <__ssvfiscanf_r+0x1e6>
 800cb66:	2302      	movs	r3, #2
 800cb68:	e7cf      	b.n	800cb0a <__ssvfiscanf_r+0x1e6>
 800cb6a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800cb6c:	06c3      	lsls	r3, r0, #27
 800cb6e:	f53f aefe 	bmi.w	800c96e <__ssvfiscanf_r+0x4a>
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800cb76:	1d19      	adds	r1, r3, #4
 800cb78:	9100      	str	r1, [sp, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	07c0      	lsls	r0, r0, #31
 800cb7e:	bf4c      	ite	mi
 800cb80:	801a      	strhmi	r2, [r3, #0]
 800cb82:	601a      	strpl	r2, [r3, #0]
 800cb84:	e6f3      	b.n	800c96e <__ssvfiscanf_r+0x4a>
 800cb86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	4798      	blx	r3
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0bf      	beq.n	800cb12 <__ssvfiscanf_r+0x1ee>
 800cb92:	e79f      	b.n	800cad4 <__ssvfiscanf_r+0x1b0>
 800cb94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800cb96:	3201      	adds	r2, #1
 800cb98:	9245      	str	r2, [sp, #276]	@ 0x114
 800cb9a:	6862      	ldr	r2, [r4, #4]
 800cb9c:	3a01      	subs	r2, #1
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	6062      	str	r2, [r4, #4]
 800cba2:	dd02      	ble.n	800cbaa <__ssvfiscanf_r+0x286>
 800cba4:	3301      	adds	r3, #1
 800cba6:	6023      	str	r3, [r4, #0]
 800cba8:	e7b6      	b.n	800cb18 <__ssvfiscanf_r+0x1f4>
 800cbaa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cbac:	4621      	mov	r1, r4
 800cbae:	4630      	mov	r0, r6
 800cbb0:	4798      	blx	r3
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d0b0      	beq.n	800cb18 <__ssvfiscanf_r+0x1f4>
 800cbb6:	e78d      	b.n	800cad4 <__ssvfiscanf_r+0x1b0>
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	dc0f      	bgt.n	800cbdc <__ssvfiscanf_r+0x2b8>
 800cbbc:	466b      	mov	r3, sp
 800cbbe:	4622      	mov	r2, r4
 800cbc0:	a941      	add	r1, sp, #260	@ 0x104
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	f000 f9be 	bl	800cf44 <_scanf_i>
 800cbc8:	e7b4      	b.n	800cb34 <__ssvfiscanf_r+0x210>
 800cbca:	bf00      	nop
 800cbcc:	0800c875 	.word	0x0800c875
 800cbd0:	0800c8eb 	.word	0x0800c8eb
 800cbd4:	08010271 	.word	0x08010271
 800cbd8:	08010377 	.word	0x08010377
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	@ (800cc08 <__ssvfiscanf_r+0x2e4>)
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f43f aec5 	beq.w	800c96e <__ssvfiscanf_r+0x4a>
 800cbe4:	466b      	mov	r3, sp
 800cbe6:	4622      	mov	r2, r4
 800cbe8:	a941      	add	r1, sp, #260	@ 0x104
 800cbea:	4630      	mov	r0, r6
 800cbec:	f7fc fd4c 	bl	8009688 <_scanf_float>
 800cbf0:	e7a0      	b.n	800cb34 <__ssvfiscanf_r+0x210>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	065b      	lsls	r3, r3, #25
 800cbf6:	f53f af71 	bmi.w	800cadc <__ssvfiscanf_r+0x1b8>
 800cbfa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc02:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cc04:	e7f9      	b.n	800cbfa <__ssvfiscanf_r+0x2d6>
 800cc06:	bf00      	nop
 800cc08:	08009689 	.word	0x08009689

0800cc0c <__sfputc_r>:
 800cc0c:	6893      	ldr	r3, [r2, #8]
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	b410      	push	{r4}
 800cc14:	6093      	str	r3, [r2, #8]
 800cc16:	da08      	bge.n	800cc2a <__sfputc_r+0x1e>
 800cc18:	6994      	ldr	r4, [r2, #24]
 800cc1a:	42a3      	cmp	r3, r4
 800cc1c:	db01      	blt.n	800cc22 <__sfputc_r+0x16>
 800cc1e:	290a      	cmp	r1, #10
 800cc20:	d103      	bne.n	800cc2a <__sfputc_r+0x1e>
 800cc22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc26:	f7fd b932 	b.w	8009e8e <__swbuf_r>
 800cc2a:	6813      	ldr	r3, [r2, #0]
 800cc2c:	1c58      	adds	r0, r3, #1
 800cc2e:	6010      	str	r0, [r2, #0]
 800cc30:	7019      	strb	r1, [r3, #0]
 800cc32:	4608      	mov	r0, r1
 800cc34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <__sfputs_r>:
 800cc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	460f      	mov	r7, r1
 800cc40:	4614      	mov	r4, r2
 800cc42:	18d5      	adds	r5, r2, r3
 800cc44:	42ac      	cmp	r4, r5
 800cc46:	d101      	bne.n	800cc4c <__sfputs_r+0x12>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	e007      	b.n	800cc5c <__sfputs_r+0x22>
 800cc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc50:	463a      	mov	r2, r7
 800cc52:	4630      	mov	r0, r6
 800cc54:	f7ff ffda 	bl	800cc0c <__sfputc_r>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d1f3      	bne.n	800cc44 <__sfputs_r+0xa>
 800cc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc60 <_vfiprintf_r>:
 800cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc64:	460d      	mov	r5, r1
 800cc66:	b09d      	sub	sp, #116	@ 0x74
 800cc68:	4614      	mov	r4, r2
 800cc6a:	4698      	mov	r8, r3
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	b118      	cbz	r0, 800cc78 <_vfiprintf_r+0x18>
 800cc70:	6a03      	ldr	r3, [r0, #32]
 800cc72:	b90b      	cbnz	r3, 800cc78 <_vfiprintf_r+0x18>
 800cc74:	f7fc ffa2 	bl	8009bbc <__sinit>
 800cc78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc7a:	07d9      	lsls	r1, r3, #31
 800cc7c:	d405      	bmi.n	800cc8a <_vfiprintf_r+0x2a>
 800cc7e:	89ab      	ldrh	r3, [r5, #12]
 800cc80:	059a      	lsls	r2, r3, #22
 800cc82:	d402      	bmi.n	800cc8a <_vfiprintf_r+0x2a>
 800cc84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc86:	f7fd fa14 	bl	800a0b2 <__retarget_lock_acquire_recursive>
 800cc8a:	89ab      	ldrh	r3, [r5, #12]
 800cc8c:	071b      	lsls	r3, r3, #28
 800cc8e:	d501      	bpl.n	800cc94 <_vfiprintf_r+0x34>
 800cc90:	692b      	ldr	r3, [r5, #16]
 800cc92:	b99b      	cbnz	r3, 800ccbc <_vfiprintf_r+0x5c>
 800cc94:	4629      	mov	r1, r5
 800cc96:	4630      	mov	r0, r6
 800cc98:	f7fd f938 	bl	8009f0c <__swsetup_r>
 800cc9c:	b170      	cbz	r0, 800ccbc <_vfiprintf_r+0x5c>
 800cc9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cca0:	07dc      	lsls	r4, r3, #31
 800cca2:	d504      	bpl.n	800ccae <_vfiprintf_r+0x4e>
 800cca4:	f04f 30ff 	mov.w	r0, #4294967295
 800cca8:	b01d      	add	sp, #116	@ 0x74
 800ccaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccae:	89ab      	ldrh	r3, [r5, #12]
 800ccb0:	0598      	lsls	r0, r3, #22
 800ccb2:	d4f7      	bmi.n	800cca4 <_vfiprintf_r+0x44>
 800ccb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccb6:	f7fd f9fd 	bl	800a0b4 <__retarget_lock_release_recursive>
 800ccba:	e7f3      	b.n	800cca4 <_vfiprintf_r+0x44>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccc0:	2320      	movs	r3, #32
 800ccc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccca:	2330      	movs	r3, #48	@ 0x30
 800cccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce7c <_vfiprintf_r+0x21c>
 800ccd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccd4:	f04f 0901 	mov.w	r9, #1
 800ccd8:	4623      	mov	r3, r4
 800ccda:	469a      	mov	sl, r3
 800ccdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cce0:	b10a      	cbz	r2, 800cce6 <_vfiprintf_r+0x86>
 800cce2:	2a25      	cmp	r2, #37	@ 0x25
 800cce4:	d1f9      	bne.n	800ccda <_vfiprintf_r+0x7a>
 800cce6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccea:	d00b      	beq.n	800cd04 <_vfiprintf_r+0xa4>
 800ccec:	465b      	mov	r3, fp
 800ccee:	4622      	mov	r2, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7ff ffa1 	bl	800cc3a <__sfputs_r>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	f000 80a7 	beq.w	800ce4c <_vfiprintf_r+0x1ec>
 800ccfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd00:	445a      	add	r2, fp
 800cd02:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd04:	f89a 3000 	ldrb.w	r3, [sl]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 809f 	beq.w	800ce4c <_vfiprintf_r+0x1ec>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f04f 32ff 	mov.w	r2, #4294967295
 800cd14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd18:	f10a 0a01 	add.w	sl, sl, #1
 800cd1c:	9304      	str	r3, [sp, #16]
 800cd1e:	9307      	str	r3, [sp, #28]
 800cd20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd24:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd26:	4654      	mov	r4, sl
 800cd28:	2205      	movs	r2, #5
 800cd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2e:	4853      	ldr	r0, [pc, #332]	@ (800ce7c <_vfiprintf_r+0x21c>)
 800cd30:	f7f3 fa5e 	bl	80001f0 <memchr>
 800cd34:	9a04      	ldr	r2, [sp, #16]
 800cd36:	b9d8      	cbnz	r0, 800cd70 <_vfiprintf_r+0x110>
 800cd38:	06d1      	lsls	r1, r2, #27
 800cd3a:	bf44      	itt	mi
 800cd3c:	2320      	movmi	r3, #32
 800cd3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd42:	0713      	lsls	r3, r2, #28
 800cd44:	bf44      	itt	mi
 800cd46:	232b      	movmi	r3, #43	@ 0x2b
 800cd48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd50:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd52:	d015      	beq.n	800cd80 <_vfiprintf_r+0x120>
 800cd54:	9a07      	ldr	r2, [sp, #28]
 800cd56:	4654      	mov	r4, sl
 800cd58:	2000      	movs	r0, #0
 800cd5a:	f04f 0c0a 	mov.w	ip, #10
 800cd5e:	4621      	mov	r1, r4
 800cd60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd64:	3b30      	subs	r3, #48	@ 0x30
 800cd66:	2b09      	cmp	r3, #9
 800cd68:	d94b      	bls.n	800ce02 <_vfiprintf_r+0x1a2>
 800cd6a:	b1b0      	cbz	r0, 800cd9a <_vfiprintf_r+0x13a>
 800cd6c:	9207      	str	r2, [sp, #28]
 800cd6e:	e014      	b.n	800cd9a <_vfiprintf_r+0x13a>
 800cd70:	eba0 0308 	sub.w	r3, r0, r8
 800cd74:	fa09 f303 	lsl.w	r3, r9, r3
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	9304      	str	r3, [sp, #16]
 800cd7c:	46a2      	mov	sl, r4
 800cd7e:	e7d2      	b.n	800cd26 <_vfiprintf_r+0xc6>
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	1d19      	adds	r1, r3, #4
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	9103      	str	r1, [sp, #12]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	bfbb      	ittet	lt
 800cd8c:	425b      	neglt	r3, r3
 800cd8e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd92:	9307      	strge	r3, [sp, #28]
 800cd94:	9307      	strlt	r3, [sp, #28]
 800cd96:	bfb8      	it	lt
 800cd98:	9204      	strlt	r2, [sp, #16]
 800cd9a:	7823      	ldrb	r3, [r4, #0]
 800cd9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd9e:	d10a      	bne.n	800cdb6 <_vfiprintf_r+0x156>
 800cda0:	7863      	ldrb	r3, [r4, #1]
 800cda2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cda4:	d132      	bne.n	800ce0c <_vfiprintf_r+0x1ac>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	1d1a      	adds	r2, r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	9203      	str	r2, [sp, #12]
 800cdae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdb2:	3402      	adds	r4, #2
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce8c <_vfiprintf_r+0x22c>
 800cdba:	7821      	ldrb	r1, [r4, #0]
 800cdbc:	2203      	movs	r2, #3
 800cdbe:	4650      	mov	r0, sl
 800cdc0:	f7f3 fa16 	bl	80001f0 <memchr>
 800cdc4:	b138      	cbz	r0, 800cdd6 <_vfiprintf_r+0x176>
 800cdc6:	9b04      	ldr	r3, [sp, #16]
 800cdc8:	eba0 000a 	sub.w	r0, r0, sl
 800cdcc:	2240      	movs	r2, #64	@ 0x40
 800cdce:	4082      	lsls	r2, r0
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	3401      	adds	r4, #1
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdda:	4829      	ldr	r0, [pc, #164]	@ (800ce80 <_vfiprintf_r+0x220>)
 800cddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cde0:	2206      	movs	r2, #6
 800cde2:	f7f3 fa05 	bl	80001f0 <memchr>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d03f      	beq.n	800ce6a <_vfiprintf_r+0x20a>
 800cdea:	4b26      	ldr	r3, [pc, #152]	@ (800ce84 <_vfiprintf_r+0x224>)
 800cdec:	bb1b      	cbnz	r3, 800ce36 <_vfiprintf_r+0x1d6>
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	3307      	adds	r3, #7
 800cdf2:	f023 0307 	bic.w	r3, r3, #7
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	9303      	str	r3, [sp, #12]
 800cdfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdfc:	443b      	add	r3, r7
 800cdfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce00:	e76a      	b.n	800ccd8 <_vfiprintf_r+0x78>
 800ce02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce06:	460c      	mov	r4, r1
 800ce08:	2001      	movs	r0, #1
 800ce0a:	e7a8      	b.n	800cd5e <_vfiprintf_r+0xfe>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	3401      	adds	r4, #1
 800ce10:	9305      	str	r3, [sp, #20]
 800ce12:	4619      	mov	r1, r3
 800ce14:	f04f 0c0a 	mov.w	ip, #10
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce1e:	3a30      	subs	r2, #48	@ 0x30
 800ce20:	2a09      	cmp	r2, #9
 800ce22:	d903      	bls.n	800ce2c <_vfiprintf_r+0x1cc>
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0c6      	beq.n	800cdb6 <_vfiprintf_r+0x156>
 800ce28:	9105      	str	r1, [sp, #20]
 800ce2a:	e7c4      	b.n	800cdb6 <_vfiprintf_r+0x156>
 800ce2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce30:	4604      	mov	r4, r0
 800ce32:	2301      	movs	r3, #1
 800ce34:	e7f0      	b.n	800ce18 <_vfiprintf_r+0x1b8>
 800ce36:	ab03      	add	r3, sp, #12
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	4b12      	ldr	r3, [pc, #72]	@ (800ce88 <_vfiprintf_r+0x228>)
 800ce3e:	a904      	add	r1, sp, #16
 800ce40:	4630      	mov	r0, r6
 800ce42:	f7fc f867 	bl	8008f14 <_printf_float>
 800ce46:	4607      	mov	r7, r0
 800ce48:	1c78      	adds	r0, r7, #1
 800ce4a:	d1d6      	bne.n	800cdfa <_vfiprintf_r+0x19a>
 800ce4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce4e:	07d9      	lsls	r1, r3, #31
 800ce50:	d405      	bmi.n	800ce5e <_vfiprintf_r+0x1fe>
 800ce52:	89ab      	ldrh	r3, [r5, #12]
 800ce54:	059a      	lsls	r2, r3, #22
 800ce56:	d402      	bmi.n	800ce5e <_vfiprintf_r+0x1fe>
 800ce58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce5a:	f7fd f92b 	bl	800a0b4 <__retarget_lock_release_recursive>
 800ce5e:	89ab      	ldrh	r3, [r5, #12]
 800ce60:	065b      	lsls	r3, r3, #25
 800ce62:	f53f af1f 	bmi.w	800cca4 <_vfiprintf_r+0x44>
 800ce66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce68:	e71e      	b.n	800cca8 <_vfiprintf_r+0x48>
 800ce6a:	ab03      	add	r3, sp, #12
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	462a      	mov	r2, r5
 800ce70:	4b05      	ldr	r3, [pc, #20]	@ (800ce88 <_vfiprintf_r+0x228>)
 800ce72:	a904      	add	r1, sp, #16
 800ce74:	4630      	mov	r0, r6
 800ce76:	f7fc fae7 	bl	8009448 <_printf_i>
 800ce7a:	e7e4      	b.n	800ce46 <_vfiprintf_r+0x1e6>
 800ce7c:	08010371 	.word	0x08010371
 800ce80:	0801037b 	.word	0x0801037b
 800ce84:	08008f15 	.word	0x08008f15
 800ce88:	0800cc3b 	.word	0x0800cc3b
 800ce8c:	08010377 	.word	0x08010377

0800ce90 <_scanf_chars>:
 800ce90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce94:	4615      	mov	r5, r2
 800ce96:	688a      	ldr	r2, [r1, #8]
 800ce98:	4680      	mov	r8, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	b932      	cbnz	r2, 800ceac <_scanf_chars+0x1c>
 800ce9e:	698a      	ldr	r2, [r1, #24]
 800cea0:	2a00      	cmp	r2, #0
 800cea2:	bf14      	ite	ne
 800cea4:	f04f 32ff 	movne.w	r2, #4294967295
 800cea8:	2201      	moveq	r2, #1
 800ceaa:	608a      	str	r2, [r1, #8]
 800ceac:	6822      	ldr	r2, [r4, #0]
 800ceae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800cf40 <_scanf_chars+0xb0>
 800ceb2:	06d1      	lsls	r1, r2, #27
 800ceb4:	bf5f      	itttt	pl
 800ceb6:	681a      	ldrpl	r2, [r3, #0]
 800ceb8:	1d11      	addpl	r1, r2, #4
 800ceba:	6019      	strpl	r1, [r3, #0]
 800cebc:	6816      	ldrpl	r6, [r2, #0]
 800cebe:	2700      	movs	r7, #0
 800cec0:	69a0      	ldr	r0, [r4, #24]
 800cec2:	b188      	cbz	r0, 800cee8 <_scanf_chars+0x58>
 800cec4:	2801      	cmp	r0, #1
 800cec6:	d107      	bne.n	800ced8 <_scanf_chars+0x48>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	781a      	ldrb	r2, [r3, #0]
 800cecc:	6963      	ldr	r3, [r4, #20]
 800cece:	5c9b      	ldrb	r3, [r3, r2]
 800ced0:	b953      	cbnz	r3, 800cee8 <_scanf_chars+0x58>
 800ced2:	2f00      	cmp	r7, #0
 800ced4:	d031      	beq.n	800cf3a <_scanf_chars+0xaa>
 800ced6:	e022      	b.n	800cf1e <_scanf_chars+0x8e>
 800ced8:	2802      	cmp	r0, #2
 800ceda:	d120      	bne.n	800cf1e <_scanf_chars+0x8e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cee4:	071b      	lsls	r3, r3, #28
 800cee6:	d41a      	bmi.n	800cf1e <_scanf_chars+0x8e>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	06da      	lsls	r2, r3, #27
 800ceec:	bf5e      	ittt	pl
 800ceee:	682b      	ldrpl	r3, [r5, #0]
 800cef0:	781b      	ldrbpl	r3, [r3, #0]
 800cef2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cef6:	682a      	ldr	r2, [r5, #0]
 800cef8:	686b      	ldr	r3, [r5, #4]
 800cefa:	3201      	adds	r2, #1
 800cefc:	602a      	str	r2, [r5, #0]
 800cefe:	68a2      	ldr	r2, [r4, #8]
 800cf00:	3b01      	subs	r3, #1
 800cf02:	3a01      	subs	r2, #1
 800cf04:	606b      	str	r3, [r5, #4]
 800cf06:	3701      	adds	r7, #1
 800cf08:	60a2      	str	r2, [r4, #8]
 800cf0a:	b142      	cbz	r2, 800cf1e <_scanf_chars+0x8e>
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dcd7      	bgt.n	800cec0 <_scanf_chars+0x30>
 800cf10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cf14:	4629      	mov	r1, r5
 800cf16:	4640      	mov	r0, r8
 800cf18:	4798      	blx	r3
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d0d0      	beq.n	800cec0 <_scanf_chars+0x30>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	f013 0310 	ands.w	r3, r3, #16
 800cf24:	d105      	bne.n	800cf32 <_scanf_chars+0xa2>
 800cf26:	68e2      	ldr	r2, [r4, #12]
 800cf28:	3201      	adds	r2, #1
 800cf2a:	60e2      	str	r2, [r4, #12]
 800cf2c:	69a2      	ldr	r2, [r4, #24]
 800cf2e:	b102      	cbz	r2, 800cf32 <_scanf_chars+0xa2>
 800cf30:	7033      	strb	r3, [r6, #0]
 800cf32:	6923      	ldr	r3, [r4, #16]
 800cf34:	443b      	add	r3, r7
 800cf36:	6123      	str	r3, [r4, #16]
 800cf38:	2000      	movs	r0, #0
 800cf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf3e:	bf00      	nop
 800cf40:	08010271 	.word	0x08010271

0800cf44 <_scanf_i>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	4698      	mov	r8, r3
 800cf4a:	4b74      	ldr	r3, [pc, #464]	@ (800d11c <_scanf_i+0x1d8>)
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	4682      	mov	sl, r0
 800cf50:	4616      	mov	r6, r2
 800cf52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf56:	b087      	sub	sp, #28
 800cf58:	ab03      	add	r3, sp, #12
 800cf5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf5e:	4b70      	ldr	r3, [pc, #448]	@ (800d120 <_scanf_i+0x1dc>)
 800cf60:	69a1      	ldr	r1, [r4, #24]
 800cf62:	4a70      	ldr	r2, [pc, #448]	@ (800d124 <_scanf_i+0x1e0>)
 800cf64:	2903      	cmp	r1, #3
 800cf66:	bf08      	it	eq
 800cf68:	461a      	moveq	r2, r3
 800cf6a:	68a3      	ldr	r3, [r4, #8]
 800cf6c:	9201      	str	r2, [sp, #4]
 800cf6e:	1e5a      	subs	r2, r3, #1
 800cf70:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cf74:	bf88      	it	hi
 800cf76:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cf7a:	4627      	mov	r7, r4
 800cf7c:	bf82      	ittt	hi
 800cf7e:	eb03 0905 	addhi.w	r9, r3, r5
 800cf82:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cf86:	60a3      	strhi	r3, [r4, #8]
 800cf88:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cf8c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800cf90:	bf98      	it	ls
 800cf92:	f04f 0900 	movls.w	r9, #0
 800cf96:	6023      	str	r3, [r4, #0]
 800cf98:	463d      	mov	r5, r7
 800cf9a:	f04f 0b00 	mov.w	fp, #0
 800cf9e:	6831      	ldr	r1, [r6, #0]
 800cfa0:	ab03      	add	r3, sp, #12
 800cfa2:	7809      	ldrb	r1, [r1, #0]
 800cfa4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	f7f3 f921 	bl	80001f0 <memchr>
 800cfae:	b328      	cbz	r0, 800cffc <_scanf_i+0xb8>
 800cfb0:	f1bb 0f01 	cmp.w	fp, #1
 800cfb4:	d159      	bne.n	800d06a <_scanf_i+0x126>
 800cfb6:	6862      	ldr	r2, [r4, #4]
 800cfb8:	b92a      	cbnz	r2, 800cfc6 <_scanf_i+0x82>
 800cfba:	6822      	ldr	r2, [r4, #0]
 800cfbc:	2108      	movs	r1, #8
 800cfbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cfc2:	6061      	str	r1, [r4, #4]
 800cfc4:	6022      	str	r2, [r4, #0]
 800cfc6:	6822      	ldr	r2, [r4, #0]
 800cfc8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800cfcc:	6022      	str	r2, [r4, #0]
 800cfce:	68a2      	ldr	r2, [r4, #8]
 800cfd0:	1e51      	subs	r1, r2, #1
 800cfd2:	60a1      	str	r1, [r4, #8]
 800cfd4:	b192      	cbz	r2, 800cffc <_scanf_i+0xb8>
 800cfd6:	6832      	ldr	r2, [r6, #0]
 800cfd8:	1c51      	adds	r1, r2, #1
 800cfda:	6031      	str	r1, [r6, #0]
 800cfdc:	7812      	ldrb	r2, [r2, #0]
 800cfde:	f805 2b01 	strb.w	r2, [r5], #1
 800cfe2:	6872      	ldr	r2, [r6, #4]
 800cfe4:	3a01      	subs	r2, #1
 800cfe6:	2a00      	cmp	r2, #0
 800cfe8:	6072      	str	r2, [r6, #4]
 800cfea:	dc07      	bgt.n	800cffc <_scanf_i+0xb8>
 800cfec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800cff0:	4631      	mov	r1, r6
 800cff2:	4650      	mov	r0, sl
 800cff4:	4790      	blx	r2
 800cff6:	2800      	cmp	r0, #0
 800cff8:	f040 8085 	bne.w	800d106 <_scanf_i+0x1c2>
 800cffc:	f10b 0b01 	add.w	fp, fp, #1
 800d000:	f1bb 0f03 	cmp.w	fp, #3
 800d004:	d1cb      	bne.n	800cf9e <_scanf_i+0x5a>
 800d006:	6863      	ldr	r3, [r4, #4]
 800d008:	b90b      	cbnz	r3, 800d00e <_scanf_i+0xca>
 800d00a:	230a      	movs	r3, #10
 800d00c:	6063      	str	r3, [r4, #4]
 800d00e:	6863      	ldr	r3, [r4, #4]
 800d010:	4945      	ldr	r1, [pc, #276]	@ (800d128 <_scanf_i+0x1e4>)
 800d012:	6960      	ldr	r0, [r4, #20]
 800d014:	1ac9      	subs	r1, r1, r3
 800d016:	f000 f997 	bl	800d348 <__sccl>
 800d01a:	f04f 0b00 	mov.w	fp, #0
 800d01e:	68a3      	ldr	r3, [r4, #8]
 800d020:	6822      	ldr	r2, [r4, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d03d      	beq.n	800d0a2 <_scanf_i+0x15e>
 800d026:	6831      	ldr	r1, [r6, #0]
 800d028:	6960      	ldr	r0, [r4, #20]
 800d02a:	f891 c000 	ldrb.w	ip, [r1]
 800d02e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d032:	2800      	cmp	r0, #0
 800d034:	d035      	beq.n	800d0a2 <_scanf_i+0x15e>
 800d036:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d03a:	d124      	bne.n	800d086 <_scanf_i+0x142>
 800d03c:	0510      	lsls	r0, r2, #20
 800d03e:	d522      	bpl.n	800d086 <_scanf_i+0x142>
 800d040:	f10b 0b01 	add.w	fp, fp, #1
 800d044:	f1b9 0f00 	cmp.w	r9, #0
 800d048:	d003      	beq.n	800d052 <_scanf_i+0x10e>
 800d04a:	3301      	adds	r3, #1
 800d04c:	f109 39ff 	add.w	r9, r9, #4294967295
 800d050:	60a3      	str	r3, [r4, #8]
 800d052:	6873      	ldr	r3, [r6, #4]
 800d054:	3b01      	subs	r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	6073      	str	r3, [r6, #4]
 800d05a:	dd1b      	ble.n	800d094 <_scanf_i+0x150>
 800d05c:	6833      	ldr	r3, [r6, #0]
 800d05e:	3301      	adds	r3, #1
 800d060:	6033      	str	r3, [r6, #0]
 800d062:	68a3      	ldr	r3, [r4, #8]
 800d064:	3b01      	subs	r3, #1
 800d066:	60a3      	str	r3, [r4, #8]
 800d068:	e7d9      	b.n	800d01e <_scanf_i+0xda>
 800d06a:	f1bb 0f02 	cmp.w	fp, #2
 800d06e:	d1ae      	bne.n	800cfce <_scanf_i+0x8a>
 800d070:	6822      	ldr	r2, [r4, #0]
 800d072:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d076:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d07a:	d1bf      	bne.n	800cffc <_scanf_i+0xb8>
 800d07c:	2110      	movs	r1, #16
 800d07e:	6061      	str	r1, [r4, #4]
 800d080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d084:	e7a2      	b.n	800cfcc <_scanf_i+0x88>
 800d086:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d08a:	6022      	str	r2, [r4, #0]
 800d08c:	780b      	ldrb	r3, [r1, #0]
 800d08e:	f805 3b01 	strb.w	r3, [r5], #1
 800d092:	e7de      	b.n	800d052 <_scanf_i+0x10e>
 800d094:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d098:	4631      	mov	r1, r6
 800d09a:	4650      	mov	r0, sl
 800d09c:	4798      	blx	r3
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d0df      	beq.n	800d062 <_scanf_i+0x11e>
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	05d9      	lsls	r1, r3, #23
 800d0a6:	d50d      	bpl.n	800d0c4 <_scanf_i+0x180>
 800d0a8:	42bd      	cmp	r5, r7
 800d0aa:	d909      	bls.n	800d0c0 <_scanf_i+0x17c>
 800d0ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d0b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d0b4:	4632      	mov	r2, r6
 800d0b6:	4650      	mov	r0, sl
 800d0b8:	4798      	blx	r3
 800d0ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800d0be:	464d      	mov	r5, r9
 800d0c0:	42bd      	cmp	r5, r7
 800d0c2:	d028      	beq.n	800d116 <_scanf_i+0x1d2>
 800d0c4:	6822      	ldr	r2, [r4, #0]
 800d0c6:	f012 0210 	ands.w	r2, r2, #16
 800d0ca:	d113      	bne.n	800d0f4 <_scanf_i+0x1b0>
 800d0cc:	702a      	strb	r2, [r5, #0]
 800d0ce:	6863      	ldr	r3, [r4, #4]
 800d0d0:	9e01      	ldr	r6, [sp, #4]
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	4650      	mov	r0, sl
 800d0d6:	47b0      	blx	r6
 800d0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800d0dc:	6821      	ldr	r1, [r4, #0]
 800d0de:	1d1a      	adds	r2, r3, #4
 800d0e0:	f8c8 2000 	str.w	r2, [r8]
 800d0e4:	f011 0f20 	tst.w	r1, #32
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	d00f      	beq.n	800d10c <_scanf_i+0x1c8>
 800d0ec:	6018      	str	r0, [r3, #0]
 800d0ee:	68e3      	ldr	r3, [r4, #12]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	60e3      	str	r3, [r4, #12]
 800d0f4:	6923      	ldr	r3, [r4, #16]
 800d0f6:	1bed      	subs	r5, r5, r7
 800d0f8:	445d      	add	r5, fp
 800d0fa:	442b      	add	r3, r5
 800d0fc:	6123      	str	r3, [r4, #16]
 800d0fe:	2000      	movs	r0, #0
 800d100:	b007      	add	sp, #28
 800d102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d106:	f04f 0b00 	mov.w	fp, #0
 800d10a:	e7ca      	b.n	800d0a2 <_scanf_i+0x15e>
 800d10c:	07ca      	lsls	r2, r1, #31
 800d10e:	bf4c      	ite	mi
 800d110:	8018      	strhmi	r0, [r3, #0]
 800d112:	6018      	strpl	r0, [r3, #0]
 800d114:	e7eb      	b.n	800d0ee <_scanf_i+0x1aa>
 800d116:	2001      	movs	r0, #1
 800d118:	e7f2      	b.n	800d100 <_scanf_i+0x1bc>
 800d11a:	bf00      	nop
 800d11c:	0800deb8 	.word	0x0800deb8
 800d120:	0800c5c1 	.word	0x0800c5c1
 800d124:	0800dd2d 	.word	0x0800dd2d
 800d128:	08010392 	.word	0x08010392

0800d12c <__sflush_r>:
 800d12c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d134:	0716      	lsls	r6, r2, #28
 800d136:	4605      	mov	r5, r0
 800d138:	460c      	mov	r4, r1
 800d13a:	d454      	bmi.n	800d1e6 <__sflush_r+0xba>
 800d13c:	684b      	ldr	r3, [r1, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	dc02      	bgt.n	800d148 <__sflush_r+0x1c>
 800d142:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d144:	2b00      	cmp	r3, #0
 800d146:	dd48      	ble.n	800d1da <__sflush_r+0xae>
 800d148:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d14a:	2e00      	cmp	r6, #0
 800d14c:	d045      	beq.n	800d1da <__sflush_r+0xae>
 800d14e:	2300      	movs	r3, #0
 800d150:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d154:	682f      	ldr	r7, [r5, #0]
 800d156:	6a21      	ldr	r1, [r4, #32]
 800d158:	602b      	str	r3, [r5, #0]
 800d15a:	d030      	beq.n	800d1be <__sflush_r+0x92>
 800d15c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	0759      	lsls	r1, r3, #29
 800d162:	d505      	bpl.n	800d170 <__sflush_r+0x44>
 800d164:	6863      	ldr	r3, [r4, #4]
 800d166:	1ad2      	subs	r2, r2, r3
 800d168:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d16a:	b10b      	cbz	r3, 800d170 <__sflush_r+0x44>
 800d16c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d16e:	1ad2      	subs	r2, r2, r3
 800d170:	2300      	movs	r3, #0
 800d172:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d174:	6a21      	ldr	r1, [r4, #32]
 800d176:	4628      	mov	r0, r5
 800d178:	47b0      	blx	r6
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	d106      	bne.n	800d18e <__sflush_r+0x62>
 800d180:	6829      	ldr	r1, [r5, #0]
 800d182:	291d      	cmp	r1, #29
 800d184:	d82b      	bhi.n	800d1de <__sflush_r+0xb2>
 800d186:	4a2a      	ldr	r2, [pc, #168]	@ (800d230 <__sflush_r+0x104>)
 800d188:	410a      	asrs	r2, r1
 800d18a:	07d6      	lsls	r6, r2, #31
 800d18c:	d427      	bmi.n	800d1de <__sflush_r+0xb2>
 800d18e:	2200      	movs	r2, #0
 800d190:	6062      	str	r2, [r4, #4]
 800d192:	04d9      	lsls	r1, r3, #19
 800d194:	6922      	ldr	r2, [r4, #16]
 800d196:	6022      	str	r2, [r4, #0]
 800d198:	d504      	bpl.n	800d1a4 <__sflush_r+0x78>
 800d19a:	1c42      	adds	r2, r0, #1
 800d19c:	d101      	bne.n	800d1a2 <__sflush_r+0x76>
 800d19e:	682b      	ldr	r3, [r5, #0]
 800d1a0:	b903      	cbnz	r3, 800d1a4 <__sflush_r+0x78>
 800d1a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1a6:	602f      	str	r7, [r5, #0]
 800d1a8:	b1b9      	cbz	r1, 800d1da <__sflush_r+0xae>
 800d1aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1ae:	4299      	cmp	r1, r3
 800d1b0:	d002      	beq.n	800d1b8 <__sflush_r+0x8c>
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	f7fd fde0 	bl	800ad78 <_free_r>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1bc:	e00d      	b.n	800d1da <__sflush_r+0xae>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	47b0      	blx	r6
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	1c50      	adds	r0, r2, #1
 800d1c8:	d1c9      	bne.n	800d15e <__sflush_r+0x32>
 800d1ca:	682b      	ldr	r3, [r5, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d0c6      	beq.n	800d15e <__sflush_r+0x32>
 800d1d0:	2b1d      	cmp	r3, #29
 800d1d2:	d001      	beq.n	800d1d8 <__sflush_r+0xac>
 800d1d4:	2b16      	cmp	r3, #22
 800d1d6:	d11e      	bne.n	800d216 <__sflush_r+0xea>
 800d1d8:	602f      	str	r7, [r5, #0]
 800d1da:	2000      	movs	r0, #0
 800d1dc:	e022      	b.n	800d224 <__sflush_r+0xf8>
 800d1de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1e2:	b21b      	sxth	r3, r3
 800d1e4:	e01b      	b.n	800d21e <__sflush_r+0xf2>
 800d1e6:	690f      	ldr	r7, [r1, #16]
 800d1e8:	2f00      	cmp	r7, #0
 800d1ea:	d0f6      	beq.n	800d1da <__sflush_r+0xae>
 800d1ec:	0793      	lsls	r3, r2, #30
 800d1ee:	680e      	ldr	r6, [r1, #0]
 800d1f0:	bf08      	it	eq
 800d1f2:	694b      	ldreq	r3, [r1, #20]
 800d1f4:	600f      	str	r7, [r1, #0]
 800d1f6:	bf18      	it	ne
 800d1f8:	2300      	movne	r3, #0
 800d1fa:	eba6 0807 	sub.w	r8, r6, r7
 800d1fe:	608b      	str	r3, [r1, #8]
 800d200:	f1b8 0f00 	cmp.w	r8, #0
 800d204:	dde9      	ble.n	800d1da <__sflush_r+0xae>
 800d206:	6a21      	ldr	r1, [r4, #32]
 800d208:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d20a:	4643      	mov	r3, r8
 800d20c:	463a      	mov	r2, r7
 800d20e:	4628      	mov	r0, r5
 800d210:	47b0      	blx	r6
 800d212:	2800      	cmp	r0, #0
 800d214:	dc08      	bgt.n	800d228 <__sflush_r+0xfc>
 800d216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d21e:	81a3      	strh	r3, [r4, #12]
 800d220:	f04f 30ff 	mov.w	r0, #4294967295
 800d224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d228:	4407      	add	r7, r0
 800d22a:	eba8 0800 	sub.w	r8, r8, r0
 800d22e:	e7e7      	b.n	800d200 <__sflush_r+0xd4>
 800d230:	dfbffffe 	.word	0xdfbffffe

0800d234 <_fflush_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	690b      	ldr	r3, [r1, #16]
 800d238:	4605      	mov	r5, r0
 800d23a:	460c      	mov	r4, r1
 800d23c:	b913      	cbnz	r3, 800d244 <_fflush_r+0x10>
 800d23e:	2500      	movs	r5, #0
 800d240:	4628      	mov	r0, r5
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	b118      	cbz	r0, 800d24e <_fflush_r+0x1a>
 800d246:	6a03      	ldr	r3, [r0, #32]
 800d248:	b90b      	cbnz	r3, 800d24e <_fflush_r+0x1a>
 800d24a:	f7fc fcb7 	bl	8009bbc <__sinit>
 800d24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d0f3      	beq.n	800d23e <_fflush_r+0xa>
 800d256:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d258:	07d0      	lsls	r0, r2, #31
 800d25a:	d404      	bmi.n	800d266 <_fflush_r+0x32>
 800d25c:	0599      	lsls	r1, r3, #22
 800d25e:	d402      	bmi.n	800d266 <_fflush_r+0x32>
 800d260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d262:	f7fc ff26 	bl	800a0b2 <__retarget_lock_acquire_recursive>
 800d266:	4628      	mov	r0, r5
 800d268:	4621      	mov	r1, r4
 800d26a:	f7ff ff5f 	bl	800d12c <__sflush_r>
 800d26e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d270:	07da      	lsls	r2, r3, #31
 800d272:	4605      	mov	r5, r0
 800d274:	d4e4      	bmi.n	800d240 <_fflush_r+0xc>
 800d276:	89a3      	ldrh	r3, [r4, #12]
 800d278:	059b      	lsls	r3, r3, #22
 800d27a:	d4e1      	bmi.n	800d240 <_fflush_r+0xc>
 800d27c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d27e:	f7fc ff19 	bl	800a0b4 <__retarget_lock_release_recursive>
 800d282:	e7dd      	b.n	800d240 <_fflush_r+0xc>

0800d284 <__swhatbuf_r>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	460c      	mov	r4, r1
 800d288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28c:	2900      	cmp	r1, #0
 800d28e:	b096      	sub	sp, #88	@ 0x58
 800d290:	4615      	mov	r5, r2
 800d292:	461e      	mov	r6, r3
 800d294:	da0d      	bge.n	800d2b2 <__swhatbuf_r+0x2e>
 800d296:	89a3      	ldrh	r3, [r4, #12]
 800d298:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d29c:	f04f 0100 	mov.w	r1, #0
 800d2a0:	bf14      	ite	ne
 800d2a2:	2340      	movne	r3, #64	@ 0x40
 800d2a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	6031      	str	r1, [r6, #0]
 800d2ac:	602b      	str	r3, [r5, #0]
 800d2ae:	b016      	add	sp, #88	@ 0x58
 800d2b0:	bd70      	pop	{r4, r5, r6, pc}
 800d2b2:	466a      	mov	r2, sp
 800d2b4:	f000 f8e8 	bl	800d488 <_fstat_r>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	dbec      	blt.n	800d296 <__swhatbuf_r+0x12>
 800d2bc:	9901      	ldr	r1, [sp, #4]
 800d2be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2c6:	4259      	negs	r1, r3
 800d2c8:	4159      	adcs	r1, r3
 800d2ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ce:	e7eb      	b.n	800d2a8 <__swhatbuf_r+0x24>

0800d2d0 <__smakebuf_r>:
 800d2d0:	898b      	ldrh	r3, [r1, #12]
 800d2d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2d4:	079d      	lsls	r5, r3, #30
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	460c      	mov	r4, r1
 800d2da:	d507      	bpl.n	800d2ec <__smakebuf_r+0x1c>
 800d2dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	6123      	str	r3, [r4, #16]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	6163      	str	r3, [r4, #20]
 800d2e8:	b003      	add	sp, #12
 800d2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ec:	ab01      	add	r3, sp, #4
 800d2ee:	466a      	mov	r2, sp
 800d2f0:	f7ff ffc8 	bl	800d284 <__swhatbuf_r>
 800d2f4:	9f00      	ldr	r7, [sp, #0]
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f7fd fdb0 	bl	800ae60 <_malloc_r>
 800d300:	b948      	cbnz	r0, 800d316 <__smakebuf_r+0x46>
 800d302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d306:	059a      	lsls	r2, r3, #22
 800d308:	d4ee      	bmi.n	800d2e8 <__smakebuf_r+0x18>
 800d30a:	f023 0303 	bic.w	r3, r3, #3
 800d30e:	f043 0302 	orr.w	r3, r3, #2
 800d312:	81a3      	strh	r3, [r4, #12]
 800d314:	e7e2      	b.n	800d2dc <__smakebuf_r+0xc>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	6020      	str	r0, [r4, #0]
 800d31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d31e:	81a3      	strh	r3, [r4, #12]
 800d320:	9b01      	ldr	r3, [sp, #4]
 800d322:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d326:	b15b      	cbz	r3, 800d340 <__smakebuf_r+0x70>
 800d328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d32c:	4630      	mov	r0, r6
 800d32e:	f000 f8bd 	bl	800d4ac <_isatty_r>
 800d332:	b128      	cbz	r0, 800d340 <__smakebuf_r+0x70>
 800d334:	89a3      	ldrh	r3, [r4, #12]
 800d336:	f023 0303 	bic.w	r3, r3, #3
 800d33a:	f043 0301 	orr.w	r3, r3, #1
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	431d      	orrs	r5, r3
 800d344:	81a5      	strh	r5, [r4, #12]
 800d346:	e7cf      	b.n	800d2e8 <__smakebuf_r+0x18>

0800d348 <__sccl>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	780b      	ldrb	r3, [r1, #0]
 800d34c:	4604      	mov	r4, r0
 800d34e:	2b5e      	cmp	r3, #94	@ 0x5e
 800d350:	bf0b      	itete	eq
 800d352:	784b      	ldrbeq	r3, [r1, #1]
 800d354:	1c4a      	addne	r2, r1, #1
 800d356:	1c8a      	addeq	r2, r1, #2
 800d358:	2100      	movne	r1, #0
 800d35a:	bf08      	it	eq
 800d35c:	2101      	moveq	r1, #1
 800d35e:	3801      	subs	r0, #1
 800d360:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d364:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d368:	42a8      	cmp	r0, r5
 800d36a:	d1fb      	bne.n	800d364 <__sccl+0x1c>
 800d36c:	b90b      	cbnz	r3, 800d372 <__sccl+0x2a>
 800d36e:	1e50      	subs	r0, r2, #1
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	f081 0101 	eor.w	r1, r1, #1
 800d376:	54e1      	strb	r1, [r4, r3]
 800d378:	4610      	mov	r0, r2
 800d37a:	4602      	mov	r2, r0
 800d37c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d380:	2d2d      	cmp	r5, #45	@ 0x2d
 800d382:	d005      	beq.n	800d390 <__sccl+0x48>
 800d384:	2d5d      	cmp	r5, #93	@ 0x5d
 800d386:	d016      	beq.n	800d3b6 <__sccl+0x6e>
 800d388:	2d00      	cmp	r5, #0
 800d38a:	d0f1      	beq.n	800d370 <__sccl+0x28>
 800d38c:	462b      	mov	r3, r5
 800d38e:	e7f2      	b.n	800d376 <__sccl+0x2e>
 800d390:	7846      	ldrb	r6, [r0, #1]
 800d392:	2e5d      	cmp	r6, #93	@ 0x5d
 800d394:	d0fa      	beq.n	800d38c <__sccl+0x44>
 800d396:	42b3      	cmp	r3, r6
 800d398:	dcf8      	bgt.n	800d38c <__sccl+0x44>
 800d39a:	3002      	adds	r0, #2
 800d39c:	461a      	mov	r2, r3
 800d39e:	3201      	adds	r2, #1
 800d3a0:	4296      	cmp	r6, r2
 800d3a2:	54a1      	strb	r1, [r4, r2]
 800d3a4:	dcfb      	bgt.n	800d39e <__sccl+0x56>
 800d3a6:	1af2      	subs	r2, r6, r3
 800d3a8:	3a01      	subs	r2, #1
 800d3aa:	1c5d      	adds	r5, r3, #1
 800d3ac:	42b3      	cmp	r3, r6
 800d3ae:	bfa8      	it	ge
 800d3b0:	2200      	movge	r2, #0
 800d3b2:	18ab      	adds	r3, r5, r2
 800d3b4:	e7e1      	b.n	800d37a <__sccl+0x32>
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	e7da      	b.n	800d370 <__sccl+0x28>

0800d3ba <__submore>:
 800d3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3be:	460c      	mov	r4, r1
 800d3c0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d3c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3c6:	4299      	cmp	r1, r3
 800d3c8:	d11d      	bne.n	800d406 <__submore+0x4c>
 800d3ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d3ce:	f7fd fd47 	bl	800ae60 <_malloc_r>
 800d3d2:	b918      	cbnz	r0, 800d3dc <__submore+0x22>
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d3e2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d3e6:	6360      	str	r0, [r4, #52]	@ 0x34
 800d3e8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d3ec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d3f0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d3f4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d3f8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d3fc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d400:	6020      	str	r0, [r4, #0]
 800d402:	2000      	movs	r0, #0
 800d404:	e7e8      	b.n	800d3d8 <__submore+0x1e>
 800d406:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d408:	0077      	lsls	r7, r6, #1
 800d40a:	463a      	mov	r2, r7
 800d40c:	f000 fbf1 	bl	800dbf2 <_realloc_r>
 800d410:	4605      	mov	r5, r0
 800d412:	2800      	cmp	r0, #0
 800d414:	d0de      	beq.n	800d3d4 <__submore+0x1a>
 800d416:	eb00 0806 	add.w	r8, r0, r6
 800d41a:	4601      	mov	r1, r0
 800d41c:	4632      	mov	r2, r6
 800d41e:	4640      	mov	r0, r8
 800d420:	f7fc fe49 	bl	800a0b6 <memcpy>
 800d424:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d428:	f8c4 8000 	str.w	r8, [r4]
 800d42c:	e7e9      	b.n	800d402 <__submore+0x48>

0800d42e <memmove>:
 800d42e:	4288      	cmp	r0, r1
 800d430:	b510      	push	{r4, lr}
 800d432:	eb01 0402 	add.w	r4, r1, r2
 800d436:	d902      	bls.n	800d43e <memmove+0x10>
 800d438:	4284      	cmp	r4, r0
 800d43a:	4623      	mov	r3, r4
 800d43c:	d807      	bhi.n	800d44e <memmove+0x20>
 800d43e:	1e43      	subs	r3, r0, #1
 800d440:	42a1      	cmp	r1, r4
 800d442:	d008      	beq.n	800d456 <memmove+0x28>
 800d444:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d448:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d44c:	e7f8      	b.n	800d440 <memmove+0x12>
 800d44e:	4402      	add	r2, r0
 800d450:	4601      	mov	r1, r0
 800d452:	428a      	cmp	r2, r1
 800d454:	d100      	bne.n	800d458 <memmove+0x2a>
 800d456:	bd10      	pop	{r4, pc}
 800d458:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d45c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d460:	e7f7      	b.n	800d452 <memmove+0x24>

0800d462 <strncmp>:
 800d462:	b510      	push	{r4, lr}
 800d464:	b16a      	cbz	r2, 800d482 <strncmp+0x20>
 800d466:	3901      	subs	r1, #1
 800d468:	1884      	adds	r4, r0, r2
 800d46a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d46e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d472:	429a      	cmp	r2, r3
 800d474:	d103      	bne.n	800d47e <strncmp+0x1c>
 800d476:	42a0      	cmp	r0, r4
 800d478:	d001      	beq.n	800d47e <strncmp+0x1c>
 800d47a:	2a00      	cmp	r2, #0
 800d47c:	d1f5      	bne.n	800d46a <strncmp+0x8>
 800d47e:	1ad0      	subs	r0, r2, r3
 800d480:	bd10      	pop	{r4, pc}
 800d482:	4610      	mov	r0, r2
 800d484:	e7fc      	b.n	800d480 <strncmp+0x1e>
	...

0800d488 <_fstat_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	4d07      	ldr	r5, [pc, #28]	@ (800d4a8 <_fstat_r+0x20>)
 800d48c:	2300      	movs	r3, #0
 800d48e:	4604      	mov	r4, r0
 800d490:	4608      	mov	r0, r1
 800d492:	4611      	mov	r1, r2
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	f7f4 fc2b 	bl	8001cf0 <_fstat>
 800d49a:	1c43      	adds	r3, r0, #1
 800d49c:	d102      	bne.n	800d4a4 <_fstat_r+0x1c>
 800d49e:	682b      	ldr	r3, [r5, #0]
 800d4a0:	b103      	cbz	r3, 800d4a4 <_fstat_r+0x1c>
 800d4a2:	6023      	str	r3, [r4, #0]
 800d4a4:	bd38      	pop	{r3, r4, r5, pc}
 800d4a6:	bf00      	nop
 800d4a8:	200052e0 	.word	0x200052e0

0800d4ac <_isatty_r>:
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4d06      	ldr	r5, [pc, #24]	@ (800d4c8 <_isatty_r+0x1c>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4608      	mov	r0, r1
 800d4b6:	602b      	str	r3, [r5, #0]
 800d4b8:	f7f4 fc2a 	bl	8001d10 <_isatty>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_isatty_r+0x1a>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_isatty_r+0x1a>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	200052e0 	.word	0x200052e0

0800d4cc <_sbrk_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4d06      	ldr	r5, [pc, #24]	@ (800d4e8 <_sbrk_r+0x1c>)
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	602b      	str	r3, [r5, #0]
 800d4d8:	f7f4 fc32 	bl	8001d40 <_sbrk>
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	d102      	bne.n	800d4e6 <_sbrk_r+0x1a>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	b103      	cbz	r3, 800d4e6 <_sbrk_r+0x1a>
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	200052e0 	.word	0x200052e0

0800d4ec <nan>:
 800d4ec:	4901      	ldr	r1, [pc, #4]	@ (800d4f4 <nan+0x8>)
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	7ff80000 	.word	0x7ff80000

0800d4f8 <__assert_func>:
 800d4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4fa:	4614      	mov	r4, r2
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	4b09      	ldr	r3, [pc, #36]	@ (800d524 <__assert_func+0x2c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4605      	mov	r5, r0
 800d504:	68d8      	ldr	r0, [r3, #12]
 800d506:	b954      	cbnz	r4, 800d51e <__assert_func+0x26>
 800d508:	4b07      	ldr	r3, [pc, #28]	@ (800d528 <__assert_func+0x30>)
 800d50a:	461c      	mov	r4, r3
 800d50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d510:	9100      	str	r1, [sp, #0]
 800d512:	462b      	mov	r3, r5
 800d514:	4905      	ldr	r1, [pc, #20]	@ (800d52c <__assert_func+0x34>)
 800d516:	f000 fc19 	bl	800dd4c <fiprintf>
 800d51a:	f000 fc29 	bl	800dd70 <abort>
 800d51e:	4b04      	ldr	r3, [pc, #16]	@ (800d530 <__assert_func+0x38>)
 800d520:	e7f4      	b.n	800d50c <__assert_func+0x14>
 800d522:	bf00      	nop
 800d524:	2000001c 	.word	0x2000001c
 800d528:	080103e0 	.word	0x080103e0
 800d52c:	080103b2 	.word	0x080103b2
 800d530:	080103a5 	.word	0x080103a5

0800d534 <_calloc_r>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	fba1 5402 	umull	r5, r4, r1, r2
 800d53a:	b93c      	cbnz	r4, 800d54c <_calloc_r+0x18>
 800d53c:	4629      	mov	r1, r5
 800d53e:	f7fd fc8f 	bl	800ae60 <_malloc_r>
 800d542:	4606      	mov	r6, r0
 800d544:	b928      	cbnz	r0, 800d552 <_calloc_r+0x1e>
 800d546:	2600      	movs	r6, #0
 800d548:	4630      	mov	r0, r6
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	220c      	movs	r2, #12
 800d54e:	6002      	str	r2, [r0, #0]
 800d550:	e7f9      	b.n	800d546 <_calloc_r+0x12>
 800d552:	462a      	mov	r2, r5
 800d554:	4621      	mov	r1, r4
 800d556:	f7fc fd2f 	bl	8009fb8 <memset>
 800d55a:	e7f5      	b.n	800d548 <_calloc_r+0x14>

0800d55c <rshift>:
 800d55c:	6903      	ldr	r3, [r0, #16]
 800d55e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d566:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d56a:	f100 0414 	add.w	r4, r0, #20
 800d56e:	dd45      	ble.n	800d5fc <rshift+0xa0>
 800d570:	f011 011f 	ands.w	r1, r1, #31
 800d574:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d578:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d57c:	d10c      	bne.n	800d598 <rshift+0x3c>
 800d57e:	f100 0710 	add.w	r7, r0, #16
 800d582:	4629      	mov	r1, r5
 800d584:	42b1      	cmp	r1, r6
 800d586:	d334      	bcc.n	800d5f2 <rshift+0x96>
 800d588:	1a9b      	subs	r3, r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	1eea      	subs	r2, r5, #3
 800d58e:	4296      	cmp	r6, r2
 800d590:	bf38      	it	cc
 800d592:	2300      	movcc	r3, #0
 800d594:	4423      	add	r3, r4
 800d596:	e015      	b.n	800d5c4 <rshift+0x68>
 800d598:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d59c:	f1c1 0820 	rsb	r8, r1, #32
 800d5a0:	40cf      	lsrs	r7, r1
 800d5a2:	f105 0e04 	add.w	lr, r5, #4
 800d5a6:	46a1      	mov	r9, r4
 800d5a8:	4576      	cmp	r6, lr
 800d5aa:	46f4      	mov	ip, lr
 800d5ac:	d815      	bhi.n	800d5da <rshift+0x7e>
 800d5ae:	1a9a      	subs	r2, r3, r2
 800d5b0:	0092      	lsls	r2, r2, #2
 800d5b2:	3a04      	subs	r2, #4
 800d5b4:	3501      	adds	r5, #1
 800d5b6:	42ae      	cmp	r6, r5
 800d5b8:	bf38      	it	cc
 800d5ba:	2200      	movcc	r2, #0
 800d5bc:	18a3      	adds	r3, r4, r2
 800d5be:	50a7      	str	r7, [r4, r2]
 800d5c0:	b107      	cbz	r7, 800d5c4 <rshift+0x68>
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	1b1a      	subs	r2, r3, r4
 800d5c6:	42a3      	cmp	r3, r4
 800d5c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d5cc:	bf08      	it	eq
 800d5ce:	2300      	moveq	r3, #0
 800d5d0:	6102      	str	r2, [r0, #16]
 800d5d2:	bf08      	it	eq
 800d5d4:	6143      	streq	r3, [r0, #20]
 800d5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5da:	f8dc c000 	ldr.w	ip, [ip]
 800d5de:	fa0c fc08 	lsl.w	ip, ip, r8
 800d5e2:	ea4c 0707 	orr.w	r7, ip, r7
 800d5e6:	f849 7b04 	str.w	r7, [r9], #4
 800d5ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5ee:	40cf      	lsrs	r7, r1
 800d5f0:	e7da      	b.n	800d5a8 <rshift+0x4c>
 800d5f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d5f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d5fa:	e7c3      	b.n	800d584 <rshift+0x28>
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	e7e1      	b.n	800d5c4 <rshift+0x68>

0800d600 <__hexdig_fun>:
 800d600:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d604:	2b09      	cmp	r3, #9
 800d606:	d802      	bhi.n	800d60e <__hexdig_fun+0xe>
 800d608:	3820      	subs	r0, #32
 800d60a:	b2c0      	uxtb	r0, r0
 800d60c:	4770      	bx	lr
 800d60e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d612:	2b05      	cmp	r3, #5
 800d614:	d801      	bhi.n	800d61a <__hexdig_fun+0x1a>
 800d616:	3847      	subs	r0, #71	@ 0x47
 800d618:	e7f7      	b.n	800d60a <__hexdig_fun+0xa>
 800d61a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d61e:	2b05      	cmp	r3, #5
 800d620:	d801      	bhi.n	800d626 <__hexdig_fun+0x26>
 800d622:	3827      	subs	r0, #39	@ 0x27
 800d624:	e7f1      	b.n	800d60a <__hexdig_fun+0xa>
 800d626:	2000      	movs	r0, #0
 800d628:	4770      	bx	lr
	...

0800d62c <__gethex>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	b085      	sub	sp, #20
 800d632:	468a      	mov	sl, r1
 800d634:	9302      	str	r3, [sp, #8]
 800d636:	680b      	ldr	r3, [r1, #0]
 800d638:	9001      	str	r0, [sp, #4]
 800d63a:	4690      	mov	r8, r2
 800d63c:	1c9c      	adds	r4, r3, #2
 800d63e:	46a1      	mov	r9, r4
 800d640:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d644:	2830      	cmp	r0, #48	@ 0x30
 800d646:	d0fa      	beq.n	800d63e <__gethex+0x12>
 800d648:	eba9 0303 	sub.w	r3, r9, r3
 800d64c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d650:	f7ff ffd6 	bl	800d600 <__hexdig_fun>
 800d654:	4605      	mov	r5, r0
 800d656:	2800      	cmp	r0, #0
 800d658:	d168      	bne.n	800d72c <__gethex+0x100>
 800d65a:	49a0      	ldr	r1, [pc, #640]	@ (800d8dc <__gethex+0x2b0>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	4648      	mov	r0, r9
 800d660:	f7ff feff 	bl	800d462 <strncmp>
 800d664:	4607      	mov	r7, r0
 800d666:	2800      	cmp	r0, #0
 800d668:	d167      	bne.n	800d73a <__gethex+0x10e>
 800d66a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d66e:	4626      	mov	r6, r4
 800d670:	f7ff ffc6 	bl	800d600 <__hexdig_fun>
 800d674:	2800      	cmp	r0, #0
 800d676:	d062      	beq.n	800d73e <__gethex+0x112>
 800d678:	4623      	mov	r3, r4
 800d67a:	7818      	ldrb	r0, [r3, #0]
 800d67c:	2830      	cmp	r0, #48	@ 0x30
 800d67e:	4699      	mov	r9, r3
 800d680:	f103 0301 	add.w	r3, r3, #1
 800d684:	d0f9      	beq.n	800d67a <__gethex+0x4e>
 800d686:	f7ff ffbb 	bl	800d600 <__hexdig_fun>
 800d68a:	fab0 f580 	clz	r5, r0
 800d68e:	096d      	lsrs	r5, r5, #5
 800d690:	f04f 0b01 	mov.w	fp, #1
 800d694:	464a      	mov	r2, r9
 800d696:	4616      	mov	r6, r2
 800d698:	3201      	adds	r2, #1
 800d69a:	7830      	ldrb	r0, [r6, #0]
 800d69c:	f7ff ffb0 	bl	800d600 <__hexdig_fun>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d1f8      	bne.n	800d696 <__gethex+0x6a>
 800d6a4:	498d      	ldr	r1, [pc, #564]	@ (800d8dc <__gethex+0x2b0>)
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f7ff feda 	bl	800d462 <strncmp>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d13f      	bne.n	800d732 <__gethex+0x106>
 800d6b2:	b944      	cbnz	r4, 800d6c6 <__gethex+0x9a>
 800d6b4:	1c74      	adds	r4, r6, #1
 800d6b6:	4622      	mov	r2, r4
 800d6b8:	4616      	mov	r6, r2
 800d6ba:	3201      	adds	r2, #1
 800d6bc:	7830      	ldrb	r0, [r6, #0]
 800d6be:	f7ff ff9f 	bl	800d600 <__hexdig_fun>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d1f8      	bne.n	800d6b8 <__gethex+0x8c>
 800d6c6:	1ba4      	subs	r4, r4, r6
 800d6c8:	00a7      	lsls	r7, r4, #2
 800d6ca:	7833      	ldrb	r3, [r6, #0]
 800d6cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d6d0:	2b50      	cmp	r3, #80	@ 0x50
 800d6d2:	d13e      	bne.n	800d752 <__gethex+0x126>
 800d6d4:	7873      	ldrb	r3, [r6, #1]
 800d6d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d6d8:	d033      	beq.n	800d742 <__gethex+0x116>
 800d6da:	2b2d      	cmp	r3, #45	@ 0x2d
 800d6dc:	d034      	beq.n	800d748 <__gethex+0x11c>
 800d6de:	1c71      	adds	r1, r6, #1
 800d6e0:	2400      	movs	r4, #0
 800d6e2:	7808      	ldrb	r0, [r1, #0]
 800d6e4:	f7ff ff8c 	bl	800d600 <__hexdig_fun>
 800d6e8:	1e43      	subs	r3, r0, #1
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	2b18      	cmp	r3, #24
 800d6ee:	d830      	bhi.n	800d752 <__gethex+0x126>
 800d6f0:	f1a0 0210 	sub.w	r2, r0, #16
 800d6f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d6f8:	f7ff ff82 	bl	800d600 <__hexdig_fun>
 800d6fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800d700:	fa5f fc8c 	uxtb.w	ip, ip
 800d704:	f1bc 0f18 	cmp.w	ip, #24
 800d708:	f04f 030a 	mov.w	r3, #10
 800d70c:	d91e      	bls.n	800d74c <__gethex+0x120>
 800d70e:	b104      	cbz	r4, 800d712 <__gethex+0xe6>
 800d710:	4252      	negs	r2, r2
 800d712:	4417      	add	r7, r2
 800d714:	f8ca 1000 	str.w	r1, [sl]
 800d718:	b1ed      	cbz	r5, 800d756 <__gethex+0x12a>
 800d71a:	f1bb 0f00 	cmp.w	fp, #0
 800d71e:	bf0c      	ite	eq
 800d720:	2506      	moveq	r5, #6
 800d722:	2500      	movne	r5, #0
 800d724:	4628      	mov	r0, r5
 800d726:	b005      	add	sp, #20
 800d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72c:	2500      	movs	r5, #0
 800d72e:	462c      	mov	r4, r5
 800d730:	e7b0      	b.n	800d694 <__gethex+0x68>
 800d732:	2c00      	cmp	r4, #0
 800d734:	d1c7      	bne.n	800d6c6 <__gethex+0x9a>
 800d736:	4627      	mov	r7, r4
 800d738:	e7c7      	b.n	800d6ca <__gethex+0x9e>
 800d73a:	464e      	mov	r6, r9
 800d73c:	462f      	mov	r7, r5
 800d73e:	2501      	movs	r5, #1
 800d740:	e7c3      	b.n	800d6ca <__gethex+0x9e>
 800d742:	2400      	movs	r4, #0
 800d744:	1cb1      	adds	r1, r6, #2
 800d746:	e7cc      	b.n	800d6e2 <__gethex+0xb6>
 800d748:	2401      	movs	r4, #1
 800d74a:	e7fb      	b.n	800d744 <__gethex+0x118>
 800d74c:	fb03 0002 	mla	r0, r3, r2, r0
 800d750:	e7ce      	b.n	800d6f0 <__gethex+0xc4>
 800d752:	4631      	mov	r1, r6
 800d754:	e7de      	b.n	800d714 <__gethex+0xe8>
 800d756:	eba6 0309 	sub.w	r3, r6, r9
 800d75a:	3b01      	subs	r3, #1
 800d75c:	4629      	mov	r1, r5
 800d75e:	2b07      	cmp	r3, #7
 800d760:	dc0a      	bgt.n	800d778 <__gethex+0x14c>
 800d762:	9801      	ldr	r0, [sp, #4]
 800d764:	f7fd fc08 	bl	800af78 <_Balloc>
 800d768:	4604      	mov	r4, r0
 800d76a:	b940      	cbnz	r0, 800d77e <__gethex+0x152>
 800d76c:	4b5c      	ldr	r3, [pc, #368]	@ (800d8e0 <__gethex+0x2b4>)
 800d76e:	4602      	mov	r2, r0
 800d770:	21e4      	movs	r1, #228	@ 0xe4
 800d772:	485c      	ldr	r0, [pc, #368]	@ (800d8e4 <__gethex+0x2b8>)
 800d774:	f7ff fec0 	bl	800d4f8 <__assert_func>
 800d778:	3101      	adds	r1, #1
 800d77a:	105b      	asrs	r3, r3, #1
 800d77c:	e7ef      	b.n	800d75e <__gethex+0x132>
 800d77e:	f100 0a14 	add.w	sl, r0, #20
 800d782:	2300      	movs	r3, #0
 800d784:	4655      	mov	r5, sl
 800d786:	469b      	mov	fp, r3
 800d788:	45b1      	cmp	r9, r6
 800d78a:	d337      	bcc.n	800d7fc <__gethex+0x1d0>
 800d78c:	f845 bb04 	str.w	fp, [r5], #4
 800d790:	eba5 050a 	sub.w	r5, r5, sl
 800d794:	10ad      	asrs	r5, r5, #2
 800d796:	6125      	str	r5, [r4, #16]
 800d798:	4658      	mov	r0, fp
 800d79a:	f7fd fcdf 	bl	800b15c <__hi0bits>
 800d79e:	016d      	lsls	r5, r5, #5
 800d7a0:	f8d8 6000 	ldr.w	r6, [r8]
 800d7a4:	1a2d      	subs	r5, r5, r0
 800d7a6:	42b5      	cmp	r5, r6
 800d7a8:	dd54      	ble.n	800d854 <__gethex+0x228>
 800d7aa:	1bad      	subs	r5, r5, r6
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f7fe f86b 	bl	800b88a <__any_on>
 800d7b4:	4681      	mov	r9, r0
 800d7b6:	b178      	cbz	r0, 800d7d8 <__gethex+0x1ac>
 800d7b8:	1e6b      	subs	r3, r5, #1
 800d7ba:	1159      	asrs	r1, r3, #5
 800d7bc:	f003 021f 	and.w	r2, r3, #31
 800d7c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d7c4:	f04f 0901 	mov.w	r9, #1
 800d7c8:	fa09 f202 	lsl.w	r2, r9, r2
 800d7cc:	420a      	tst	r2, r1
 800d7ce:	d003      	beq.n	800d7d8 <__gethex+0x1ac>
 800d7d0:	454b      	cmp	r3, r9
 800d7d2:	dc36      	bgt.n	800d842 <__gethex+0x216>
 800d7d4:	f04f 0902 	mov.w	r9, #2
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f7ff febe 	bl	800d55c <rshift>
 800d7e0:	442f      	add	r7, r5
 800d7e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7e6:	42bb      	cmp	r3, r7
 800d7e8:	da42      	bge.n	800d870 <__gethex+0x244>
 800d7ea:	9801      	ldr	r0, [sp, #4]
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	f7fd fc03 	bl	800aff8 <_Bfree>
 800d7f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	25a3      	movs	r5, #163	@ 0xa3
 800d7fa:	e793      	b.n	800d724 <__gethex+0xf8>
 800d7fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d800:	2a2e      	cmp	r2, #46	@ 0x2e
 800d802:	d012      	beq.n	800d82a <__gethex+0x1fe>
 800d804:	2b20      	cmp	r3, #32
 800d806:	d104      	bne.n	800d812 <__gethex+0x1e6>
 800d808:	f845 bb04 	str.w	fp, [r5], #4
 800d80c:	f04f 0b00 	mov.w	fp, #0
 800d810:	465b      	mov	r3, fp
 800d812:	7830      	ldrb	r0, [r6, #0]
 800d814:	9303      	str	r3, [sp, #12]
 800d816:	f7ff fef3 	bl	800d600 <__hexdig_fun>
 800d81a:	9b03      	ldr	r3, [sp, #12]
 800d81c:	f000 000f 	and.w	r0, r0, #15
 800d820:	4098      	lsls	r0, r3
 800d822:	ea4b 0b00 	orr.w	fp, fp, r0
 800d826:	3304      	adds	r3, #4
 800d828:	e7ae      	b.n	800d788 <__gethex+0x15c>
 800d82a:	45b1      	cmp	r9, r6
 800d82c:	d8ea      	bhi.n	800d804 <__gethex+0x1d8>
 800d82e:	492b      	ldr	r1, [pc, #172]	@ (800d8dc <__gethex+0x2b0>)
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	2201      	movs	r2, #1
 800d834:	4630      	mov	r0, r6
 800d836:	f7ff fe14 	bl	800d462 <strncmp>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d1e1      	bne.n	800d804 <__gethex+0x1d8>
 800d840:	e7a2      	b.n	800d788 <__gethex+0x15c>
 800d842:	1ea9      	subs	r1, r5, #2
 800d844:	4620      	mov	r0, r4
 800d846:	f7fe f820 	bl	800b88a <__any_on>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d0c2      	beq.n	800d7d4 <__gethex+0x1a8>
 800d84e:	f04f 0903 	mov.w	r9, #3
 800d852:	e7c1      	b.n	800d7d8 <__gethex+0x1ac>
 800d854:	da09      	bge.n	800d86a <__gethex+0x23e>
 800d856:	1b75      	subs	r5, r6, r5
 800d858:	4621      	mov	r1, r4
 800d85a:	9801      	ldr	r0, [sp, #4]
 800d85c:	462a      	mov	r2, r5
 800d85e:	f7fd fde3 	bl	800b428 <__lshift>
 800d862:	1b7f      	subs	r7, r7, r5
 800d864:	4604      	mov	r4, r0
 800d866:	f100 0a14 	add.w	sl, r0, #20
 800d86a:	f04f 0900 	mov.w	r9, #0
 800d86e:	e7b8      	b.n	800d7e2 <__gethex+0x1b6>
 800d870:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d874:	42bd      	cmp	r5, r7
 800d876:	dd6f      	ble.n	800d958 <__gethex+0x32c>
 800d878:	1bed      	subs	r5, r5, r7
 800d87a:	42ae      	cmp	r6, r5
 800d87c:	dc34      	bgt.n	800d8e8 <__gethex+0x2bc>
 800d87e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d882:	2b02      	cmp	r3, #2
 800d884:	d022      	beq.n	800d8cc <__gethex+0x2a0>
 800d886:	2b03      	cmp	r3, #3
 800d888:	d024      	beq.n	800d8d4 <__gethex+0x2a8>
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d115      	bne.n	800d8ba <__gethex+0x28e>
 800d88e:	42ae      	cmp	r6, r5
 800d890:	d113      	bne.n	800d8ba <__gethex+0x28e>
 800d892:	2e01      	cmp	r6, #1
 800d894:	d10b      	bne.n	800d8ae <__gethex+0x282>
 800d896:	9a02      	ldr	r2, [sp, #8]
 800d898:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	2301      	movs	r3, #1
 800d8a0:	6123      	str	r3, [r4, #16]
 800d8a2:	f8ca 3000 	str.w	r3, [sl]
 800d8a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8a8:	2562      	movs	r5, #98	@ 0x62
 800d8aa:	601c      	str	r4, [r3, #0]
 800d8ac:	e73a      	b.n	800d724 <__gethex+0xf8>
 800d8ae:	1e71      	subs	r1, r6, #1
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f7fd ffea 	bl	800b88a <__any_on>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d1ed      	bne.n	800d896 <__gethex+0x26a>
 800d8ba:	9801      	ldr	r0, [sp, #4]
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f7fd fb9b 	bl	800aff8 <_Bfree>
 800d8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	2550      	movs	r5, #80	@ 0x50
 800d8ca:	e72b      	b.n	800d724 <__gethex+0xf8>
 800d8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1f3      	bne.n	800d8ba <__gethex+0x28e>
 800d8d2:	e7e0      	b.n	800d896 <__gethex+0x26a>
 800d8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1dd      	bne.n	800d896 <__gethex+0x26a>
 800d8da:	e7ee      	b.n	800d8ba <__gethex+0x28e>
 800d8dc:	08010218 	.word	0x08010218
 800d8e0:	080100af 	.word	0x080100af
 800d8e4:	080103e1 	.word	0x080103e1
 800d8e8:	1e6f      	subs	r7, r5, #1
 800d8ea:	f1b9 0f00 	cmp.w	r9, #0
 800d8ee:	d130      	bne.n	800d952 <__gethex+0x326>
 800d8f0:	b127      	cbz	r7, 800d8fc <__gethex+0x2d0>
 800d8f2:	4639      	mov	r1, r7
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7fd ffc8 	bl	800b88a <__any_on>
 800d8fa:	4681      	mov	r9, r0
 800d8fc:	117a      	asrs	r2, r7, #5
 800d8fe:	2301      	movs	r3, #1
 800d900:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d904:	f007 071f 	and.w	r7, r7, #31
 800d908:	40bb      	lsls	r3, r7
 800d90a:	4213      	tst	r3, r2
 800d90c:	4629      	mov	r1, r5
 800d90e:	4620      	mov	r0, r4
 800d910:	bf18      	it	ne
 800d912:	f049 0902 	orrne.w	r9, r9, #2
 800d916:	f7ff fe21 	bl	800d55c <rshift>
 800d91a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d91e:	1b76      	subs	r6, r6, r5
 800d920:	2502      	movs	r5, #2
 800d922:	f1b9 0f00 	cmp.w	r9, #0
 800d926:	d047      	beq.n	800d9b8 <__gethex+0x38c>
 800d928:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d015      	beq.n	800d95c <__gethex+0x330>
 800d930:	2b03      	cmp	r3, #3
 800d932:	d017      	beq.n	800d964 <__gethex+0x338>
 800d934:	2b01      	cmp	r3, #1
 800d936:	d109      	bne.n	800d94c <__gethex+0x320>
 800d938:	f019 0f02 	tst.w	r9, #2
 800d93c:	d006      	beq.n	800d94c <__gethex+0x320>
 800d93e:	f8da 3000 	ldr.w	r3, [sl]
 800d942:	ea49 0903 	orr.w	r9, r9, r3
 800d946:	f019 0f01 	tst.w	r9, #1
 800d94a:	d10e      	bne.n	800d96a <__gethex+0x33e>
 800d94c:	f045 0510 	orr.w	r5, r5, #16
 800d950:	e032      	b.n	800d9b8 <__gethex+0x38c>
 800d952:	f04f 0901 	mov.w	r9, #1
 800d956:	e7d1      	b.n	800d8fc <__gethex+0x2d0>
 800d958:	2501      	movs	r5, #1
 800d95a:	e7e2      	b.n	800d922 <__gethex+0x2f6>
 800d95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d95e:	f1c3 0301 	rsb	r3, r3, #1
 800d962:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0f0      	beq.n	800d94c <__gethex+0x320>
 800d96a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d96e:	f104 0314 	add.w	r3, r4, #20
 800d972:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d976:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d97a:	f04f 0c00 	mov.w	ip, #0
 800d97e:	4618      	mov	r0, r3
 800d980:	f853 2b04 	ldr.w	r2, [r3], #4
 800d984:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d988:	d01b      	beq.n	800d9c2 <__gethex+0x396>
 800d98a:	3201      	adds	r2, #1
 800d98c:	6002      	str	r2, [r0, #0]
 800d98e:	2d02      	cmp	r5, #2
 800d990:	f104 0314 	add.w	r3, r4, #20
 800d994:	d13c      	bne.n	800da10 <__gethex+0x3e4>
 800d996:	f8d8 2000 	ldr.w	r2, [r8]
 800d99a:	3a01      	subs	r2, #1
 800d99c:	42b2      	cmp	r2, r6
 800d99e:	d109      	bne.n	800d9b4 <__gethex+0x388>
 800d9a0:	1171      	asrs	r1, r6, #5
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d9a8:	f006 061f 	and.w	r6, r6, #31
 800d9ac:	fa02 f606 	lsl.w	r6, r2, r6
 800d9b0:	421e      	tst	r6, r3
 800d9b2:	d13a      	bne.n	800da2a <__gethex+0x3fe>
 800d9b4:	f045 0520 	orr.w	r5, r5, #32
 800d9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9ba:	601c      	str	r4, [r3, #0]
 800d9bc:	9b02      	ldr	r3, [sp, #8]
 800d9be:	601f      	str	r7, [r3, #0]
 800d9c0:	e6b0      	b.n	800d724 <__gethex+0xf8>
 800d9c2:	4299      	cmp	r1, r3
 800d9c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d9c8:	d8d9      	bhi.n	800d97e <__gethex+0x352>
 800d9ca:	68a3      	ldr	r3, [r4, #8]
 800d9cc:	459b      	cmp	fp, r3
 800d9ce:	db17      	blt.n	800da00 <__gethex+0x3d4>
 800d9d0:	6861      	ldr	r1, [r4, #4]
 800d9d2:	9801      	ldr	r0, [sp, #4]
 800d9d4:	3101      	adds	r1, #1
 800d9d6:	f7fd facf 	bl	800af78 <_Balloc>
 800d9da:	4681      	mov	r9, r0
 800d9dc:	b918      	cbnz	r0, 800d9e6 <__gethex+0x3ba>
 800d9de:	4b1a      	ldr	r3, [pc, #104]	@ (800da48 <__gethex+0x41c>)
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	2184      	movs	r1, #132	@ 0x84
 800d9e4:	e6c5      	b.n	800d772 <__gethex+0x146>
 800d9e6:	6922      	ldr	r2, [r4, #16]
 800d9e8:	3202      	adds	r2, #2
 800d9ea:	f104 010c 	add.w	r1, r4, #12
 800d9ee:	0092      	lsls	r2, r2, #2
 800d9f0:	300c      	adds	r0, #12
 800d9f2:	f7fc fb60 	bl	800a0b6 <memcpy>
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	9801      	ldr	r0, [sp, #4]
 800d9fa:	f7fd fafd 	bl	800aff8 <_Bfree>
 800d9fe:	464c      	mov	r4, r9
 800da00:	6923      	ldr	r3, [r4, #16]
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da08:	6122      	str	r2, [r4, #16]
 800da0a:	2201      	movs	r2, #1
 800da0c:	615a      	str	r2, [r3, #20]
 800da0e:	e7be      	b.n	800d98e <__gethex+0x362>
 800da10:	6922      	ldr	r2, [r4, #16]
 800da12:	455a      	cmp	r2, fp
 800da14:	dd0b      	ble.n	800da2e <__gethex+0x402>
 800da16:	2101      	movs	r1, #1
 800da18:	4620      	mov	r0, r4
 800da1a:	f7ff fd9f 	bl	800d55c <rshift>
 800da1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da22:	3701      	adds	r7, #1
 800da24:	42bb      	cmp	r3, r7
 800da26:	f6ff aee0 	blt.w	800d7ea <__gethex+0x1be>
 800da2a:	2501      	movs	r5, #1
 800da2c:	e7c2      	b.n	800d9b4 <__gethex+0x388>
 800da2e:	f016 061f 	ands.w	r6, r6, #31
 800da32:	d0fa      	beq.n	800da2a <__gethex+0x3fe>
 800da34:	4453      	add	r3, sl
 800da36:	f1c6 0620 	rsb	r6, r6, #32
 800da3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800da3e:	f7fd fb8d 	bl	800b15c <__hi0bits>
 800da42:	42b0      	cmp	r0, r6
 800da44:	dbe7      	blt.n	800da16 <__gethex+0x3ea>
 800da46:	e7f0      	b.n	800da2a <__gethex+0x3fe>
 800da48:	080100af 	.word	0x080100af

0800da4c <L_shift>:
 800da4c:	f1c2 0208 	rsb	r2, r2, #8
 800da50:	0092      	lsls	r2, r2, #2
 800da52:	b570      	push	{r4, r5, r6, lr}
 800da54:	f1c2 0620 	rsb	r6, r2, #32
 800da58:	6843      	ldr	r3, [r0, #4]
 800da5a:	6804      	ldr	r4, [r0, #0]
 800da5c:	fa03 f506 	lsl.w	r5, r3, r6
 800da60:	432c      	orrs	r4, r5
 800da62:	40d3      	lsrs	r3, r2
 800da64:	6004      	str	r4, [r0, #0]
 800da66:	f840 3f04 	str.w	r3, [r0, #4]!
 800da6a:	4288      	cmp	r0, r1
 800da6c:	d3f4      	bcc.n	800da58 <L_shift+0xc>
 800da6e:	bd70      	pop	{r4, r5, r6, pc}

0800da70 <__match>:
 800da70:	b530      	push	{r4, r5, lr}
 800da72:	6803      	ldr	r3, [r0, #0]
 800da74:	3301      	adds	r3, #1
 800da76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da7a:	b914      	cbnz	r4, 800da82 <__match+0x12>
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	2001      	movs	r0, #1
 800da80:	bd30      	pop	{r4, r5, pc}
 800da82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800da8a:	2d19      	cmp	r5, #25
 800da8c:	bf98      	it	ls
 800da8e:	3220      	addls	r2, #32
 800da90:	42a2      	cmp	r2, r4
 800da92:	d0f0      	beq.n	800da76 <__match+0x6>
 800da94:	2000      	movs	r0, #0
 800da96:	e7f3      	b.n	800da80 <__match+0x10>

0800da98 <__hexnan>:
 800da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	680b      	ldr	r3, [r1, #0]
 800da9e:	6801      	ldr	r1, [r0, #0]
 800daa0:	115e      	asrs	r6, r3, #5
 800daa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800daa6:	f013 031f 	ands.w	r3, r3, #31
 800daaa:	b087      	sub	sp, #28
 800daac:	bf18      	it	ne
 800daae:	3604      	addne	r6, #4
 800dab0:	2500      	movs	r5, #0
 800dab2:	1f37      	subs	r7, r6, #4
 800dab4:	4682      	mov	sl, r0
 800dab6:	4690      	mov	r8, r2
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	f846 5c04 	str.w	r5, [r6, #-4]
 800dabe:	46b9      	mov	r9, r7
 800dac0:	463c      	mov	r4, r7
 800dac2:	9502      	str	r5, [sp, #8]
 800dac4:	46ab      	mov	fp, r5
 800dac6:	784a      	ldrb	r2, [r1, #1]
 800dac8:	1c4b      	adds	r3, r1, #1
 800daca:	9303      	str	r3, [sp, #12]
 800dacc:	b342      	cbz	r2, 800db20 <__hexnan+0x88>
 800dace:	4610      	mov	r0, r2
 800dad0:	9105      	str	r1, [sp, #20]
 800dad2:	9204      	str	r2, [sp, #16]
 800dad4:	f7ff fd94 	bl	800d600 <__hexdig_fun>
 800dad8:	2800      	cmp	r0, #0
 800dada:	d151      	bne.n	800db80 <__hexnan+0xe8>
 800dadc:	9a04      	ldr	r2, [sp, #16]
 800dade:	9905      	ldr	r1, [sp, #20]
 800dae0:	2a20      	cmp	r2, #32
 800dae2:	d818      	bhi.n	800db16 <__hexnan+0x7e>
 800dae4:	9b02      	ldr	r3, [sp, #8]
 800dae6:	459b      	cmp	fp, r3
 800dae8:	dd13      	ble.n	800db12 <__hexnan+0x7a>
 800daea:	454c      	cmp	r4, r9
 800daec:	d206      	bcs.n	800dafc <__hexnan+0x64>
 800daee:	2d07      	cmp	r5, #7
 800daf0:	dc04      	bgt.n	800dafc <__hexnan+0x64>
 800daf2:	462a      	mov	r2, r5
 800daf4:	4649      	mov	r1, r9
 800daf6:	4620      	mov	r0, r4
 800daf8:	f7ff ffa8 	bl	800da4c <L_shift>
 800dafc:	4544      	cmp	r4, r8
 800dafe:	d952      	bls.n	800dba6 <__hexnan+0x10e>
 800db00:	2300      	movs	r3, #0
 800db02:	f1a4 0904 	sub.w	r9, r4, #4
 800db06:	f844 3c04 	str.w	r3, [r4, #-4]
 800db0a:	f8cd b008 	str.w	fp, [sp, #8]
 800db0e:	464c      	mov	r4, r9
 800db10:	461d      	mov	r5, r3
 800db12:	9903      	ldr	r1, [sp, #12]
 800db14:	e7d7      	b.n	800dac6 <__hexnan+0x2e>
 800db16:	2a29      	cmp	r2, #41	@ 0x29
 800db18:	d157      	bne.n	800dbca <__hexnan+0x132>
 800db1a:	3102      	adds	r1, #2
 800db1c:	f8ca 1000 	str.w	r1, [sl]
 800db20:	f1bb 0f00 	cmp.w	fp, #0
 800db24:	d051      	beq.n	800dbca <__hexnan+0x132>
 800db26:	454c      	cmp	r4, r9
 800db28:	d206      	bcs.n	800db38 <__hexnan+0xa0>
 800db2a:	2d07      	cmp	r5, #7
 800db2c:	dc04      	bgt.n	800db38 <__hexnan+0xa0>
 800db2e:	462a      	mov	r2, r5
 800db30:	4649      	mov	r1, r9
 800db32:	4620      	mov	r0, r4
 800db34:	f7ff ff8a 	bl	800da4c <L_shift>
 800db38:	4544      	cmp	r4, r8
 800db3a:	d936      	bls.n	800dbaa <__hexnan+0x112>
 800db3c:	f1a8 0204 	sub.w	r2, r8, #4
 800db40:	4623      	mov	r3, r4
 800db42:	f853 1b04 	ldr.w	r1, [r3], #4
 800db46:	f842 1f04 	str.w	r1, [r2, #4]!
 800db4a:	429f      	cmp	r7, r3
 800db4c:	d2f9      	bcs.n	800db42 <__hexnan+0xaa>
 800db4e:	1b3b      	subs	r3, r7, r4
 800db50:	f023 0303 	bic.w	r3, r3, #3
 800db54:	3304      	adds	r3, #4
 800db56:	3401      	adds	r4, #1
 800db58:	3e03      	subs	r6, #3
 800db5a:	42b4      	cmp	r4, r6
 800db5c:	bf88      	it	hi
 800db5e:	2304      	movhi	r3, #4
 800db60:	4443      	add	r3, r8
 800db62:	2200      	movs	r2, #0
 800db64:	f843 2b04 	str.w	r2, [r3], #4
 800db68:	429f      	cmp	r7, r3
 800db6a:	d2fb      	bcs.n	800db64 <__hexnan+0xcc>
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	b91b      	cbnz	r3, 800db78 <__hexnan+0xe0>
 800db70:	4547      	cmp	r7, r8
 800db72:	d128      	bne.n	800dbc6 <__hexnan+0x12e>
 800db74:	2301      	movs	r3, #1
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	2005      	movs	r0, #5
 800db7a:	b007      	add	sp, #28
 800db7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db80:	3501      	adds	r5, #1
 800db82:	2d08      	cmp	r5, #8
 800db84:	f10b 0b01 	add.w	fp, fp, #1
 800db88:	dd06      	ble.n	800db98 <__hexnan+0x100>
 800db8a:	4544      	cmp	r4, r8
 800db8c:	d9c1      	bls.n	800db12 <__hexnan+0x7a>
 800db8e:	2300      	movs	r3, #0
 800db90:	f844 3c04 	str.w	r3, [r4, #-4]
 800db94:	2501      	movs	r5, #1
 800db96:	3c04      	subs	r4, #4
 800db98:	6822      	ldr	r2, [r4, #0]
 800db9a:	f000 000f 	and.w	r0, r0, #15
 800db9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dba2:	6020      	str	r0, [r4, #0]
 800dba4:	e7b5      	b.n	800db12 <__hexnan+0x7a>
 800dba6:	2508      	movs	r5, #8
 800dba8:	e7b3      	b.n	800db12 <__hexnan+0x7a>
 800dbaa:	9b01      	ldr	r3, [sp, #4]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d0dd      	beq.n	800db6c <__hexnan+0xd4>
 800dbb0:	f1c3 0320 	rsb	r3, r3, #32
 800dbb4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb8:	40da      	lsrs	r2, r3
 800dbba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	f846 3c04 	str.w	r3, [r6, #-4]
 800dbc4:	e7d2      	b.n	800db6c <__hexnan+0xd4>
 800dbc6:	3f04      	subs	r7, #4
 800dbc8:	e7d0      	b.n	800db6c <__hexnan+0xd4>
 800dbca:	2004      	movs	r0, #4
 800dbcc:	e7d5      	b.n	800db7a <__hexnan+0xe2>

0800dbce <__ascii_mbtowc>:
 800dbce:	b082      	sub	sp, #8
 800dbd0:	b901      	cbnz	r1, 800dbd4 <__ascii_mbtowc+0x6>
 800dbd2:	a901      	add	r1, sp, #4
 800dbd4:	b142      	cbz	r2, 800dbe8 <__ascii_mbtowc+0x1a>
 800dbd6:	b14b      	cbz	r3, 800dbec <__ascii_mbtowc+0x1e>
 800dbd8:	7813      	ldrb	r3, [r2, #0]
 800dbda:	600b      	str	r3, [r1, #0]
 800dbdc:	7812      	ldrb	r2, [r2, #0]
 800dbde:	1e10      	subs	r0, r2, #0
 800dbe0:	bf18      	it	ne
 800dbe2:	2001      	movne	r0, #1
 800dbe4:	b002      	add	sp, #8
 800dbe6:	4770      	bx	lr
 800dbe8:	4610      	mov	r0, r2
 800dbea:	e7fb      	b.n	800dbe4 <__ascii_mbtowc+0x16>
 800dbec:	f06f 0001 	mvn.w	r0, #1
 800dbf0:	e7f8      	b.n	800dbe4 <__ascii_mbtowc+0x16>

0800dbf2 <_realloc_r>:
 800dbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf6:	4680      	mov	r8, r0
 800dbf8:	4615      	mov	r5, r2
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	b921      	cbnz	r1, 800dc08 <_realloc_r+0x16>
 800dbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	4611      	mov	r1, r2
 800dc04:	f7fd b92c 	b.w	800ae60 <_malloc_r>
 800dc08:	b92a      	cbnz	r2, 800dc16 <_realloc_r+0x24>
 800dc0a:	f7fd f8b5 	bl	800ad78 <_free_r>
 800dc0e:	2400      	movs	r4, #0
 800dc10:	4620      	mov	r0, r4
 800dc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc16:	f000 f8b2 	bl	800dd7e <_malloc_usable_size_r>
 800dc1a:	4285      	cmp	r5, r0
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	d802      	bhi.n	800dc26 <_realloc_r+0x34>
 800dc20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc24:	d8f4      	bhi.n	800dc10 <_realloc_r+0x1e>
 800dc26:	4629      	mov	r1, r5
 800dc28:	4640      	mov	r0, r8
 800dc2a:	f7fd f919 	bl	800ae60 <_malloc_r>
 800dc2e:	4607      	mov	r7, r0
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d0ec      	beq.n	800dc0e <_realloc_r+0x1c>
 800dc34:	42b5      	cmp	r5, r6
 800dc36:	462a      	mov	r2, r5
 800dc38:	4621      	mov	r1, r4
 800dc3a:	bf28      	it	cs
 800dc3c:	4632      	movcs	r2, r6
 800dc3e:	f7fc fa3a 	bl	800a0b6 <memcpy>
 800dc42:	4621      	mov	r1, r4
 800dc44:	4640      	mov	r0, r8
 800dc46:	f7fd f897 	bl	800ad78 <_free_r>
 800dc4a:	463c      	mov	r4, r7
 800dc4c:	e7e0      	b.n	800dc10 <_realloc_r+0x1e>
	...

0800dc50 <_strtoul_l.constprop.0>:
 800dc50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc54:	4e34      	ldr	r6, [pc, #208]	@ (800dd28 <_strtoul_l.constprop.0+0xd8>)
 800dc56:	4686      	mov	lr, r0
 800dc58:	460d      	mov	r5, r1
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc60:	5d37      	ldrb	r7, [r6, r4]
 800dc62:	f017 0708 	ands.w	r7, r7, #8
 800dc66:	d1f8      	bne.n	800dc5a <_strtoul_l.constprop.0+0xa>
 800dc68:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc6a:	d12f      	bne.n	800dccc <_strtoul_l.constprop.0+0x7c>
 800dc6c:	782c      	ldrb	r4, [r5, #0]
 800dc6e:	2701      	movs	r7, #1
 800dc70:	1c85      	adds	r5, r0, #2
 800dc72:	f033 0010 	bics.w	r0, r3, #16
 800dc76:	d109      	bne.n	800dc8c <_strtoul_l.constprop.0+0x3c>
 800dc78:	2c30      	cmp	r4, #48	@ 0x30
 800dc7a:	d12c      	bne.n	800dcd6 <_strtoul_l.constprop.0+0x86>
 800dc7c:	7828      	ldrb	r0, [r5, #0]
 800dc7e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800dc82:	2858      	cmp	r0, #88	@ 0x58
 800dc84:	d127      	bne.n	800dcd6 <_strtoul_l.constprop.0+0x86>
 800dc86:	786c      	ldrb	r4, [r5, #1]
 800dc88:	2310      	movs	r3, #16
 800dc8a:	3502      	adds	r5, #2
 800dc8c:	f04f 38ff 	mov.w	r8, #4294967295
 800dc90:	2600      	movs	r6, #0
 800dc92:	fbb8 f8f3 	udiv	r8, r8, r3
 800dc96:	fb03 f908 	mul.w	r9, r3, r8
 800dc9a:	ea6f 0909 	mvn.w	r9, r9
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800dca4:	f1bc 0f09 	cmp.w	ip, #9
 800dca8:	d81c      	bhi.n	800dce4 <_strtoul_l.constprop.0+0x94>
 800dcaa:	4664      	mov	r4, ip
 800dcac:	42a3      	cmp	r3, r4
 800dcae:	dd2a      	ble.n	800dd06 <_strtoul_l.constprop.0+0xb6>
 800dcb0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800dcb4:	d007      	beq.n	800dcc6 <_strtoul_l.constprop.0+0x76>
 800dcb6:	4580      	cmp	r8, r0
 800dcb8:	d322      	bcc.n	800dd00 <_strtoul_l.constprop.0+0xb0>
 800dcba:	d101      	bne.n	800dcc0 <_strtoul_l.constprop.0+0x70>
 800dcbc:	45a1      	cmp	r9, r4
 800dcbe:	db1f      	blt.n	800dd00 <_strtoul_l.constprop.0+0xb0>
 800dcc0:	fb00 4003 	mla	r0, r0, r3, r4
 800dcc4:	2601      	movs	r6, #1
 800dcc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcca:	e7e9      	b.n	800dca0 <_strtoul_l.constprop.0+0x50>
 800dccc:	2c2b      	cmp	r4, #43	@ 0x2b
 800dcce:	bf04      	itt	eq
 800dcd0:	782c      	ldrbeq	r4, [r5, #0]
 800dcd2:	1c85      	addeq	r5, r0, #2
 800dcd4:	e7cd      	b.n	800dc72 <_strtoul_l.constprop.0+0x22>
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1d8      	bne.n	800dc8c <_strtoul_l.constprop.0+0x3c>
 800dcda:	2c30      	cmp	r4, #48	@ 0x30
 800dcdc:	bf0c      	ite	eq
 800dcde:	2308      	moveq	r3, #8
 800dce0:	230a      	movne	r3, #10
 800dce2:	e7d3      	b.n	800dc8c <_strtoul_l.constprop.0+0x3c>
 800dce4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800dce8:	f1bc 0f19 	cmp.w	ip, #25
 800dcec:	d801      	bhi.n	800dcf2 <_strtoul_l.constprop.0+0xa2>
 800dcee:	3c37      	subs	r4, #55	@ 0x37
 800dcf0:	e7dc      	b.n	800dcac <_strtoul_l.constprop.0+0x5c>
 800dcf2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800dcf6:	f1bc 0f19 	cmp.w	ip, #25
 800dcfa:	d804      	bhi.n	800dd06 <_strtoul_l.constprop.0+0xb6>
 800dcfc:	3c57      	subs	r4, #87	@ 0x57
 800dcfe:	e7d5      	b.n	800dcac <_strtoul_l.constprop.0+0x5c>
 800dd00:	f04f 36ff 	mov.w	r6, #4294967295
 800dd04:	e7df      	b.n	800dcc6 <_strtoul_l.constprop.0+0x76>
 800dd06:	1c73      	adds	r3, r6, #1
 800dd08:	d106      	bne.n	800dd18 <_strtoul_l.constprop.0+0xc8>
 800dd0a:	2322      	movs	r3, #34	@ 0x22
 800dd0c:	f8ce 3000 	str.w	r3, [lr]
 800dd10:	4630      	mov	r0, r6
 800dd12:	b932      	cbnz	r2, 800dd22 <_strtoul_l.constprop.0+0xd2>
 800dd14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd18:	b107      	cbz	r7, 800dd1c <_strtoul_l.constprop.0+0xcc>
 800dd1a:	4240      	negs	r0, r0
 800dd1c:	2a00      	cmp	r2, #0
 800dd1e:	d0f9      	beq.n	800dd14 <_strtoul_l.constprop.0+0xc4>
 800dd20:	b106      	cbz	r6, 800dd24 <_strtoul_l.constprop.0+0xd4>
 800dd22:	1e69      	subs	r1, r5, #1
 800dd24:	6011      	str	r1, [r2, #0]
 800dd26:	e7f5      	b.n	800dd14 <_strtoul_l.constprop.0+0xc4>
 800dd28:	08010271 	.word	0x08010271

0800dd2c <_strtoul_r>:
 800dd2c:	f7ff bf90 	b.w	800dc50 <_strtoul_l.constprop.0>

0800dd30 <__ascii_wctomb>:
 800dd30:	4603      	mov	r3, r0
 800dd32:	4608      	mov	r0, r1
 800dd34:	b141      	cbz	r1, 800dd48 <__ascii_wctomb+0x18>
 800dd36:	2aff      	cmp	r2, #255	@ 0xff
 800dd38:	d904      	bls.n	800dd44 <__ascii_wctomb+0x14>
 800dd3a:	228a      	movs	r2, #138	@ 0x8a
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd42:	4770      	bx	lr
 800dd44:	700a      	strb	r2, [r1, #0]
 800dd46:	2001      	movs	r0, #1
 800dd48:	4770      	bx	lr
	...

0800dd4c <fiprintf>:
 800dd4c:	b40e      	push	{r1, r2, r3}
 800dd4e:	b503      	push	{r0, r1, lr}
 800dd50:	4601      	mov	r1, r0
 800dd52:	ab03      	add	r3, sp, #12
 800dd54:	4805      	ldr	r0, [pc, #20]	@ (800dd6c <fiprintf+0x20>)
 800dd56:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd5a:	6800      	ldr	r0, [r0, #0]
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	f7fe ff7f 	bl	800cc60 <_vfiprintf_r>
 800dd62:	b002      	add	sp, #8
 800dd64:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd68:	b003      	add	sp, #12
 800dd6a:	4770      	bx	lr
 800dd6c:	2000001c 	.word	0x2000001c

0800dd70 <abort>:
 800dd70:	b508      	push	{r3, lr}
 800dd72:	2006      	movs	r0, #6
 800dd74:	f000 f834 	bl	800dde0 <raise>
 800dd78:	2001      	movs	r0, #1
 800dd7a:	f7f3 ff69 	bl	8001c50 <_exit>

0800dd7e <_malloc_usable_size_r>:
 800dd7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd82:	1f18      	subs	r0, r3, #4
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bfbc      	itt	lt
 800dd88:	580b      	ldrlt	r3, [r1, r0]
 800dd8a:	18c0      	addlt	r0, r0, r3
 800dd8c:	4770      	bx	lr

0800dd8e <_raise_r>:
 800dd8e:	291f      	cmp	r1, #31
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4605      	mov	r5, r0
 800dd94:	460c      	mov	r4, r1
 800dd96:	d904      	bls.n	800dda2 <_raise_r+0x14>
 800dd98:	2316      	movs	r3, #22
 800dd9a:	6003      	str	r3, [r0, #0]
 800dd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dda4:	b112      	cbz	r2, 800ddac <_raise_r+0x1e>
 800dda6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddaa:	b94b      	cbnz	r3, 800ddc0 <_raise_r+0x32>
 800ddac:	4628      	mov	r0, r5
 800ddae:	f000 f831 	bl	800de14 <_getpid_r>
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddbc:	f000 b818 	b.w	800ddf0 <_kill_r>
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d00a      	beq.n	800ddda <_raise_r+0x4c>
 800ddc4:	1c59      	adds	r1, r3, #1
 800ddc6:	d103      	bne.n	800ddd0 <_raise_r+0x42>
 800ddc8:	2316      	movs	r3, #22
 800ddca:	6003      	str	r3, [r0, #0]
 800ddcc:	2001      	movs	r0, #1
 800ddce:	e7e7      	b.n	800dda0 <_raise_r+0x12>
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	4798      	blx	r3
 800ddda:	2000      	movs	r0, #0
 800dddc:	e7e0      	b.n	800dda0 <_raise_r+0x12>
	...

0800dde0 <raise>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	@ (800ddec <raise+0xc>)
 800dde2:	4601      	mov	r1, r0
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f7ff bfd2 	b.w	800dd8e <_raise_r>
 800ddea:	bf00      	nop
 800ddec:	2000001c 	.word	0x2000001c

0800ddf0 <_kill_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_kill_r+0x20>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	f7f3 ff17 	bl	8001c30 <_kill>
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	d102      	bne.n	800de0c <_kill_r+0x1c>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	b103      	cbz	r3, 800de0c <_kill_r+0x1c>
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	bd38      	pop	{r3, r4, r5, pc}
 800de0e:	bf00      	nop
 800de10:	200052e0 	.word	0x200052e0

0800de14 <_getpid_r>:
 800de14:	f7f3 bf04 	b.w	8001c20 <_getpid>

0800de18 <_init>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	bf00      	nop
 800de1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1e:	bc08      	pop	{r3}
 800de20:	469e      	mov	lr, r3
 800de22:	4770      	bx	lr

0800de24 <_fini>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	bf00      	nop
 800de28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de2a:	bc08      	pop	{r3}
 800de2c:	469e      	mov	lr, r3
 800de2e:	4770      	bx	lr
